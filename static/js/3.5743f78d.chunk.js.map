{"version":3,"sources":["AssetsUnderManagement/AssetsUnderManagement.js","TwitterShareButton/TwitterShareButton.module.scss","Stats/StatsChart.js","Rebalance/Rebalance.js","utilities/components/DateRangeModal.js","Stats/Stats.js","Utils/Utils.js","FundsOverview/FundsOverview.js","CurveRedeem/CurveRedeem.js","TwitterShareButton/TwitterShareButton.js","utilities/components/ShareModal.js","DepositRedeem/DepositRedeem.js","EstimatedEarnings/EstimatedEarnings.js","AssetPage/AssetPage.js","utilities/components/BetaModal.js","CurveDeposit/CurveDeposit.js","PortfolioEquityCurve/PortfolioEquityCurve.js","FundsOverviewCurve/FundsOverviewCurve.js","CurveStrategy/CurveStrategy.js","utilities/components/PolygonModal.js","utilities/components/WelcomeModal.js","utilities/components/MigrateModal.js","utilities/components/UpgradeModal.js","Dashboard/Dashboard.js"],"names":["AssetsUnderManagement","state","totalAUM","totalAUMEndOfYear","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","loadTotalAUM","prevProps","prevState","contractsInitialized","availableStrategies","JSON","stringify","getAggregatedStats","avgAPY","plus","times","div","setState","_this2","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","rimble_ui__WEBPACK_IMPORTED_MODULE_10__","width","react_countup__WEBPACK_IMPORTED_MODULE_8___default","delay","decimals","decimal","separator","useEasing","duration","start","parseFloat","end","formattingFn","n","formatMoney","_ref2","countUpRef","style","counterStyle","display","color","whiteSpace","fontFamily","theme","fonts","counter","fontWeight","fontWeights","textAlign","isMobile","fontSize","fontSizes","ref","subtitle","_Title_Title__WEBPACK_IMPORTED_MODULE_7__","Object","assign","subtitleProps","span","alignItems","justifyContent","loaderAlign","size","Component","module","exports","twitterIcon","StatsChart","chartProps","chartType","chartData","chartWidth","parseAum","value","parseInt","toFixed","_this","selectedToken","loadApiData","_callee3","maxGridLines","apiResults","apiResults_unfiltered","totalItems","protocols","versionInfo","keys","tempData","gridYStep","itemIndex","gridYValues","maxChartValue","axisBottomIndex","idleChartData","firstIdleBlock","divergingData","startTimestamp","endTimestamp","timestamp","date","lastRow","maxRange","i","_i","_i2","_i3","prevValue","_i4","prevApr","prevData","avgApy","startBalance","currentBalance","aaveProtocolInfo","_i5","firstTokenPrice","_i6","regenerator_default","wrap","_context3","prev","next","tokenConfig","chartMode","abrupt","length","globalConfigs","stats","versions","idleVersion","Line","t0","moment","_d","getTime","format","deposits","redeems","forEach","row","idleTokens","fixTokenDecimals","idleSupply","idleTokensPrev","eq","diff","minus","gte","Math","max","abs","values","filter","v","Bar","push","indexBy","enableLabel","minValue","maxValue","label","d","axisBottom","tickSize","legend","tickPadding","orient","legendOffset","legendPosition","tickValues","axisLeft","axisRight","tickRotation","abbreviateNumber","markers","axis","lineStyle","strokeOpacity","textStyle","fill","colors","transactions","action","deposit","legendOrientation","legendOffsetX","stroke","strokeDasharray","redeem","padding","labelTextColor","labelSkipWidth","labelSkipHeight","pointSize","useMesh","animate","pointLabel","curve","enableArea","enableSlices","enableGridX","enableGridY","pointBorderWidth","pointLabelYOffset","legends","dataFrom","itemWidth","itemHeight","translateX","translateY","symbolSize","itemsSpacing","direction","anchor","symbolShape","itemTextColor","effects","on","themeMode","ticks","text","sansSerif","grid","line","lineChartStroke","textTransform","tooltip","container","boxShadow","background","pointColor","from","modifiers","margin","top","right","bottom","left","data","xFormatted","strToMoment","indexValue","point","id","depositFormatted","redeemFormatted","react_default","CustomTooltip","CustomTooltipRow","tokens","hsl","join","map","idlePrice","aum","x","y","toString","p","j","protocolsData","protocolAllocation","protocolAddr","toLowerCase","address","z","BNify","rate","allocation","foundItem","item","pos","indexOf","allocations","name","undefined","xScale","type","xFormat","yFormat","yScale","stacked","showAdvanced","sliceTooltip","slideData","slice","points","serieId","serieColor","yFormatted","protocolName","protocolInfo","protocolColor","protocolAllocationFormatted","protocolAllocationPerc","key","concat","protocolData","protocolPaused","foundProtocol","find","tableCell","_ref3","DashboardCard","cardProps","py","px","borderCollapse","height","totalAllocation","reduce","accumulator","allocationPerc","_ref4","_ref5","enabled","protocolRate","lt","aaveAdditionalAPR","gt","idle","idleRate","protocolEarning","defiScore","isNaN","idleScore","apy","isSameOrBefore","aaveProtocolData","pData","apr","days","earnings","earning","blocknumber","itemPos","floor","additionalProtocols","additionalProtocol","protocol","unshift","objectSpread","tokensProps","tokenProps","isAfter","Date","now","rateField","chartRow","baseProfit","firstProtocolData","firstProtocolBlock","acc","field","rowData","idlePerformance","d1","protocolApy","tokenPrice","asyncForEach","_ref6","asyncToGenerator","mark","_callee2","lastRowData","lastTokenPrice","_context2","_ref7","_callee","tokenExchangeRate","tokenPriceFixed","lastYDiff","_context","price","stop","_x2","apply","arguments","_x","showAdvancedChanged","apiResultsChanged","tokenChanged","componentDidMount","GenericChart","showLoader","parentId","parentIdHeight","Rebalance","loading","processing","rebalance","txHash","shouldRebalance","componentUnmounted","checkRebalance","setStateSafe","sent","e","callback","callback_receipt","preventDefault","tx","error","eventData","eventLabel","status","eventCategory","eventAction","getTransactionError","sendGoogleAnalyticsEvent","window","toastProvider","addMessage","secondaryMessage","colorTheme","actionHref","actionText","variant","transactionHash","contractMethodSendWrapper","token","accountChanged","account","newState","index_es","minHeight","flexDirection","FlexLoader","flexProps","loaderProps","textProps","ml","TxProgressBar","waitText","endMessage","hash","mt","mb","RoundButton","buttonProps","disabled","handleClick","DateRangeModal","quickSelection","ranges","startDate","endDate","componentDidUpdate","selection","target","clone","subtract","closeModal","handleSelect","startTimestampObj","endTimestampObj","_this3","isOpen","ModalCard","closeFunc","Header","title","Body","backgroundColor","cardBg","required","onChange","handleQuickSelect","bind","options","dist","minDate","maxDate","className","Footer","my","mx","borderRadius","mainColor","onClick","React","Stats","delta","carouselMax","rebalances","buttonGroups","carouselIndex","statsVersions","minStartTime","govTokensPool","unlentBalance","carouselOffsetLeft","showRefreshIdleSpeed","dateRangeModalOpened","quickSelections","day","week","weeks","month","setDateRange","isSameOrAfter","isSame","add","isBefore","maxEndDate","toggleAdvancedCharts","setDateRangeModal","filterTokenData","r","setIdleVersion","isRisk","firstResult","lastResult","firstIdlePrice","lastIdlePrice","compoundInfo","firstCompoundData","lastCompoundData","compoundWithCOMPInfo","compoundAvgApr","firstCompoundPrice","lastCompoundPrice","compoundApr","availableTokens","includes","selectedStrategy","getTokenApiData","pop","convertTokenBalance","sum","compoundWithCOMP","compoundData","compoundRate","index","prevRow","prevTotalAllocation","hasRebalanced","prevP","prevAllocation","getGovTokenPool","getUnlentBalance","selectToken","strategy","setStrategyToken","changeToken","handleCarousel","$element","jQuery","position","loadParams","latestVersion","version","enabledStrategies","strategiesParams","versionInfoExtra","param","params","match","currentNetworkAvailableTokens","customToken","toUpperCase","getLatestAvailableVersion","getVersionInfo","newEndTimestampObj","newStartTimestampObj","web3","initWeb3","loadCarousel","strategyChanged","dateChanged","versionChanged","idleTokenEnabled","getGlobalConfig","apyLong","textSize","statsTokens","versionsOptions","enabledTokens","performanceTooltip","versionDefaultValue","Breadcrumb","showPathMobile","goToSection","path","GenericSelector","innerProps","defaultValue","AssetSelector","isInteractive","pr","StatsCard","labelTooltip","SmartNumber","precision","lineHeight","unitProps","number","unit","VariationNumber","iconPos","iconSize","description","Stats_StatsChart","contracts","pb","pt","AllocationChart","src_Rebalance_Rebalance","pl","h4","RoundIconButton","mr","iconName","transition","titleParentProps","utilities_components_DateRangeModal","strategies","statsProtocols","strategyInfo","availableProtocolsKeys","availableProtocols","Title","titlePostfix","AssetsList","cols","fields","mobile","parentProps","overflow","desc","showTooltip","rgb","hoverColor","isActive","ExecuteTransaction","Button","componentProps","contractName","methodName","completed","Utils","viewOnly","connectorName","showBreadCrumb","SubComponent","selectedSubsection","subComponent","selectedSection","route","dangerouslySetInnerHTML","__html","directProps","toolProps","flexWrap","IconBox","maxWidth","icon","submenu","tool","toolIndex","flex","image","src","FundsOverview","aggregatedValues","govTokensTotalApr","govTokensUserBalance","govTokensDistribution","govTokensTotalBalance","govTokensTotalAprTooltip","idleTokenUserDistribution","govTokensDistributionTooltip","govTokensTotalBalanceTooltip","idleGovToken","getIdleGovToken","govTokenAvailableTokens","Promise","all","getUserDistribution","getGovTokensUserBalances","loadAssetField","depositTimestamp","getAvgAPYStats","lte","totBalance","govTokenBalance","govToken","balance","children","AssetField","fieldInfo","showScore","getCurrentNetwork","provider","colWidth","placement","message","PortfolioEquity","chartHeight","chartToken","frequencySeconds","getFrequencySeconds","component","Heading","h3","maxPrecision","govTokenIndex","tokenName","distributionFrequency","CurveRedeem","inputValue","maxSlippage","unevenAmounts","buttonDisabled","showMaxSlippage","redeemUnderlying","curveTokenConfig","curvePoolContract","curveSwapContract","curveTokenBalance","curveTokensAmounts","fastBalanceSelector","redeemUnevenAmounts","curveRedeemableIdleTokens","toggleUnevenAmounts","checkButtonDisabled","amount","changeInputValue","setFastBalanceSelector","setMaxSlippage","initToken","max_slippage","normalizedAmount","normalizeTokenAmount","withdrawSlippage","curveIdleTokensAmounts","getCurveTokensAmounts","getCurveIdleTokensAmounts","getCurveSlippage","getCurveTokenPrice","curveTokenPrice","redeemableBalance","redeemUnevenAmountsChanged","setInputValue","inputChanged","maxSlippageChanged","tokenConfigChanged","calculateSlippage","loadSelectedTokenConfig","selectedPercentage","curveConfig","getCurvePoolContract","getCurveSwapContract","getCurveTokenBalance","getCurveRedeemableIdleTokens","getCurveAvailableTokens","callbackRedeem","txSucceeded","eventValue","callbackReceiptRedeem","_amount","min_amounts","console","log","coin_index","migrationParams","coinIndex","min_amount","showSlippage","curveTokenName","cancelTransaction","checked","showBalance","selectDestinationToken","slippage","FastBalanceSelector","percentage","onMouseDown","failed","textOverflow","min","placeholder","border","divider","TwitterShareButton","share","parent","w","innerWidth","open","tweet","contrastColor","styles","ShareModal","getGlobalConfigs","analytics","google","events","escape","customText","confettiEnabled","react_confetti_default","zIndex","run","recycle","innerHeight","src_TwitterShareButton_TwitterShareButton","DepositRedeem","txError","tokenAPY","curveAPY","canRedeem","canDeposit","directMint","activeModal","tokenGovTokens","showBuyFlow","maxUnlentPerc","tokenApproved","skipMigration","redeemSkipGov","showRedeemFlow","contractPaused","canRedeemCurve","erc20ForwarderTx","signedParameters","minAmountForMint","redeemGovTokens","canDepositCurve","redeemSkipGovTokens","actionProxyContract","migrationEnabled","componentMounted","agreeSkipGovTokens","redeemCurveEnabled","depositCurveBalance","depositCurveEnabled","showAdvancedOptions","skipGovTokensGasSave","depositCurveSlippage","erc20ForwarderContract","erc20ForwarderEnabled","showETHWrapperEnabled","skipGovTokensGasSaveUSD","metaTransactionsEnabled","skippedGovTokensBalance","minAmountForMintReached","loadingErc20ForwarderTx","showPolygonBridgeEnabled","setShowRedeemFlow","setShowBuyFlow","toggleShowAdvancedOptions","toggleSkipMigration","toggleRedeemCurve","toggleDepositCurve","toggleShowETHWrapper","toggleShowPolygonBridge","toggleAgreeSkipGovTokens","toggleSkipMint","toggleRedeemGovTokens","toggleRedeemSkipGov","getSkippedGovTokensFlags","govTokensIndexes","govTokensFlags","getGovTokensIndexes","calculateSkippedGovTokens","DAITokenConfig","_skipGovTokenRedeem","WETHTokenConfig","wethPrice","redeemGasUsage","skipGovRedeemGasUsage","govTokenConfig","govTokenPrice","skippedAmount","getUniswapConversionRate","govTokensUserBalances","estimateMethodGasUsage","idleTokenBalance","slicedToArray","setRedeemSkipGovTokens","splice","toggleErc20ForwarderEnabled","toggleMetaTransactionsEnabled","resetModal","setActiveModal","checkUseProxyContract","proxyContract","depositErc20ForwarderEnabled","depositMetaTransactionsEnabled","biconomy","approveContract","_callee4","callbackApprove","callbackReceiptApprove","curveDepositContract","_context4","enableERC20","checkTokenApproved","_callee5","_context5","approveToken","_callee6","_context6","approve","loadTokenInfo","_callee7","curveTokenEnabled","_ref10","_ref11","_context7","checkContractPaused","getCurveDepositContract","checkMigration","tokenBalance","accountBalance","getTokenGovTokens","boost","checkAction","loadAPY","_callee8","_context8","defineProperty","executeAction","_callee11","contractSendResult","callbackDeposit","callbackReceiptDeposit","curvePoolContractInfo","tokensToDeposit","amounts","minMintAmount","depositParams","_tokensToDeposit","_depositParams","mintProxyContractInfo","mintProxyContract","_mintProxyContract$me","functionCall","functionSignature","_referral","txData","idleTokenToRedeem","idleTokenPriceWithFee","_callbackRedeem","_callbackReceiptRedeem","redeemMethod","redeemParams","_context11","getFastBalanceSelector","localStorage","setLocalStorage","lendingProcessing","lendAmount","genericError","getCurveAmounts","getCurveTokenAmount","integerValue","contract","methods","function","toConsumableArray","encodeABI","sendBiconomyTxWithPersonalSign","_callee10","metaInfo","permitOptions","erc20ForwarderBaseContract","expiry","nonce","s","_context10","signPermit","allowed","holder","spender","permitData","permitType","asyncTimeout","sendBiconomyTxWithErc20Forwarder","request","_callee9","_erc20ForwarderContra","_functionCall","_functionSignature","_context9","buildBiconomyErc20ForwarderTx","getReferralAddress","getIdleTokenPriceWithFee","_callee12","_context12","setAction","loadProxyContracts","actions","_ref17","_callee15","erc20ForwarderContractInfo","hasProxyContract","_context15","initContract","abi","approved","_x5","getTokenAprs","tokenAprs","getCurveAPY","getQueryStringParameterByName","checkAddress","erc20ForwarderEnabledChanged","tokenBalanceChanged","actionChanged","fastBalanceSelectorChanged","redeemSkipGovChanged","redeemGovTokensChanged","agreeSkipGovTokensChanged","redeemSkipGovTokensChanged","depositCurveChanged","calculateCurveSlippage","showPoolPerc","convertedAmount","genericContractCall","depositPerc","maxUnlentPercFormatted","currentNetwork","govTokensEnabled","govTokensDisabled","skipMintForDepositEnabled","skipMintForDeposit","redeemGovTokenEnabled","govTokensBalance","redeemSkipGovConfig","redeemSkipGovEnabled","disabledTokens","redeemSkipGovNoTokens","showAdvancedRedeemOptions","metaTransactionsAvailable","useMetaTx","erc20ForwarderClient","totalBalance","migrateText","migration","depositCurve","showDepositCurve","showRedeemCurve","showCurveSlippage","showAdvancedDepositOptions","batchDepositInfo","batchDepositEnabled","availableNetworks","getCurrentNetworkId","batchDepositDepositEnabled","depositEnabled","showBatchDeposit","isMigrationTool","ethWrapperInfo","ETHWrapperComponent","showETHWrapper","polygonBridgeInfo","polygonNetworkId","canPerformAction","showActionFlow","showPolygonBridge","showPolygonBridgeBanner","buyToken","getBaseToken","showReferral","Migrate","migrateTextBefore","TransactionField","transaction","isDisabled","openTooltipModal","isRainbow","cursor","m","CardIconButton","imageProps","ExtLink","href","getWalletProvider","capitalize","primary","fullWidth","cost","align","tokenFeesPercentage","borderColor","minWidth","ConnectBox","src_CurveRedeem_CurveRedeem","BuyModal","showInline","availableMethods","components_ShareModal","EstimatedEarnings","maxInputValue","loadChart","getTokenApy","earningsYear","tokenApy","amountMonth","amount3Months","amount6Months","amountYear","perc","monthColor","month3","month3Color","month6","month6Color","year","yearColor","labelTextColorModifiers","gridYValue","_ref","labels","showAPYDisclaimer","verticalAlign","AssetPage","tokenFees","idleTokenPrice","availableGovTokens","getTokenFees","getIdleTokenPrice","getTokenBalance","getUserTokenFees","getGovTokensUserTotalBalance","loadTokensInfo","availableTokensChanged","transactionsChanged","userHasFunds","src_DepositRedeem_DepositRedeem","src_FundsOverview_FundsOverview","src_EstimatedEarnings_EstimatedEarnings","TransactionsList","BetaModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","iconHeight","CurveDeposit","depositSlippage","migrationContract","curveTokensBalance","migrationSucceeded","migrationContractApproved","checkMigrationContractApproved","getMigrationParams","approveCallback","migrationCallback","idleTokenBalanceChanged","toMigrate","n_coins","underlyingBalanceToDeposit","normalizeIdleTokenBalance","hasCurveTokens","PortfolioEquityCurve","chartwidth","loadChartData","quickDateSelectionChanged","quickDateSelection","getCurveTxs","curveTxs","tokensBalance","processedTxs","firstTxTimestamp","timeStamp","curveTokens","currentDate","prevBalances","prevTimestamp","minChartValue","aggregatedBalancesKeys","tokensBalancesPerDate","aggregatedBalance","currTimestamp","tokensData","foundBalances","tokensBalances","momentDate","filteredTokenData","filteredBalances","lastFilteredTx","lastTokenData","lastTx","lastTxBalance","formattedDate","aggregatedBalanceParsed","aggregatedBalances","balances","yFormatDecimals","daysCount","daysFrequency","ceil","areaOpacity","areaBaselineValue","ChartCustomTooltip","ChartCustomTooltipRow","tokenInfo","hex","formattedBalance","FundsOverviewCurve","compAPR","getCurveAvgBuyPrice","getCurveAvgSlippage","src_PortfolioEquityCurve_PortfolioEquityCurve","redeemBalance","depositBalance","curveZapContract","curveAvailableTokens","changeFromToken","setSelectedToken","baseToken","getSelectedToken","urlParams","param1","getCurveZapContract","updateAssetSelector","curveTokensToRedeem","src_CurveDeposit_CurveDeposit","src_FundsOverviewCurve_FundsOverviewCurve","enabledActions","PolygonModal","getEtherscanAddressUrl","WelcomeModal","email","subscribed","sendingForm","sendUserInfo","sendEmail","walletProvider","userInfo","simpleIDPassUserInfo","setTimeout","err","handleSubmit","assertThisInitialized","handleValidation","axios","post","newsletterSubscription","endpoint","then","catch","walletAddress","lastLogin","getItem","parse","signedUp","parentNode","classList","onSubmit","green","Field","Input","outline","header_styles","input","ButtonLoader","buttonText","isLoading","gradientButton","MigrateModal","dontShowAgain","toggleDontShowAgain","removeStoredItem","migrate","tokenMigrationRoute","fieldProps","protocolsTokensBalances","minPrecision","UpgradeModal","_args3","convert","convertTool","tokensToMigrate","tokenKey","oldContractBalanceFormatted","oldIdleTokensToMigrate","newTokenConfig","Dashboard","menu","baseRoute","clickEvent","currentRoute","pageComponent","currentSection","showResetButton","pageComponentProps","timeoutId","modalTitle","modalContent","logout","setConnector","comingSoon","selected","bgColor","imageInactive","iconInactive","imageInactiveDark","iconInactiveDark","curveParams","CurveStrategy","stakeConfig","statsInfo","isExternalLink","section","param2","section_is_strategy","param1_is_strategy","param1_is_token","param2_is_token","sectionRoute","subm","sendGoogleAnalyticsPageview","clearTimeout","setCurrentSection","accountInizialized","networkInitialized","checkNetwork","initAccount","initializeContracts","loadMenu","checkModals","prevParams","networkChanged","checkPolygonModal","checkBetaApproval","checkTokensToMigrate","checkWelcomeModal","checkProtocolsTokensBalances","isPolygon","isPolygonApproved","getStoredItem","isOriginUrl","checkUrlOrigin","isBetaApproved","showUpgradeModal","getTokensToMigrate","getProtocolsTokensBalances","welcomeIsOpen","welcomeModalProps","currTime","lastTime","frequency","migrateModalEnabled","showMigrateModal","isDashboard","replace","newRoute","location","scrollTo","routeParts","PageComponent","menuRightBorder","borderRight","DashboardMenu","overflowY","overflowX","DashboardHeader","network","isCorrectNetwork","current","components_PolygonModal","components_BetaModal","components_UpgradeModal","components_MigrateModal","TooltipModal","content","components_WelcomeModal","simpleID","initSimpleID","baseTokenName"],"mappings":"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","file":"static/js/3.5743f78d.chunk.js","sourcesContent":["import Title from '../Title/Title';\nimport CountUp from 'react-countup';\nimport React, { Component } from 'react';\nimport { Box, Flex, Text, Loader } from \"rimble-ui\";\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass AssetsUnderManagement extends Component {\n\n  state = {\n    totalAUM:null,\n    totalAUMEndOfYear:null\n  }\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadTotalAUM();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const availableStrategiesChanged = !prevProps.availableStrategies && JSON.stringify(prevProps.availableStrategies) !== JSON.stringify(this.props.availableStrategies);\n    if (availableStrategiesChanged || contractsInitialized){\n      this.loadTotalAUM();\n    }\n  }\n\n  async loadTotalAUM(){\n\n    if (!this.props.availableStrategies || !this.props.contractsInitialized){\n      return true;\n    }\n\n    const {\n      avgAPY,\n      totalAUM\n    } = await this.functionsUtil.getAggregatedStats();\n\n    const totalAUMEndOfYear = totalAUM.plus(totalAUM.times(avgAPY.div(100)));\n\n    this.setState({\n      totalAUM,\n      totalAUMEndOfYear\n    });\n  }\n\n  render() {\n    return this.state.totalAUM ? (\n      <Box\n        width={1}\n      >\n        <CountUp\n          delay={0}\n          decimals={4}\n          decimal={'.'}\n          separator={''}\n          useEasing={false}\n          duration={31536000}\n          start={parseFloat(this.state.totalAUM)}\n          end={parseFloat(this.state.totalAUMEndOfYear)}\n          formattingFn={ n => '$ '+this.functionsUtil.formatMoney(n,4) }\n        >\n          {({ countUpRef, start }) => (\n            <span\n              style={ this.props.counterStyle ? this.props.counterStyle : {\n                display:'block',\n                color:'dark-gray',\n                whiteSpace:'nowrap',\n                fontFamily:this.props.theme.fonts.counter,\n                fontWeight:this.props.theme.fontWeights[5],\n                textAlign: this.props.isMobile ? 'center' : 'right',\n                fontSize: this.props.isMobile ? '1.6em' : this.props.theme.fontSizes[6]\n              }}\n              ref={countUpRef}\n            />\n          )}\n        </CountUp>\n        {\n          (typeof this.props.subtitle === 'undefined' || this.props.subtitle) && (\n            <Title\n              fontWeight={3}\n              fontSize={[2,2]}\n              color={'cellTitle'}\n              textAlign={['center','right']}\n              {...this.props.subtitleProps}\n            >\n              {\n                this.props.subtitle ? this.props.subtitle : (\n                  <Text.span fontWeight={'inherit'} color={'inherit'} fontSize={'inherit'}>Assets Under Management <Text.span color={'cellTitle'} fontWeight={3} fontSize={'70%'}>(V3 + V4)</Text.span></Text.span>\n                )\n              }\n            </Title>\n          )\n        }\n      </Box>\n    ) : (\n      <Flex\n        alignItems={'center'}\n        justifyContent={this.props.loaderAlign || 'center'}\n      >\n        <Loader\n          size={\"30px\"}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default AssetsUnderManagement;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"twitterIcon\":\"TwitterShareButton_twitterIcon__2QCmn\"};","import moment from 'moment';\nimport { Bar } from '@nivo/bar';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CustomTooltip from '../CustomTooltip/CustomTooltip';\nimport CustomTooltipRow from '../CustomTooltip/CustomTooltipRow';\n\nclass StatsChart extends Component {\n  state = {\n    chartProps:{},\n    chartType:null,\n    chartData:null,\n    chartWidth:null\n  };\n\n  async componentDidMount() {\n    this.setState({\n      chartData:null,\n      chartType:null,\n      chartProps:null,\n    });\n    this.loadUtils();\n    this.loadApiData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const showAdvancedChanged = prevProps.showAdvanced !== this.props.showAdvanced;\n    const apiResultsChanged = prevProps.apiResults !== this.props.apiResults;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    if (apiResultsChanged || showAdvancedChanged || tokenChanged){\n      this.componentDidMount();\n    }\n  }\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  parseAum = value => {\n    return (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.tokenConfig || !this.props.selectedToken || !this.props.chartMode || !this.props.apiResults){\n      return false;\n    }\n\n    const maxGridLines = 4;\n    const apiResults = this.props.apiResults;\n    const apiResults_unfiltered = this.props.apiResults_unfiltered;\n    const totalItems = apiResults.length;\n    const protocols = Object.assign([],this.props.tokenConfig.protocols);\n    // const compoundProtocol = this.props.tokenConfig.protocols.find( p => (p.name === 'compound'));\n\n    const versionInfo = globalConfigs.stats.versions[this.props.idleVersion];\n\n    let keys = {};\n    let tempData = {};\n    let gridYStep = 0;\n    let itemIndex = 0;\n    let chartData = [];\n    let chartProps = {};\n    let chartType = Line;\n    let gridYValues = [];\n    let maxChartValue = 0;\n    let axisBottomIndex = 0;\n    let idleChartData = null;\n    let firstIdleBlock = null;\n\n    switch (this.props.chartMode){\n      case 'VOL':\n        let divergingData = {};\n\n        const startTimestamp = parseInt(apiResults_unfiltered[0].timestamp);\n        const endTimestamp = parseInt(moment()._d.getTime()/1000);\n\n        for (let timestamp=startTimestamp;timestamp<=endTimestamp;timestamp+=86400){\n          const date = moment(timestamp*1000).format(\"YYYY/MM/DD\");\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n        }\n\n        let lastRow = null;\n        apiResults_unfiltered.forEach(row => {\n          const date = moment(row.timestamp*1000).format(\"YYYY/MM/DD\");\n          const idleTokens = this.functionsUtil.fixTokenDecimals(row.idleSupply,18);\n\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp:row.timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n\n          if (lastRow){\n            const idleTokensPrev = this.functionsUtil.fixTokenDecimals(lastRow.idleSupply,18);\n            const idleTokensDiff = !idleTokens.eq(idleTokensPrev);\n            if (idleTokensDiff){\n              const diff = idleTokens.minus(idleTokensPrev);\n              // Deposits\n              if (diff.gte(0)){\n                divergingData[date].deposits+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,divergingData[date].deposits);\n              } else {\n                divergingData[date].redeems+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,Math.abs(divergingData[date].deposits));\n              }\n            }\n\n          } else {\n            divergingData[date].deposits+=parseFloat(idleTokens);\n          }\n\n          lastRow = row;\n        });\n\n        chartData = Object.values(divergingData).filter(v => {\n          return (!this.props.startTimestamp || v.timestamp>=this.props.startTimestamp) && (!this.props.endTimestamp || v.timestamp<=this.props.endTimestamp);\n        });\n\n        let maxRange = 0;\n        chartData.forEach(v => {\n          maxRange = Math.max(maxRange,Math.abs(v.deposits),Math.abs(v.redeems));\n        })\n\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          indexBy: 'date',\n          enableLabel: false,\n          minValue:-maxRange,\n          maxValue:maxRange,\n          label: d => {\n            return Math.abs(d.value);\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days',\n          },\n          axisLeft: null,\n          axisRight: {\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:8,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(Math.abs(v),0)\n          },\n          markers: [\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { strokeOpacity: 0 },\n              textStyle: { fill: this.props.theme.colors.transactions.action.deposit },\n              legend: 'deposits',\n              legendPosition: 'top-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { stroke: this.props.theme.colors['dark-gray'], strokeDasharray: '5 3' },\n              textStyle: { fill: this.props.theme.colors.transactions.action.redeem },\n              legend: 'redeems',\n              legendPosition: 'bottom-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n          ],\n          keys:['deposits','redeems'],\n          padding:0.4,\n          colors:[this.props.theme.colors.transactions.action.deposit, this.props.theme.colors.transactions.action.redeem],\n          labelTextColor: 'inherit:darker(1.4)',\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 80 : 100,\n              itemHeight: 18,\n              translateX: 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            },\n            tooltip:{\n              container:{\n                boxShadow:null,\n                background:null\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 50, bottom: 45, left: 50 } : { top: 20, right: 70, bottom: 70, left: 50 },\n          tooltip:(data) => {\n            const xFormatted = this.functionsUtil.strToMoment(data.indexValue).format('MMM DD');\n            const point = {\n              id:data.id,\n              data:{\n                xFormatted\n              }\n            };\n            const depositFormatted = this.functionsUtil.abbreviateNumber(data.data.deposits,2)+' '+this.props.selectedToken;\n            const redeemFormatted = this.functionsUtil.abbreviateNumber(data.data.redeems,2)+' '+this.props.selectedToken;\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                <CustomTooltipRow\n                  label={'Deposits'}\n                  color={this.props.theme.colors.deposit}\n                  value={depositFormatted}\n                />\n                <CustomTooltipRow\n                  label={'Redeem'}\n                  color={this.props.theme.colors.redeem}\n                  value={redeemFormatted}\n                />\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      /*\n      case 'AUM_ALL':\n        await this.functionsUtil.asyncForEach(Object.keys(availableTokens[globalConfigs.network.requiredNetwork]),async (tokenName,i) => {\n          const tokenConfig = availableTokens[globalConfigs.network.requiredNetwork][tokenName];\n          const tokenDataApi = await this.props.getTokenData(tokenConfig.address);\n          chartData.push({\n            id:tokenName,\n            color: tokenConfig.color,\n            data: tokenDataApi.map((d,i) => {\n              const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n              const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,tokenConfig.decimals);\n              const aum = idleTokens.times(idlePrice);\n              return {\n                x: moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\"),\n                y: parseInt(aum.toString())\n              };\n            })\n          });\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken,\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v),\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            legendPosition: 'middle'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            format: '%b %d',\n            tickValues: this.props.isMobile ? 'every 4 days' : 'every 3 days',\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 36,\n            legendPosition: 'middle'\n          },\n          enableArea:false,\n          curve:\"linear\",\n          enableSlices:'x',\n          enableGridX:true,\n          enableGridY:false,\n          colors:d => d.color,\n          pointSize:0,\n          pointColor:{ from: 'color', modifiers: []},\n          pointBorderWidth:1,\n          pointLabel:\"y\",\n          pointLabelYOffset:-12,\n          useMesh:true,\n          animate:false,\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 60, bottom: 40, left: 60 },\n        };\n      break;\n      */\n      case 'AUM':\n\n        maxChartValue = 0;\n\n        chartData.push({\n          id:'AUM',\n          color: 'hsl('+globalConfigs.stats.tokens[this.props.selectedToken].color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n            const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n            const aum = idleTokens.times(idlePrice);\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(aum.toString());\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x,y };\n          })\n        });\n\n        // Add allocation\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          apiResults.map((d,i) => {\n            return d.protocolsData.filter((protocolAllocation,x) => {\n                return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            })\n            .map((protocolAllocation,z) => {\n              const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n              if (!protocolPaused){\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals));\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                let foundItem = chartData[0].data.filter(item => { return item.x === x });\n                if (foundItem){\n                  foundItem = foundItem[0];\n                  const pos = chartData[0].data.indexOf(foundItem);\n                  if (!foundItem.allocations){\n                    foundItem.allocations = {};\n                  }\n                  foundItem.allocations[p.name] = y;\n                  chartData[0].data[pos] = foundItem;\n                }\n              }\n              return undefined;\n            })[0]\n          }).filter((v) => { return v !== undefined; } )\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:v => this.functionsUtil.formatMoney(v,v<1 ? 3 :0),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:true,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            if (typeof point === 'object' && typeof point.data === 'object'){\n              return (\n                <CustomTooltip\n                  point={point}\n                >\n                  <CustomTooltipRow\n                    label={point.serieId}\n                    color={point.serieColor}\n                    value={point.data.yFormatted}\n                  />\n                  {\n                    point.data.allocations && typeof point.data.allocations === 'object' &&\n                      Object.keys(point.data.allocations).map(protocolName => {\n                        const protocolInfo = globalConfigs.stats.protocols[protocolName];\n                        const protocolColor = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                        const protocolAllocation = point.data.allocations[protocolName];\n                        const protocolAllocationFormatted = this.functionsUtil.formatMoney(protocolAllocation,protocolAllocation<1 ? 3 : 0);\n                        const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                        return (\n                          <CustomTooltipRow\n                            color={protocolColor}\n                            label={protocolInfo.label}\n                            key={`${point.id}_${protocolName}`}\n                            value={`${protocolAllocationFormatted} (${protocolAllocationPerc})`}\n                          />\n                        );\n                      })\n                  }\n                </CustomTooltip>\n              );\n              /*\n              return (\n                <div\n                    key={point.id}\n                    style={{\n                      background: 'white',\n                      color: 'inherit',\n                      fontSize: 'inherit',\n                      borderRadius: '2px',\n                      boxShadow: 'rgba(0, 0, 0, 0.25) 0px 1px 2px',\n                      padding: '5px 9px'\n                    }}\n                >\n                  <div>\n                    <table style={{width:'100%',borderCollapse:'collapse'}}>\n                      <tbody>\n                        <tr>\n                          <td style={{padding:'3px 5px'}}>\n                            <span style={{display:'block', width: '12px', height: '12px', background: point.serieColor}}></span>\n                          </td>\n                          <td style={{padding:'3px 5px'}}>{point.serieId}</td>\n                          <td style={{padding:'3px 5px'}}><strong>{point.data.yFormatted}</strong></td>\n                        </tr>\n                        {\n                          point.data.allocations && typeof point.data.allocations === 'object' &&\n                            Object.keys(point.data.allocations).map(protocolName => {\n                              const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                              const protocolAllocation = this.functionsUtil.formatMoney(point.data.allocations[protocolName],0);\n                              const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                              return (\n                                <tr key={`${point.id}_${protocolName}`}>\n                                  <td style={{padding:'3px 5px'}}>\n                                    <span style={{display:'block', width: '12px', height: '12px', background: protocolColor}}></span>\n                                  </td>\n                                  <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{protocolName}</td>\n                                  <td style={{padding:'3px 5px'}}><strong>{protocolAllocation}</strong> ({protocolAllocationPerc})</td>\n                                </tr>\n                              );\n                            })\n                        }\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              );\n              */\n            }\n\n            return null;\n          }\n        };\n      break;\n      case 'ALL':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\");\n\n          let row = {\n            date\n          };\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const foundProtocol = this.props.tokenConfig.protocols.find((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() });\n            if (foundProtocol){\n              const protocolInfo = globalConfigs.stats.protocols[foundProtocol.name];\n              if (!protocolPaused){\n                let allocation = parseFloat(this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals));\n                keys[protocolInfo.label] = 1;\n                row[protocolInfo.label] = allocation;\n                row[`${protocolInfo.label}Color`] = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                // console.log(protocolInfo.label,this.functionsUtil.BNify(protocolData.allocation).toString(),this.props.tokenConfig.decimals,allocation);\n                maxChartValue = Math.max(maxChartValue,allocation);\n              } else {\n                row[protocolInfo.label] = 0;\n              }\n            }\n          });\n\n\n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n            orient: 'left',\n            tickSize: 0,\n            tickPadding: 10,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            tickValues:gridYValues,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickSize: 0,\n            tickPadding: 10,\n            orient: 'bottom-left',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            tooltip: {\n              container:{\n                padding:'0',\n                boxShadow:'none',\n                background:'transparent',\n              },\n              tableCell:{\n                padding:'0'\n              }\n            },\n            axis: {\n              ticks: {\n                text: {\n                  fontSize:this.props.isMobile ? 12 : 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize:this.props.isMobile ? 12 : 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 60 },\n          tooltip:({ id, value, color }) => {\n            const allocation = this.functionsUtil.formatMoney(value,0);\n            return (\n              <DashboardCard\n                cardProps={{\n                  py:1,\n                  px:2,\n                  width:1,\n                }}\n              >\n                <table\n                  style={{width:'100%',borderCollapse:'collapse'}}\n                >\n                  <tbody>\n                    <tr>\n                      <td style={{padding:'3px 5px'}}>\n                        <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                      </td>\n                      <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                      <td style={{padding:'3px 5px'}}><strong>{allocation} {this.props.selectedToken}</strong></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </DashboardCard>\n            )\n          }\n        }\n      break;\n      case 'ALL_PERC':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\")\n          let row = {\n            date:moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\")\n          };\n          if (tempData[date]){\n            row = tempData[date];\n          }\n\n          const totalAllocation = d.protocolsData.reduce((accumulator,protocolAllocation) => {\n            const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n            return this.functionsUtil.BNify(accumulator).plus(allocation);\n          },0);\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const protocolName = this.props.tokenConfig.protocols.filter((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() })[0].name;\n            if (!protocolPaused){\n              const allocation = this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals);\n              const allocationPerc = parseFloat(allocation.div(totalAllocation).times(100));\n              keys[protocolName] = 1;\n              row[protocolName] = allocationPerc;\n              row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n            } else if (typeof row[protocolName] !== undefined) {\n              row[protocolName] = 0;\n            } \n          });\n          \n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          data: chartData,\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 40, bottom: 40, left: 60 },\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => parseInt(v)+'%'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            orient: 'bottom',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          tooltip:({ id, value, color }) => {\n            const allocation = parseInt(value)===100 ? this.functionsUtil.formatMoney(value,0) : this.functionsUtil.formatMoney(value,2);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation}%</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'APR':\n\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                let protocolRate = this.functionsUtil.BNify(protocolAllocation.rate);\n                const protocolPaused = protocolRate.eq(0);\n                if (!protocolPaused){\n\n                  // Aave V1 wrong rate FIX\n                  if (protocolRate.lt(0) && protocolAllocation.aaveAdditionalAPR && this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR).gt(0)){\n                    protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR));\n                  }\n\n                  protocolRate = this.functionsUtil.fixTokenDecimals(protocolRate,18);\n\n                  const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                  const y = parseFloat(protocolRate);\n\n                  maxChartValue = Math.max(maxChartValue,y);\n\n                  return { x, y };\n                }\n                return undefined;\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color:'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data:apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(this.functionsUtil.fixTokenDecimals(d.idleRate,18));\n            maxChartValue = Math.max(maxChartValue,y);\n            return { x, y };\n          })\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(2)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    // const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'SCORE':\n\n        let prevValue = 0;\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(protocolAllocation.defiScore);\n\n                y = isNaN(y) || !y ? prevValue : y;\n                prevValue = y;\n                maxChartValue = Math.max(maxChartValue,y);\n\n                return { x, y };\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            let y = parseFloat(d.idleScore);\n            y = isNaN(y) || !y ? prevValue : y;\n            prevValue = y;\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // debugger;\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(1),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE_V4':\n\n        itemIndex = 0;\n        maxChartValue = 0;\n        // let prevApy = null;\n        let prevApr = null;\n        let prevData = null;\n        let avgApy = this.functionsUtil.BNify(0);\n        let startBalance = this.functionsUtil.BNify(1);\n        let currentBalance = this.functionsUtil.BNify(1);\n\n        idleChartData = [];\n        const aaveProtocolInfo = protocols.find( p => p.name === 'aavev2' );\n\n        apiResults.forEach((d,i) => {\n\n          let idleRate = this.functionsUtil.BNify(d.idleRate);\n          let y = 0;\n          let apy = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n          // Aave V1 wrong rate FIX\n          if (this.props.selectedToken === 'WETH' && moment(x).isSameOrBefore(moment('2021-05-19 12:20','YYYY-MM-DD HH:mm'))){\n            const aaveProtocolData = aaveProtocolInfo ? d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === aaveProtocolInfo.address.toLowerCase()\n            }) : null;\n            if (aaveProtocolData.aaveAdditionalAPR && this.functionsUtil.BNify(aaveProtocolData.aaveAdditionalAPR).gt(0)){\n              idleRate = idleRate.plus(this.functionsUtil.BNify(aaveProtocolData.aaveAdditionalAPR));\n            }\n          }\n\n          const apr = this.functionsUtil.fixTokenDecimals(idleRate,18).div(100);\n          // const apy = this.functionsUtil.apr2apy(apr);\n          \n          avgApy = avgApy.plus(apr.times(100));\n\n          if (prevApr){\n            const days = (d.timestamp-prevData.timestamp)/86400;\n            // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n            const earnings = currentBalance.times(prevApr.times(days).div(365));\n            currentBalance = currentBalance.plus(earnings);\n\n            const earning = currentBalance.div(startBalance).minus(1).times(100);\n            y = parseFloat(earning);\n\n            // apy = earning.times(365).div(totDays).toFixed(2);\n            apy = avgApy.div(i+1).toFixed(2);\n          }\n\n          prevData = d;\n          // prevApy = apy;\n          prevApr = apr;\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          if (apy>0){\n            idleChartData.push({ x, y, apy, blocknumber, itemPos });\n          }\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach( p => {\n\n          const protocolInfo = {...globalConfigs.stats.protocols[p.name]};\n\n          if (protocolInfo.tokensProps && protocolInfo.tokensProps[this.props.selectedToken]){\n            const tokenProps = protocolInfo.tokensProps[this.props.selectedToken];\n            Object.keys(tokenProps).forEach(p => {\n              protocolInfo[p] = tokenProps[p];\n            });\n          }\n\n          if (!protocolInfo.enabled || (protocolInfo.startTimestamp && this.functionsUtil.strToMoment(protocolInfo.startTimestamp).isAfter(Date.now()))){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          // prevApy = null;\n          prevApr = null;\n          prevData = null;\n          let baseProfit = 0;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n          avgApy = this.functionsUtil.BNify(0);\n          startBalance = this.functionsUtil.BNify(1);\n          currentBalance = this.functionsUtil.BNify(1);\n          const apiResults_filtered = apiResults.filter( d => (!protocolInfo.startTimestamp || moment(protocolInfo.startTimestamp).isSameOrBefore(moment(d.timestamp*1000))) );\n\n          apiResults_filtered.forEach( (d,i) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              let protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                if (protocolData[field]){\n                  return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolData[field]));\n                }\n                return this.functionsUtil.BNify(acc);\n              },0) : this.functionsUtil.BNify(protocolData[rateField]);\n\n              // Aave V1 wrong rate FIX\n              if (protocolRate.lt(0) && protocolData.aaveAdditionalAPR && this.functionsUtil.BNify(protocolData.aaveAdditionalAPR).gt(0)){\n                protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolData.aaveAdditionalAPR));\n              }\n\n              const protocolPaused = protocolRate.eq(0);\n              if (!protocolPaused){\n\n                let rowData = {};\n\n                let y = 0;\n                let apy = 0;\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                const apr = this.functionsUtil.fixTokenDecimals(protocolRate,18).div(100);\n\n                avgApy = avgApy.plus(apr.times(100));\n                // const apy = this.functionsUtil.apr2apy(apr);\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null) {\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => (d1.blocknumber>=firstProtocolBlock) );\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                      y = baseProfit;\n                      apy = avgApy.toFixed(2);\n                    }\n                  }\n                }\n\n                if (prevData) {\n                  const days = (d.timestamp-prevData.timestamp)/86400;\n                  // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n                  const earnings = currentBalance.times(prevApr.times(days).div(365));\n                  currentBalance = currentBalance.plus(earnings);\n\n                  const earning = currentBalance.div(startBalance).minus(1).times(100);\n                  y = parseFloat(earning)+baseProfit;\n\n                  apy = avgApy.div(i+1).toFixed(2);\n                }\n\n                prevData = d;\n                prevApr = apr;\n\n                if (firstIdleBlock === null){\n                  firstIdleBlock = parseInt(d.blocknumber);\n                }\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n                // const blocknumber = d.blocknumber;\n\n                itemIndex++;\n\n                if (apy>0){\n                  rowData = {\n                    x,\n                    y,\n                    apy,\n                    itemPos\n                  };\n\n                  itemIndex++;\n                  chartRow.data.push(rowData);\n                }\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          data: idleChartData,\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')'\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              itemWidth: this.props.isMobile ? 70 : 160,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE':\n        // let prevTokenPrice = null;\n        maxChartValue = 0;\n        let firstTokenPrice = null;\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          let days = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const tokenPrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n\n          if (!firstTokenPrice){\n            firstTokenPrice = tokenPrice;\n          } else {\n            y = parseFloat(tokenPrice.div(firstTokenPrice).minus(1).times(100));\n\n            days = (d.timestamp-apiResults[0].timestamp)/86400;\n            const earning = tokenPrice.div(firstTokenPrice).minus(1).times(100);\n            apy = earning.times(365).div(days).toFixed(2);\n\n            // console.log(firstTokenPrice.toString(),tokenPrice.toString(),earning.toString(),days,y,apy);\n          }\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        await this.functionsUtil.asyncForEach(protocols,async (p) => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n\n          if (!protocolInfo.enabled){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          let baseProfit = 0;\n          firstTokenPrice = null;\n          let lastRowData = null;\n          let lastTokenPrice = null;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n\n          await this.functionsUtil.asyncForEach(apiResults,async (d) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData && protocolData[rateField]){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolPaused = this.functionsUtil.BNify(protocolData[rateField]).eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => {\n                      return d1.blocknumber>=firstProtocolBlock;\n                    });\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n                let tokenExchangeRate = protocolData.price;\n                let tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n                // Take data from\n                if (protocolInfo && protocolInfo.data && protocolInfo.data[p.address.toLowerCase()] && protocolInfo.data[p.address.toLowerCase()][d.blocknumber]){\n                  tokenExchangeRate = this.functionsUtil.BNify(globalConfigs.stats.protocols[p.name].data[p.address.toLowerCase()][d.blocknumber]);\n                  tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                }/* else if (p.name === 'aave'){\n                  // Token holders (aDAI = 0xc025c03e10f656d3ee76685d53d236824d8ef3da , aUSDC = 0xd2c734fbd8f5d1c809185e014016dd4097e94711)\n                  let aaveTokenBalance = await this.functionsUtil.genericContractCall(p.token,'balanceOf',['0xd2c734fbd8f5d1c809185e014016dd4097e94711'],{},d.blocknumber);\n                  if (aaveTokenBalance){\n                    if (!Object.values(aave_data).length){\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(1,p.decimals);\n                      aave_data[d.blocknumber] = aaveTokenBalance.toString();\n                    } else {\n                      const firstBalance = Object.values(aave_data)[0];\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(this.functionsUtil.BNify(aaveTokenBalance).div(this.functionsUtil.BNify(firstBalance)).toFixed(p.decimals),p.decimals);\n                      aave_data[d.blocknumber] = tokenExchangeRate.toString();\n                    }\n                  }\n                }\n                */\n\n                let y = baseProfit;\n                let apy = 0;\n\n                if (!firstTokenPrice){\n                  firstTokenPrice = tokenPriceFixed;\n                } else {\n                  if (tokenPriceFixed.lt(lastTokenPrice)){\n                    firstTokenPrice = tokenPriceFixed;\n                    const lastYDiff = chartRow.data[chartRow.data.length-1].y-chartRow.data[chartRow.data.length-2].y;\n                    y = lastRowData.y+lastYDiff;\n                    baseProfit = y;\n                  } else {\n                    y += parseFloat(tokenPriceFixed.div(firstTokenPrice).minus(1).times(100));\n                  }\n\n                  const days = (d.timestamp-apiResults[0].timestamp)/86400;\n                  const earning = tokenPriceFixed.div(firstTokenPrice).minus(1).times(100);\n                  apy = earning.times(365).div(days).toFixed(2);\n                }\n\n                y = Math.max(0,y);\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                lastRowData = rowData;\n                chartRow.data.push(rowData);\n                lastTokenPrice = tokenPriceFixed;\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      chartType,\n      chartProps,\n      chartData\n    });\n  }\n\n  render() {\n    return(\n      <GenericChart\n        showLoader={true}\n        {...this.state.chartProps}\n        height={this.props.height}\n        type={this.state.chartType}\n        data={this.state.chartData}\n        width={this.state.chartWidth}\n        isMobile={this.props.isMobile}\n        parentId={this.props.parentId}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default StatsChart;","import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass Rebalance extends Component {\n\n  state = {\n    loading:true,\n    processing:{\n      rebalance:{\n        txHash:null,\n        loading:false\n      },\n    },\n    shouldRebalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = false;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.checkRebalance();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged || accountChanged){\n      this.checkRebalance();\n    }\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  checkRebalance = async () => {\n    this.setStateSafe({\n      loading:true,\n    });\n\n    const shouldRebalance = await this.functionsUtil.checkRebalance(this.props.tokenConfig);\n\n    this.setStateSafe({\n      loading:false,\n      shouldRebalance\n    });\n  }\n\n  rebalance = async (e) => {\n    e.preventDefault();\n\n    const callback = (tx,error) => {\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: 'Rebalance',\n        eventAction: this.props.selectedToken,\n      };\n\n      let txDenied = false;\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      if (tx.status === 'success'){\n        // Toast message\n        window.toastProvider.addMessage(`Rebalance completed`, {\n          secondaryMessage: `Now the pool is balanced!`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"success\",\n        });\n\n      } else if (!txDenied){\n        window.toastProvider.addMessage(`Rebalance error`, {\n          secondaryMessage: `The rebalance has failed, try again...`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"failure\",\n        });\n      }\n\n      this.setStateSafe((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          rebalance:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n\n      this.checkRebalance();\n    }\n\n    const callback_receipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setStateSafe((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            rebalance:{\n              ...prevState.processing.rebalance,\n              txHash\n            }\n          }\n        })\n      );\n    };\n\n    this.props.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'rebalance', [], null , callback, callback_receipt);\n\n    this.setStateSafe({\n      processing:{\n        rebalance:{\n          txHash:null,\n          loading:true\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Flex\n        px={3}\n        width={1}\n        minHeight={'100px'}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n      {\n        this.state.loading ? (\n          <FlexLoader\n            flexProps={{\n              flexDirection:'row'\n            }}\n            loaderProps={{\n              size:'30px'\n            }}\n            textProps={{\n              ml:2\n            }}\n            text={'Checking rebalance...'}\n          />\n        ) : (\n          this.state.processing.rebalance.loading ? (\n            <TxProgressBar {...this.props} waitText={`Rebalance estimated in`} endMessage={`Finalizing rebalance request...`} hash={this.state.processing.rebalance.txHash} />\n          ) : (\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                mt={0}\n                mb={3}\n                textAlign={'center'}\n              >\n                {this.state.shouldRebalance ? 'Rebalance the entire pool. All users will bless you.' : 'The pool is already balanced.'}\n              </Text>\n              <RoundButton\n                buttonProps={{\n                  width:'auto',\n                  disabled:!this.state.shouldRebalance\n                }}\n                handleClick={e => this.rebalance(e)}\n              >\n                Rebalance\n              </RoundButton>\n            </Flex>\n          )\n        )\n      }\n      </Flex>\n    )\n  }\n}\n\nexport default Rebalance;","import React from \"react\";\nimport {\n  Modal,\n  Button,\n  Flex,\n  Field,\n  Select\n} from \"rimble-ui\";\nimport moment from 'moment';\nimport ModalCard from './ModalCard';\nimport 'react-date-range/dist/styles.css';\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/theme/default.css';\nimport './DateRangeModal.css';\n\nclass DateRangeModal extends React.Component {\n\n  state = {\n    quickSelection:'',\n    ranges:{\n      startDate: this.props.startDate ? this.props.startDate : new Date(),\n      endDate: this.props.endDate ? this.props.endDate : new Date(),\n      key: 'selection'\n    }\n  }\n\n  handleSelect(ranges){\n    this.setState({\n      quickSelection:'',\n      ranges:ranges.selection\n    });\n  }\n\n  handleQuickSelect(e){\n    let startDate = null;\n    let endDate = moment(new Date());\n    const quickSelection = e.target.value;\n\n    switch (quickSelection){\n      case 'day':\n        startDate = endDate.clone().subtract(1,'day');\n      break;\n      case 'week':\n        startDate = endDate.clone().subtract(1,'week');\n      break;\n      case 'weeks':\n        startDate = endDate.clone().subtract(2,'week');\n      break;\n      case 'month':\n        startDate = endDate.clone().subtract(1,'month');\n      break;\n      default:\n        startDate = null;\n        endDate = null;\n      break;\n    }\n\n    if (startDate && endDate){\n      startDate = startDate._d;\n      endDate = endDate._d;\n\n      const ranges = {\n        startDate,\n        endDate,\n        key:'selection'\n      };\n\n      this.setState({\n        ranges,\n        quickSelection\n      }, () => {\n        this.closeModal();\n      });\n    }\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.startDate !== this.props.startDate || prevProps.endDate !== this.props.endDate){\n      this.setState({\n        ranges:{\n          startDate: this.props.startDate ? this.props.startDate : new Date(),\n          endDate: this.props.endDate ? this.props.endDate : new Date(),\n          key: 'selection'\n        }\n      });\n    }\n  }\n\n  closeModal(){\n    const newState = this.props.handleSelect(this.state.ranges,this.state.quickSelection);\n    const ranges = {\n      startDate:newState.startTimestampObj ? newState.startTimestampObj._d : new Date(),\n      endDate:newState.endTimestampObj ? newState.endTimestampObj._d : new Date(),\n      key: 'selection'\n    };\n    this.setState({\n      ranges\n    });\n    this.props.closeModal();\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          <ModalCard.Header title={'Select Date Range'}>\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex width={1} flexDirection={'column'} alignItems={'center'}>\n              <Field label=\"Quick Date Selection\" style={{display:'flex',width:'100%',alignItems:'stretch',justifyContent:'center'}}>\n                <Select\n                  style={{\n                    fontSize:'14px',\n                    height:'2.5em',\n                    boxShadow:'none',\n                    color:this.props.theme.colors.counter,\n                    backgroundColor:this.props.theme.colors.cardBg\n                  }}\n                  width={'100%'}\n                  required={true}\n                  onChange={this.handleQuickSelect.bind(this)}\n                  value={this.state.quickSelection}\n                  options={[\n                    { value: '', label: \"Select an option\" },\n                    { value: \"day\", label: \"Last day\" },\n                    { value: \"week\", label: \"Last week\" },\n                    { value: \"weeks\", label: \"Last 2 weeks\" },\n                    { value: \"month\", label: \"Last month\" }\n                  ]}\n                />\n              </Field>\n              <DateRange\n                ranges={[this.state.ranges]}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                className={this.props.themeMode}\n                onChange={this.handleSelect.bind(this)}\n              />\n            </Flex>\n          </ModalCard.Body>\n          <ModalCard.Footer>\n            <Flex px={[2,0]} flexDirection={['column', 'row']} width={1} justifyContent={'center'}>\n              <Button\n                my={2}\n                mx={[0, 2]}\n                borderRadius={4}\n                mainColor={'blue'}\n                onClick={ e => this.closeModal(e) }\n                size={this.props.isMobile ? 'small' : 'medium'}\n              >\n              APPLY\n              </Button>\n            </Flex>\n          </ModalCard.Footer>\n        </ModalCard>\n      </Modal>\n    );\n  }\n\n}\n\nexport default DateRangeModal;","import moment from 'moment';\nimport Title from '../Title/Title';\nimport StatsChart from './StatsChart';\nimport React, { Component } from 'react';\nimport Rebalance from '../Rebalance/Rebalance';\nimport StatsCard from '../StatsCard/StatsCard';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport GenericSelector from '../GenericSelector/GenericSelector';\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\nimport VariationNumber from '../VariationNumber/VariationNumber';\nimport AllocationChart from '../AllocationChart/AllocationChart';\nimport DateRangeModal from '../utilities/components/DateRangeModal';\nimport { Flex, Text, Heading, Box, Icon, Button, Link } from 'rimble-ui';\nimport ExecuteTransaction from '../ExecuteTransaction/ExecuteTransaction';\nimport AssetsUnderManagement from '../AssetsUnderManagement/AssetsUnderManagement';\n\nclass Stats extends Component {\n  state = {\n    aum:null,\n    apr:null,\n    days:'-',\n    delta:null,\n    earning:null,\n    minDate:null,\n    maxDate:null,\n    carouselMax:1,\n    rebalances:'-',\n    buttonGroups:[],\n    apiResults:null,\n    carouselIndex:0,\n    idleVersion:null,\n    statsVersions:{},\n    minStartTime:null,\n    endTimestamp:null,\n    showAdvanced:true,\n    govTokensPool:null,\n    unlentBalance:null,\n    quickSelection:null,\n    startTimestamp:null,\n    endTimestampObj:null,\n    shouldRebalance:null,\n    carouselOffsetLeft:0,\n    startTimestampObj:null,\n    showRefreshIdleSpeed:false,\n    apiResults_unfiltered:null,\n    dateRangeModalOpened:false\n  };\n\n  quickSelections = {\n    day:'Last day',\n    week:'Last week',\n    weeks:'Last 2 weeks',\n    month:'Last month'\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadParams();\n  }\n\n  componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  showRefreshIdleSpeed(){\n    this.setState({\n      showRefreshIdleSpeed:true\n    });\n  }\n\n  getLatestAvailableVersion(){\n    const statsVersions = globalConfigs.stats.versions;\n    let latestVersion = null;\n    Object.keys(statsVersions).forEach( version => {\n      const versionInfo = statsVersions[version];\n      if (versionInfo.enabledStrategies.includes(this.props.selectedStrategy)){\n        latestVersion = version;\n      }\n    });\n\n    return latestVersion;\n  }\n\n  getVersionInfo(version){\n    if (!version){\n      version = this.state.idleVersion;\n    }\n\n    if (!globalConfigs.stats.versions[version]){\n      return null;\n    }\n\n    const versionInfo = Object.assign({},globalConfigs.stats.versions[version]);\n\n    if (versionInfo.strategiesParams && versionInfo.strategiesParams[this.props.selectedStrategy]){\n      const versionInfoExtra = versionInfo.strategiesParams[this.props.selectedStrategy];\n      Object.keys(versionInfoExtra).forEach( param => {\n        versionInfo[param] = versionInfoExtra[param];\n      });\n    }\n\n    return versionInfo;\n  }\n\n  async loadParams() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    const newState = {};\n    const { match: { params } } = this.props;\n\n    const currentNetworkAvailableTokens = Object.keys(this.props.availableTokens);\n\n    if (!!params.customToken && currentNetworkAvailableTokens.indexOf(params.customToken.toUpperCase()) !== -1 ){\n      newState.selectedToken = params.customToken.toUpperCase();\n    } else {\n      newState.selectedToken = this.props.selectedToken.toUpperCase();\n    }\n\n    newState.tokenConfig = this.props.availableTokens[newState.selectedToken];\n    newState.minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp,'YYYY-MM-DD');\n    newState.maxEndDate = moment();\n\n    newState.endTimestampObj = moment(moment().format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    newState.latestVersion = this.getLatestAvailableVersion();\n    newState.idleVersion = this.state.idleVersion === null ? newState.latestVersion : this.state.idleVersion;\n\n    const versionInfo = this.getVersionInfo(newState.idleVersion);\n\n    // console.log('loadParams',newState.latestVersion,newState.idleVersion,versionInfo);\n\n    if (newState.idleVersion && versionInfo.endTimestamp){\n      const newEndTimestampObj = moment(moment(versionInfo.endTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.endTimestampObj.isAfter(newEndTimestampObj)){\n        newState.endTimestampObj = newEndTimestampObj;\n        newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n      }\n\n      if (!newState.maxEndDate || newState.maxEndDate.isAfter(newEndTimestampObj)){\n        newState.maxEndDate = newEndTimestampObj;\n      }\n    }\n\n    newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n\n    // Set start date\n    newState.startTimestampObj = newState.endTimestampObj.clone().subtract(1,'month');\n    newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n\n    if (newState.idleVersion && versionInfo.startTimestamp){\n      const newStartTimestampObj = moment(moment(versionInfo.startTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.startTimestampObj.isBefore(newStartTimestampObj)){\n        newState.startTimestampObj = newStartTimestampObj;\n        newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n      }\n\n      if (newState.minStartTime.isBefore(newStartTimestampObj)){\n        newState.minStartTime = newStartTimestampObj;\n      }\n    }\n\n    newState.minDate = newState.minStartTime._d;\n    newState.maxDate = newState.maxEndDate._d;\n\n    if (newState !== this.state){\n      await this.setStateSafe(newState);\n    }\n  }\n\n  setDateRange = (ranges,quickSelection=null) => {\n\n    const minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp);\n\n    let startTimestampObj = moment(ranges.startDate).isSameOrAfter(minStartTime) ? moment(ranges.startDate) : minStartTime;\n    let endTimestampObj = moment(ranges.endDate);\n\n    if (startTimestampObj.isSame(endTimestampObj)){\n      endTimestampObj.add(1,'day');\n    }\n\n    endTimestampObj = moment(endTimestampObj.format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    if (startTimestampObj.isBefore(this.state.minStartTime)){\n      startTimestampObj = this.state.minStartTime;\n    }\n\n    if (endTimestampObj.isAfter(this.state.maxEndDate)){\n      endTimestampObj = this.state.maxEndDate;\n    }\n\n    const startTimestamp = parseInt(startTimestampObj._d.getTime()/1000);\n    const endTimestamp = parseInt(endTimestampObj._d.getTime()/1000);\n\n    const newState = {\n      minStartTime,\n      endTimestamp,\n      quickSelection,\n      startTimestamp,\n      endTimestampObj,\n      startTimestampObj\n    };\n\n    this.setStateSafe(newState);\n\n    return newState;\n  }\n\n  toggleAdvancedCharts = (e) => {\n    e.preventDefault();\n    this.setStateSafe({\n      showAdvanced:!this.state.showAdvanced\n    });\n  }\n\n  setDateRangeModal = (dateRangeModalOpened) => {\n    if (dateRangeModalOpened !== this.state.dateRangeModalOpened){\n      this.setStateSafe({\n        dateRangeModalOpened\n      });\n    }\n  }\n\n  async componentDidMount() {\n\n    if (!this.props.web3){\n      this.props.initWeb3();\n      return false;\n    }\n\n    /*\n    const style = document.createElement('style');\n    style.id = 'crisp-custom-style';\n    style.type = 'text/css';\n    style.innerHTML = `\n    .crisp-client{\n      display:none !important;\n    }`;\n    document.body.appendChild(style);\n    */\n\n    this.loadUtils();\n    await this.loadParams();\n    this.loadApiData();\n    this.loadCarousel();\n  }\n\n  loadCarousel(){\n    const carouselMax = this.props.isMobile ? 3 : 2;\n    this.setStateSafe({\n      carouselMax\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const strategyChanged = prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    const dateChanged = prevState.startTimestamp !== this.state.startTimestamp || prevState.endTimestamp !== this.state.endTimestamp;\n    const versionChanged = prevState.idleVersion !== this.state.idleVersion;\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n\n    if (mobileChanged){\n      this.loadCarousel();\n    }\n\n    if (contractsInitialized || tokenChanged || strategyChanged || versionChanged){\n      // console.log('componentDidUpdate',this.props.selectedStrategy,this.props.selectedToken);\n      await this.componentDidMount();\n    } else if (dateChanged){\n      this.loadApiData();\n    }\n  }\n\n  filterTokenData = (apiResults) => {\n    return apiResults.filter((r,i) => {\n      return (!this.state.startTimestamp || r.timestamp >= this.state.startTimestamp) && (!this.state.endTimestamp || r.timestamp <= this.state.endTimestamp);\n    });\n  }\n\n  setIdleVersion = idleVersion => {\n    this.setStateSafe({\n      idleVersion\n    });\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    // Get COMP APR\n    // const compAPR = await this.functionsUtil.getCompAPR(this.props.tokenConfig);\n    // console.log('compAPR',compAPR.toString());\n\n    const startTimestamp = this.state.minDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.minDate).format('DD/MM/YYYY 00:00:00'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n    const endTimestamp = this.state.maxDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.maxDate).format('DD/MM/YYYY 23:59:59'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n\n    const isRisk = ['v3','v4'].includes(this.state.idleVersion) && this.props.selectedStrategy === 'risk';\n    let apiResults_unfiltered = await this.functionsUtil.getTokenApiData(this.props.tokenConfig.address,isRisk,startTimestamp,endTimestamp,true,7200);\n\n    const apiResults = this.filterTokenData(apiResults_unfiltered);\n\n    // console.log('loadApiData',startTimestamp,endTimestamp,new Date(startTimestamp*1000),new Date(endTimestamp*1000),apiResults,apiResults_unfiltered);\n\n    if (!apiResults || !apiResults_unfiltered || !apiResults.length || !apiResults_unfiltered.length){\n      return false;\n    }\n\n    const firstResult = apiResults[0];\n    const lastResult = Object.values(apiResults).pop();\n\n    window.moment = moment;\n\n    let days = (lastResult.timestamp-firstResult.timestamp)/86400;\n    if (days === 0){\n      days = 1;\n    }\n\n    let apr = null;\n    let delta = 'N/A';\n\n    const idleTokens = this.functionsUtil.fixTokenDecimals(lastResult.idleSupply,18);\n    const firstIdlePrice = this.functionsUtil.fixTokenDecimals(firstResult.idlePrice,this.props.tokenConfig.decimals);\n    const lastIdlePrice = this.functionsUtil.fixTokenDecimals(lastResult.idlePrice,this.props.tokenConfig.decimals);\n\n    // Calculate AUM\n    let aum = idleTokens.times(lastIdlePrice);\n\n    // Convert Token balance\n    aum = await this.functionsUtil.convertTokenBalance(aum,this.props.selectedToken,this.props.tokenConfig,isRisk);\n\n    const compoundInfo = this.props.tokenConfig.protocols.filter((p) => { return p.name === 'compound' })[0];\n    const firstCompoundData = compoundInfo ? firstResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n    const lastCompoundData = compoundInfo ? lastResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n\n    if (this.state.idleVersion === 'v4') {\n\n      apr = apiResults.reduce( (sum,r) => {\n        const idleRate = this.functionsUtil.fixTokenDecimals(r.idleRate,18);\n        return this.functionsUtil.BNify(sum).plus(idleRate);\n      },0);\n\n      // Calculate average\n      apr = apr.div(apiResults.length);\n\n      if (compoundInfo){\n        const compoundWithCOMPInfo = globalConfigs.stats.protocols.compoundWithCOMP;\n        const rateField = compoundWithCOMPInfo.rateField ? compoundWithCOMPInfo.rateField : 'rate';\n\n        let compoundAvgApr = apiResults.reduce( (sum,r) => {\n\n          const compoundData = r.protocolsData.find((pData,x) => {\n            return pData.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase()\n          });\n\n          let compoundRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n            if (compoundData && compoundData[field]){\n              return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(compoundData[field]));\n            }\n            return this.functionsUtil.BNify(acc);\n          },0) : this.functionsUtil.BNify(compoundData[rateField]);\n\n          compoundRate = this.functionsUtil.fixTokenDecimals(compoundRate,18);\n\n          return this.functionsUtil.BNify(sum).plus(compoundRate);\n        },0);\n\n        // Calculate average\n        compoundAvgApr = compoundAvgApr.div(apiResults.length);\n\n        // compoundAvgApr = this.functionsUtil.apr2apy(compoundAvgApr.div(100)).times(100);\n        // apr = this.functionsUtil.apr2apy(apr.div(100)).times(100);\n\n        delta = apr.minus(compoundAvgApr);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n\n      apr = apr.toFixed(2);\n\n    } else {\n      const earning = lastIdlePrice.div(firstIdlePrice).minus(1).times(100);\n      apr = earning.times(365).div(days).toFixed(2);\n\n      if (firstCompoundData && lastCompoundData){\n        const firstCompoundPrice = this.functionsUtil.fixTokenDecimals(firstCompoundData.price,this.props.tokenConfig.decimals);\n        const lastCompoundPrice = this.functionsUtil.fixTokenDecimals(lastCompoundData.price,this.props.tokenConfig.decimals);\n        const compoundApr = lastCompoundPrice.div(firstCompoundPrice).minus(1).times(100);\n        delta = earning.minus(compoundApr).times(365).div(days);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n    }\n\n    // Count rebalances\n    let rebalances = 0;\n    apiResults.forEach((row,index) => {\n      if (index){\n        const prevRow = apiResults[index-1];\n\n        const totalAllocation = row.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        const prevTotalAllocation = prevRow.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        let hasRebalanced = false;\n        row.protocolsData.forEach( p => {\n          if (hasRebalanced){\n            return;\n          }\n          const prevP = prevRow.protocolsData.find( prevP => (prevP.protocolAddr.toLowerCase() === p.protocolAddr.toLowerCase()) );\n          const allocation = this.functionsUtil.fixTokenDecimals(p.allocation,this.props.tokenConfig.decimals);\n          const prevAllocation = prevP ? this.functionsUtil.fixTokenDecimals(prevP.allocation,this.props.tokenConfig.decimals) : this.functionsUtil.BNify(0);\n          const allocationPerc = parseInt(parseFloat(allocation.div(totalAllocation).times(100)));\n          const prevAllocationPerc = parseInt(parseFloat(prevAllocation.div(prevTotalAllocation).times(100)));\n          if (allocationPerc!==prevAllocationPerc){\n            rebalances++;\n            hasRebalanced = true;\n          }\n        });\n      }\n    });\n\n    // Add gov tokens balance to AUM\n    const availableTokens = {};\n    availableTokens[this.props.selectedToken] = this.props.tokenConfig;\n    const govTokensPool = await this.functionsUtil.getGovTokenPool(null,availableTokens,'DAI');\n    if (govTokensPool){\n      aum = aum.plus(govTokensPool);\n    }\n\n    // Format AUM\n    /*\n    aum = this.functionsUtil.formatMoney(parseFloat(aum));\n\n    const conversionRateField = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']);\n    if (conversionRateField){\n      aum += ' $';\n    }\n    */\n\n    let unlentBalance = await this.functionsUtil.getUnlentBalance(this.props.tokenConfig);\n    if (unlentBalance){\n      unlentBalance = this.functionsUtil.formatMoney(parseFloat(unlentBalance));\n    }\n\n    this.setStateSafe({\n      aum,\n      apr,\n      days,\n      delta,\n      apiResults,\n      rebalances,\n      govTokensPool,\n      unlentBalance,\n      apiResults_unfiltered\n    });\n  }\n\n  selectToken = async (strategy,token) => {\n    await this.props.setStrategyToken(strategy,token);\n    this.props.changeToken(token);\n  }\n\n  handleCarousel = action => {\n    let carouselIndex = this.state.carouselIndex;\n    if (action==='next' && carouselIndex<this.state.carouselMax){\n      carouselIndex++;\n    } else if (action==='back' && carouselIndex>0){\n      carouselIndex--;\n    }\n\n    const $element = window.jQuery(`#carousel-cursor > div:eq(${carouselIndex})`);\n    const carouselOffsetLeft = -parseFloat($element.position().left)+'px';\n\n    this.setStateSafe({\n      carouselIndex,\n      carouselOffsetLeft\n    });\n  }\n\n  render() {\n\n    const valueProps = {\n      lineHeight:1,\n      fontSize:[4,5],\n      fontWeight:[3,4],\n      color:'statValue'\n    };\n\n    const unitProps = {\n      ml:2,\n      lineHeight:1,\n      fontWeight:[2,3],\n      color:'statValue',\n      fontSize:[3,'23px'],\n    };\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const apyLong = this.functionsUtil.getGlobalConfig(['messages','apyLong']);\n\n    if (!this.props.availableStrategies){\n      return (\n        <FlexLoader\n          textProps={{\n            textSize:4,\n            fontWeight:2\n          }}\n          loaderProps={{\n            mb:3,\n            size:'40px'\n          }}\n          flexProps={{\n            minHeight:'50vh',\n            flexDirection:'column'\n          }}\n          text={'Loading assets...'}\n        />\n      );\n    }\n\n    const statsTokens = this.functionsUtil.getGlobalConfig(['stats','tokens']);\n\n    if (!this.props.selectedToken){\n      const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n      const enabledTokens = [];\n      const statsProtocols = this.functionsUtil.getGlobalConfig(['stats','protocols']);\n\n      Object.keys(statsTokens).forEach(token => {\n        const tokenInfo = statsTokens[token];\n        if (tokenInfo.enabled){\n          enabledTokens.push(token);\n        }\n      });\n      return (\n        <Flex\n          mb={3}\n          width={1}\n          flexDirection={'column'}\n        >\n          <AssetsUnderManagement\n            {...this.props}\n            loaderAlign={'flex-end'}\n          />\n          {\n            Object.keys(strategies).map(strategy => {\n              const strategyInfo = strategies[strategy];\n              const availableTokens = this.props.availableStrategies[strategy];\n\n              if (!availableTokens){\n                return false;\n              }\n              \n              // Get available protocols name\n              const availableProtocolsKeys = [];\n              Object.keys(availableTokens).forEach( token => {\n                availableTokens[token].protocols.forEach( protocolInfo => {\n                  if (availableProtocolsKeys.indexOf(protocolInfo.name)<0){\n                    availableProtocolsKeys.push(protocolInfo.name);\n                  }\n                });\n              });\n\n              const availableProtocols = availableProtocolsKeys.map( protocolName => {\n                return statsProtocols[protocolName];\n              },{});\n\n              return (\n                <Box\n                  mb={2}\n                  width={1}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                  key={`strategy-container-${strategy}`}\n                >\n                  <Title\n                    mt={3}\n                    mb={[3,4]}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'baseline'}\n                      justifyContent={'center'}\n                    >\n                      {strategyInfo.title}\n                      {\n                        strategyInfo.titlePostfix &&\n                          <Text\n                            ml={2}\n                            fontWeight={3}\n                            fontSize={[2,4]}\n                            color={'dark-gray'}\n                          >\n                            {strategyInfo.titlePostfix}\n                          </Text>\n                      }\n                    </Flex>\n                  </Title>\n                  <AssetsList\n                    enabledTokens={enabledTokens}\n                    handleClick={(props) => this.selectToken(strategy,props.token)}\n                    cols={[\n                      {\n                        title:'CURRENCY',\n                        props:{\n                          width:[0.26,0.15]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:2,\n                              height:['1.4em','2.3em']\n                            }\n                          },\n                          {\n                            name:'tokenName'\n                          }\n                        ]\n                      },\n                      {\n                        title:'POOL',\n                        props:{\n                          width:[0.22,0.14],\n                        },\n                        fields:[\n                          {\n                            name:'allocationChart',\n                            mobile:false,\n                            parentProps:{\n                              width:0.3\n                            },\n                            style:{\n                              overflow:'visible'\n                            },\n                            showLoader:false,\n                          },\n                          {\n                            name:'pool',\n                            props:{\n                              ml:1\n                            },\n                            parentProps:{\n                              width:[1,0.7]\n                            }\n                          }\n                        ]\n                      },\n                      {\n                        title:'APY',\n                        desc:apyLong,\n                        props:{\n                          width: [0.29,0.14],\n                        },\n                        parentProps:{\n                          flexDirection:'column',\n                          alignItems:'flex-start',\n                        },\n                        fields:[\n                          {\n                            name:'apy',\n                            showTooltip:true\n                          },\n                          {\n                            name:'idleDistribution',\n                            showLoader:false,\n                            props:{\n                              decimals:this.props.isMobile ? 1 : 2,\n                              fontSize:this.props.isMobile ? '9px' : 0\n                            }\n                          },\n                        ]\n                      },\n                      {\n                        title:'RISK SCORE',\n                        desc:this.functionsUtil.getGlobalConfig(['messages','riskScore']),\n                        mobile:false,\n                        props:{\n                          width:[0.27,0.16],\n                        },\n                        fields:[\n                          {\n                            name:'score'\n                          }\n                        ]\n                      },\n                      {\n                        title:'APR LAST WEEK',\n                        mobile:false,\n                        props:{\n                          width: 0.25,\n                        },\n                        parentProps:{\n                          width:1,\n                          pr:[2,4]\n                        },\n                        fields:[\n                          {\n                            name:'aprChart',\n                            style:{\n                              overflow:'visible',\n                            },\n                          }\n                        ]\n                      },\n                      {\n                        title:'',\n                        props:{\n                          width:[0.23,0.16],\n                        },\n                        parentProps:{\n                          width:1\n                        },\n                        fields:[\n                          {\n                            name:'button',\n                            label:this.props.isMobile ? 'View' : 'View stats',\n                            props:{\n                              width:1,\n                              fontSize:3,\n                              fontWeight:3,\n                              height:'45px',\n                              borderRadius:4,\n                              boxShadow:null,\n                              mainColor:'redeem',\n                              size: this.props.isMobile ? 'small' : 'medium',\n                              handleClick:(props) => this.selectToken(strategy,props.token)\n                            }\n                          }\n                        ]\n                      }\n                    ]}\n                    {...this.props}\n                    selectedStrategy={strategy}\n                    availableTokens={availableTokens}\n                  />\n                  {\n                    !this.props.isMobile &&\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'flex-end'}\n                      >\n                        {\n                          availableProtocols.filter( p => p.legend ).map( (p,index) => (\n                            <Flex\n                              mr={3}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              key={`legend_${index}`}\n                            >\n                              <Box\n                                mr={1}\n                                width={'10px'}\n                                height={'10px'}\n                                borderRadius={'50%'}\n                                backgroundColor={`rgb(${p.color.rgb.join(',')})`}\n                              >\n                              </Box>\n                              <Text.span\n                                fontSize={1}\n                                color={'cellText'}\n                              >\n                                {p.label}\n                              </Text.span>\n                            </Flex>\n                          ))\n                        }\n                      </Flex>\n                  }\n                </Box>\n              );\n            })\n          }\n          {\n            idleTokenEnabled && !this.state.showRefreshIdleSpeed ? (\n              <Flex\n                mb={4}\n                width={1}\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <Link\n                  hoverColor={'primary'}\n                  onClick={this.showRefreshIdleSpeed.bind(this)}\n                >\n                  Refresh Idle Speed\n                </Link>\n              </Flex>\n            ) : idleTokenEnabled && this.state.showRefreshIdleSpeed &&\n              <DashboardCard\n                cardProps={{\n                  p:2,\n                  mb:4,\n                  width:1,\n                  mt:[2,3],\n                }}\n                isActive={true}\n                isInteractive={false}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <Text\n                    fontWeight={500}\n                    color={'flashColor'}\n                    textAlign={'center'}\n                    fontSize={[1,'15px']}\n                  >\n                    By executing this transaction you can adjust the IDLE distribution speed among the pools.\n                  </Text>\n                  <ExecuteTransaction\n                    action={'Refresh'}\n                    Component={Button}\n                    parentProps={{\n                      mt:1\n                    }}\n                    componentProps={{\n                      size:'small',\n                      mainColor:'blue',\n                      value:'REFRESH IDLE SPEED'\n                    }}\n                    params={[]}\n                    contractName={'IdleController'}\n                    methodName={'refreshIdleSpeeds'}\n                    {...this.props}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'center'}\n                      justifyContent={'center'}\n                    >\n                      <Icon\n                        mr={1}\n                        name={'Done'}\n                        size={'1.4em'}\n                        color={this.props.theme.colors.transactions.status.completed}\n                      />\n                      <Text\n                        fontWeight={500}\n                        fontSize={'15px'}\n                        color={'copyColor'}\n                        textAlign={'center'}\n                      >\n                        Idle Speed Refreshed\n                      </Text>\n                    </Flex>\n                  </ExecuteTransaction>\n                </Flex>\n              </DashboardCard>\n          }\n        </Flex>\n      );\n    } else {\n\n      const tokenConfig = statsTokens[this.props.selectedToken];\n\n      const versionsOptions = Object.keys(globalConfigs.stats.versions).filter( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return versionInfo.enabledTokens.includes(this.props.selectedToken) && versionInfo.enabledStrategies.includes(this.props.selectedStrategy);\n      }).map( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return {\n          value:version,\n          label:versionInfo.label\n        }\n      });\n\n      const versionInfo = this.getVersionInfo(this.state.idleVersion);\n\n      let performanceTooltip = null;\n      if (this.state.idleVersion && versionInfo){\n        const showPerformanceTooltip = this.functionsUtil.getGlobalConfig(['stats','versions',this.state.idleVersion,'showPerformanceTooltip']);\n        performanceTooltip = showPerformanceTooltip ? this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'performanceTooltip']) : null;\n      }\n\n      const versionDefaultValue = versionsOptions.find( v => (v.value === this.state.idleVersion) );\n\n      return (\n        <Flex\n          p={0}\n          width={1}\n          flexDirection={'column'}\n        >\n          {\n          /*\n          }\n          <Flex position={['absolute','relative']} left={0} px={[3,0]} zIndex={10} width={1} flexDirection={'row'} mb={[0,3]}>\n            <Flex alignItems={'center'} width={[2/3,1/2]}>\n              <RouterLink to=\"/\">\n                <Image src=\"images/logo-gradient.svg\"\n                  height={['35px','48px']}\n                  position={'relative'} />\n              </RouterLink>\n              <Heading.h3 color={'dark-gray'} textAlign={'left'} fontWeight={3} lineHeight={'initial'} fontSize={[4,5]} ml={[1,2]}>\n                <Text.span fontSize={'80%'}>|</Text.span> Stats\n              </Heading.h3>\n            </Flex>\n            <Flex flexDirection={'row'} width={[1/3,1/2]} justifyContent={'flex-end'} alignItems={'center'}>\n              {\n                this.state.buttonGroups && \n                  this.props.isMobile ? (\n                    <ButtonGroup\n                      isMobile={this.props.isMobile}\n                      components={ this.state.buttonGroups.reduce((components,array) => components.concat(array),[]) }\n                      theme={'light'}\n                    />\n                  ) :\n                  this.state.buttonGroups.map((buttonGroup,i) => (\n                    <ButtonGroup\n                      key={`buttonGroup_${i}`}\n                      isMobile={this.props.isMobile}\n                      components={buttonGroup}\n                      theme={'light'}\n                    />\n                  ))\n              }\n            </Flex>\n          </Flex>\n          */\n          }\n          <Box\n            mb={[3,4]}\n          >\n            <Flex\n              flexDirection={['column','row']}\n            >\n              <Flex\n                width={[1,0.4]}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  text={'ASSETS OVERVIEW'}\n                  isMobile={this.props.isMobile}\n                  handleClick={ e => this.props.goToSection('stats') }\n                  path={[this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])]}\n                />\n              </Flex>\n              <Flex\n                mt={[3,0]}\n                width={[1,0.6]}\n                flexDirection={['column','row']}\n                justifyContent={['center','space-between']}\n              >\n                <Flex\n                  width={[1,0.26]}\n                  flexDirection={'column'}\n                >\n                  <GenericSelector\n                    innerProps={{\n                      p:1,\n                      height:['100%','46px'],\n                    }}\n                    name={'idle-version'}\n                    options={versionsOptions}\n                    defaultValue={versionDefaultValue}\n                    onChange={ v => this.setIdleVersion(v) }\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.3]}\n                  flexDirection={'column'}\n                >\n                  <AssetSelector\n                    innerProps={{\n                      p:1\n                    }}\n                    {...this.props}\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.39]}\n                  flexDirection={'column'}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:1,\n                      display:'flex',\n                      alignItems:'center',\n                      height:['46px','100%'],\n                      justifyContent:'center'\n                    }}\n                    isInteractive={true}\n                    handleClick={ e => this.setDateRangeModal(true) }\n                  >\n                    <Text\n                      fontWeight={3}\n                      color={'copyColor'}\n                    >\n                    {\n                      this.state.quickSelection\n                      ?\n                        this.quickSelections[this.state.quickSelection]\n                      : this.state.startTimestampObj && this.state.endTimestampObj &&\n                        `${this.state.startTimestampObj.format('DD/MM/YY')} - ${this.state.endTimestampObj.format('DD/MM/YY')}`\n                    }\n                    </Text>\n                  </DashboardCard>\n                </Flex>\n              </Flex>\n            </Flex>\n          </Box>\n          {\n            !tokenConfig.enabled ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'DoNotDisturb'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} are not available!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.state.idleVersion && this.functionsUtil.strToMoment(versionInfo.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Idle Stats {this.state.idleVersion} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.functionsUtil.strToMoment(tokenConfig.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : (\n              <Box\n                width={1}\n              >\n                <Box\n                  mt={[3,0]}\n                  mb={[3,4]}\n                >\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    justifyContent={'center'}\n                    flexDirection={['column','row']}\n                  >\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Asset Under Management'}\n                        label={ this.state.unlentBalance ? `Unlent funds: ${this.state.unlentBalance} ${this.props.selectedToken}` : this.props.selectedToken }\n                        labelTooltip={ this.state.unlentBalance ? this.functionsUtil.getGlobalConfig(['messages','cheapRedeem']) : null}\n                      >\n                        <SmartNumber\n                          precision={2}\n                          type={'money'}\n                          {...valueProps}\n                          unitProps={unitProps}\n                          number={this.state.aum}\n                          flexProps={{\n                            alignItems:'baseline',\n                            justifyContent:'flex-start'\n                          }}\n                          unit={this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']) ? '$' : null}\n                        />\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Avg APY'}\n                        label={'Annualized'}\n                      >\n                        <Flex\n                          width={1}\n                          alignItems={'center'}\n                          flexDirection={['column','row']}\n                        >\n                          <VariationNumber\n                            direction={'up'}\n                            iconPos={'right'}\n                            iconSize={'1.8em'}\n                            justifyContent={'flex-start'}\n                            width={1}\n                            >\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                              fontSize={[4,5]}\n                            >\n                              {this.state.apr}\n                              <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                            </Text>\n                          </VariationNumber>\n                        </Flex>\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Overperformance on Compound'}\n                        label={'Annualized'}\n                      >\n                        {\n                          this.state.delta && !isNaN(this.state.delta) ? (\n                            <VariationNumber\n                              direction={'up'}\n                              iconPos={'right'}\n                              iconSize={'1.8em'}\n                              justifyContent={'flex-start'}\n                              >\n                              <Text\n                                lineHeight={1}\n                                fontSize={[4,5]}\n                                fontWeight={[3,4]}\n                                color={'statValue'}\n                              >\n                                {this.state.delta}\n                                <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                              </Text>\n                            </VariationNumber>\n                          ) : (\n                            <Text\n                              lineHeight={1}\n                              fontSize={[4,5]}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                            >\n                              {this.state.delta}\n                            </Text>\n                          )\n                        }\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        label={' '}\n                        title={'Rebalances'}\n                        value={this.state.rebalances.toString()}\n                      />\n                    </Flex>\n                    {\n                    /*\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Current APR</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.currApr}\n                            <Text.span color={'copyColor'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Days Live</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.days}\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    */\n                    }\n                  </Flex>\n                </Box>\n\n                <DashboardCard\n                  title={'Historical Performance'}\n                  description={performanceTooltip}\n                  cardProps={{\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex id='chart-PRICE' width={1} mb={3}>\n                    <StatsChart\n                      height={ 350 }\n                      {...this.state}\n                      parentId={'chart-PRICE'}\n                      theme={this.props.theme}\n                      isMobile={this.props.isMobile}\n                      contracts={this.props.contracts}\n                      themeMode={this.props.themeMode}\n                      apiResults={this.state.apiResults}\n                      idleVersion={this.state.idleVersion}\n                      selectedToken={this.props.selectedToken}\n                      apiResults_unfiltered={this.state.apiResults_unfiltered}\n                      chartMode={this.state.idleVersion === this.state.latestVersion ? 'PRICE_V4' : 'PRICE'}\n                    />\n                  </Flex>\n                </DashboardCard>\n\n                <DashboardCard\n                  cardProps={{\n                    pb:3,\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex\n                    flexDirection={['column','row']}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      this.state.idleVersion === this.state.latestVersion && \n                      <Flex\n                        pt={2}\n                        width={[1,1/3]}\n                        id={'allocation-chart'}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'flex-start'}\n                      >\n                        <AllocationChart\n                          height={310}\n                          {...this.props}\n                          parentId={'allocation-chart'}\n                        />\n                        <Rebalance\n                          {...this.props}\n                        />\n                      </Flex>\n                    }\n                    <Flex\n                      mb={[0,3]}\n                      id={'chart-ALL'}\n                      pl={[0,this.state.idleVersion === this.state.latestVersion ? 0 : 3]}\n                      width={[1, this.state.idleVersion === this.state.latestVersion ? 2/3 : 1]}\n                    >\n                      <Flex alignItems={'flex-start'} justifyContent={'flex-start'} flexDirection={'column'} width={1}>\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={[3,4]}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          Allocations over time\n                        </Heading.h4>\n                        <StatsChart\n                          height={350}\n                          {...this.state}\n                          chartMode={'ALL'}\n                          parentId={'chart-ALL'}\n                          theme={this.props.theme}\n                          isMobile={this.props.isMobile}\n                          themeMode={this.props.themeMode}\n                          contracts={this.props.contracts}\n                          apiResults={this.state.apiResults}\n                          idleVersion={this.state.idleVersion}\n                          apiResults_unfiltered={this.state.apiResults_unfiltered}\n                        />\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n\n                <Flex\n                  position={'relative'}\n                >\n                  <Flex\n                    width={1}\n                    id={'carousel-container'}\n                    justifyContent={'flex-end'}\n                  >\n                    <RoundIconButton\n                      buttonProps={{\n                        mr:3\n                      }}\n                      iconName={'ArrowBack'}\n                      disabled={this.state.carouselIndex === 0}\n                      handleClick={ e => this.handleCarousel('back') }\n                    />\n                    <RoundIconButton\n                      iconName={'ArrowForward'}\n                      handleClick={ e => this.handleCarousel('next') }\n                      disabled={this.state.carouselIndex === this.state.carouselMax}\n                    />\n                  </Flex>\n                  <Flex\n                    mt={5}\n                    height={'400px'}\n                    position={'absolute'}\n                    id={'carousel-cursor'}\n                    width={['444%','200%']}\n                    justifyContent={'flex-start'}\n                    left={this.state.carouselOffsetLeft}\n                    style={{\n                      transition:'left 0.3s ease-in-out'\n                    }}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        id='chart-AUM'\n                      >\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            ml={3}\n                            mt={3}\n                            mb={2}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Asset Under Management\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'AUM'}\n                            parentId={'chart-AUM'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-APR' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            APRs\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'APR'}\n                            parentId={'chart-APR'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                      title={'Risk Score'}\n                      description={'Idle Risk Score is a weighted average of the underlying protocols risks assessed by DeFi Score'}\n                      titleParentProps={{\n                        ml:16,\n                        mt:16\n                      }}\n                    >\n                      <Flex id='chart-SCORE' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'SCORE'}\n                            parentId={'chart-SCORE'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-VOL' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Volume\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'VOL'}\n                            parentId={'chart-VOL'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                </Flex>\n              </Box>\n            )\n          }\n          <DateRangeModal\n            {...this.props}\n            minDate={this.state.minDate}\n            maxDate={this.state.maxDate}\n            handleSelect={this.setDateRange}\n            isOpen={this.state.dateRangeModalOpened}\n            closeModal={e => this.setDateRangeModal(false)}\n            startDate={this.state.startTimestampObj ? this.state.startTimestampObj._d : null}\n            endDate={this.state.endTimestampObj ? this.state.endTimestampObj._d : null}\n          />\n        </Flex>\n      );\n    }\n  }\n}\n\nexport default Stats;","import Title from '../Title/Title';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Icon, Text, Box, Image } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass Utils extends Component {\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    const viewOnly = this.props.connectorName === 'custom';\n    const showBreadCrumb = typeof this.props.showBreadCrumb !== 'undefined' ? this.props.showBreadCrumb : true;\n    const SubComponent = this.props.selectedSubsection && this.props.selectedSubsection.subComponent ? this.props.selectedSubsection.subComponent : null;\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.props.selectedSubsection ? (\n            <Box\n              width={1}\n            >\n              {\n                showBreadCrumb && (\n                  <Flex\n                    width={1}\n                  >\n                    <Breadcrumb\n                      {...this.props}\n                      showPathMobile={true}\n                      isMobile={this.props.isMobile}\n                      path={[this.props.selectedSubsection.label]}\n                      text={this.props.selectedSection.label.toUpperCase()}\n                      handleClick={ e => this.props.goToSection(this.props.selectedSection.route) }\n                    />\n                  </Flex>\n                )\n              }\n              <Flex\n                my={[2,3]}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Title\n                  mb={2}\n                >\n                  {this.props.selectedSubsection.label}\n                </Title>\n                <Text\n                  textAlign={'center'}\n                  dangerouslySetInnerHTML={{\n                    __html:this.props.selectedSubsection.desc\n                  }}\n                >\n                </Text>\n              </Flex>\n              <SubComponent\n                {...this.props}\n                {...this.props.selectedSubsection.directProps}\n                toolProps={this.props.selectedSubsection.props}\n              />\n            </Box>\n          ) : (\n            <Flex\n              my={[2,3]}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Title\n                mb={3}\n              >\n                Tools\n              </Title>\n              <Flex\n                width={1}\n                style={{\n                  flexWrap:'wrap'\n                }}\n                justifyContent={viewOnly ? 'center' : 'flex-start'}\n              >\n              {\n                viewOnly ? (\n                  <IconBox\n                    cardProps={{\n                      maxWidth:[1,'35em']\n                    }}\n                    icon={'Visibility'}\n                    text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n                  />\n                ) : this.props.selectedSection.submenu.map( (tool,toolIndex) => (\n                  <DashboardCard\n                    isInteractive={true}\n                    key={`tool_${toolIndex}`}\n                    cardProps={{\n                      p:[3,4],\n                      mb:[3,3],\n                      mr:[0,'2%'],\n                      style:{\n                        flex: this.props.isMobile ? '1 1 100%' : '0 0 31%'\n                      },\n                      alignItems:'center',\n                      flexDirection:'column',\n                      justifyContent:'center'\n                    }}\n                    handleClick={ e => this.props.goToSection(this.props.selectedSection.route+'/'+tool.route) }\n                  >\n                    <Text\n                      fontSize={[3,4]}\n                      textAlign={'center'}\n                    >\n                      {tool.label}\n                    </Text>\n                    <Flex\n                      justifyContent={'center'}\n                    >\n                      {\n                        tool.image ? (\n                          <Image\n                            my={[0,2]}\n                            height={'2.2em'}\n                            src={tool.image}\n                          />\n                        ) : tool.icon && (\n                          <Icon\n                            my={[0,2]}\n                            size={'3em'}\n                            name={tool.icon}\n                          />\n                        )\n                      }\n                    </Flex>\n                    <Text\n                      fontSize={[2,2]}\n                      textAlign={'center'}\n                      dangerouslySetInnerHTML={{\n                        __html:tool.desc\n                      }}\n                    >\n                    </Text>\n                  </DashboardCard>\n                ) )\n              }\n              </Flex>\n            </Flex>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Utils;\n","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Heading, Text, Tooltip, Icon } from \"rimble-ui\";\nimport PortfolioEquity from '../PortfolioEquity/PortfolioEquity';\n\nclass FundsOverview extends Component {\n\n  state = {\n    // govTokensAprs:null,\n    aggregatedValues:[],\n    govTokensTotalApr:null,\n    govTokensUserBalance:null,\n    govTokensDistribution:null,\n    govTokensTotalBalance:null,\n    govTokensTotalAprTooltip:null,\n    idleTokenUserDistribution:null,\n    govTokensDistributionTooltip:null,\n    govTokensTotalBalanceTooltip:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  idleGovToken = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const isRisk = this.props.selectedStrategy === 'risk';\n\n    const [\n      // govTokensAprs,\n      idleTokenUserDistribution,\n      govTokensUserBalance,\n      apy,\n      depositTimestamp,\n      days\n    ] = await Promise.all([\n      // this.functionsUtil.getGovTokensAprs(this.props.selectedToken,this.props.tokenConfig),\n      this.idleGovToken.getUserDistribution(this.props.account,govTokenAvailableTokens,true),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null),\n      this.functionsUtil.loadAssetField('apy',this.props.selectedToken,this.props.tokenConfig,this.props.account,false),\n      this.functionsUtil.loadAssetField('depositTimestamp',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    let avgAPY = await this.functionsUtil.getAvgAPYStats(this.props.tokenConfig.address,isRisk,depositTimestamp);\n\n    if (!avgAPY || this.functionsUtil.BNify(avgAPY).lte(0)){\n      avgAPY = apy;\n    }\n\n    const govTokensTotalBalance = govTokensUserBalance ? Object.values(govTokensUserBalance).reduce( (totBalance,govTokenBalance) => {\n      return totBalance.plus(this.functionsUtil.BNify(govTokenBalance));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalBalanceTooltip = govTokensUserBalance ? Object.keys(govTokensUserBalance).map( govToken => {\n      const balance = govTokensUserBalance[govToken];\n      if (balance.gt(0)){\n        return `+${balance.toFixed(2)} ${govToken}`;\n      } else {\n        return null;\n      }\n    }).filter(v => (v !== null)) : null;\n\n    // console.log(govTokensTotalBalance,govTokensUserBalance,govTokensTotalBalanceTooltip);\n\n    // const govTokensTotalApr = govTokensAprs ? Object.values(govTokensAprs).reduce( (totApr,govTokenApr) => {\n    //   return totApr.plus(this.functionsUtil.BNify(govTokenApr));\n    // },this.functionsUtil.BNify(0)) : null;\n\n    // const govTokensTotalAprTooltip = govTokensAprs ? Object.keys(govTokensAprs).map( govToken => {\n    //   const apr = govTokensAprs[govToken];\n    //   if (apr.gt(0)){\n    //     return `${govToken}: ${apr.toFixed(2)}%`;\n    //   }\n    //   return null;\n    // }).filter(v => (v !== null)) : null;\n\n    /*\n    const govTokensDistributionTooltip = govTokensUserDistribution ? Object.keys(govTokensUserDistribution).map( govToken => {\n      const speed = govTokensUserDistribution[govToken];\n      if (speed.gt(0)){\n        const distributionFrequency = this.functionsUtil.getGlobalConfig(['govTokens',govToken,'distributionFrequency']);\n        return `+${speed.toFixed(4)} ${govToken}/${distributionFrequency}`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n    */\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          desc:this.functionsUtil.getGlobalConfig(['messages','apyLong']),\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '0.00%') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    this.setState({\n      // govTokensAprs,\n      aggregatedValues,\n      // govTokensTotalApr,\n      govTokensUserBalance,\n      govTokensTotalBalance,\n      // govTokensTotalAprTooltip,\n      idleTokenUserDistribution,\n      govTokensTotalBalanceTooltip\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n\n    const currentNetwork = this.functionsUtil.getCurrentNetwork();\n    const showScore = currentNetwork.provider === 'infura';\n    const colWidth = showScore ? 1/6 : 1/5;\n\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Flex\n                          mt={2}\n                          width={1}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <Text\n                            fontWeight={2}\n                            fontSize={[1,2]}\n                            color={'cellText'}\n                          >\n                            {v.props.title}\n                          </Text>\n                          {\n                            v.props.desc && \n                              <Tooltip\n                                placement={'bottom'}\n                                message={v.props.desc}\n                              >\n                                <Icon\n                                  ml={2}\n                                  name={\"Info\"}\n                                  size={'1em'}\n                                  color={'cellTitle'}\n                                />\n                              </Tooltip>\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquity\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              chartToken={this.props.selectedToken}\n              enabledTokens={[this.props.selectedToken]}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,colWidth]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLent',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,colWidth]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:this.props.theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPerc',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,colWidth]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.govTokensTotalBalanceTooltip && this.state.govTokensTotalBalanceTooltip.length>0 && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      this.state.govTokensTotalBalanceTooltip.map((govTokenBalance,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          mt={govTokenIndex ? 1 : 0}\n                          key={`govToken_${govTokenIndex}`}\n                        >\n                          {govTokenBalance}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                )/* : this.state.govTokensUserBalance && Object.keys(this.state.govTokensUserBalance).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + ${this.state.govTokensTotalBalance.toFixed(4)}\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalBalanceTooltip.join(' / ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,colWidth]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Fees\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'feesCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,colWidth]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'apy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.idleTokenUserDistribution && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      mt={1}\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      {this.state.idleTokenUserDistribution.toFixed(4)} {this.idleGovToken.tokenName}/{this.idleGovToken.tokenConfig.distributionFrequency}\n                    </Text>\n                  </Flex>\n                )\n                /*\n                this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length===1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      Object.keys(this.state.govTokensAprs).map((govToken,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          ml={govTokenIndex ? 2 : 0}\n                          key={`govToken_${govToken}`}\n                        >\n                          {this.state.govTokensAprs[govToken].toFixed(2)}% {govToken}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                ) : this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + {this.state.govTokensTotalApr.toFixed(2)}%\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalAprTooltip.join('; ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            {\n              showScore && (\n                <Flex\n                  mb={[2,0]}\n                  width={[1,colWidth]}\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'flex-start'}\n                >\n                  <Title\n                    mb={2}\n                    fontSize={[3,4]}\n                    component={Heading.h3}\n                  >\n                    Risk Score\n                  </Title>\n                  <AssetField\n                    {...this.props}\n                    token={this.props.selectedToken}\n                    fieldInfo={{\n                      name:'score',\n                      props:{\n                        decimals:1,\n                        fontWeight:300,\n                        fontSize:['1.8em','1.9em'],\n                        color:this.props.theme.colors.counter,\n                        flexProps:{\n                          justifyContent:'center'\n                        }\n                      }\n                    }}\n                  />\n                </Flex>\n              )\n            }\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverview;","import React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Icon, Checkbox, Box, Link, Input, Tooltip } from \"rimble-ui\";\n\nclass CurveRedeem extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    tokenConfig:null,\n    unevenAmounts:null,\n    selectedToken:null,\n    availableTokens:null,\n    buttonDisabled:false,\n    showMaxSlippage:false,\n    redeemUnderlying:true,\n    curveTokenConfig:null,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    curveTokensAmounts:null,\n    fastBalanceSelector:null,\n    redeemUnevenAmounts:false,\n    curveRedeemableIdleTokens:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.initToken();\n  }\n\n  showMaxSlippage(){\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  async calculateSlippage(max_slippage=null){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (!inputValue || inputValue.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    let withdrawSlippage = null;\n    let curveTokensAmounts = null;\n    let curveIdleTokensAmounts = null;\n    if (this.state.redeemUnevenAmounts){\n      [\n        curveTokensAmounts,\n        curveIdleTokensAmounts\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokensAmounts(this.props.account,normalizedAmount,true),\n        this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,normalizedAmount)\n      ]);\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false,curveIdleTokensAmounts);\n    } else {\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false);\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const redeemableBalance = inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.times(100).plus(this.state.maxSlippage || this.functionsUtil.BNify(0)).div(100)));\n      curveTokensAmounts = {};\n      curveTokensAmounts[this.state.selectedToken] = redeemableBalance;\n    }\n\n    if (withdrawSlippage){\n      withdrawSlippage = withdrawSlippage.times(100);\n    }\n\n    this.setState({\n      withdrawSlippage,\n      curveTokensAmounts,\n      curveIdleTokensAmounts\n    });\n\n    // Add max slippage but don't save in state\n    if (withdrawSlippage && max_slippage){\n      withdrawSlippage = withdrawSlippage.plus(max_slippage);\n    }\n\n    return withdrawSlippage;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.tokenConfig.idle.token !== this.props.tokenConfig.idle.token;\n    if (tokenChanged){\n      await this.initToken();\n    }\n\n    const redeemUnevenAmountsChanged = prevState.redeemUnevenAmounts !== this.state.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    const inputChanged = prevState.inputValue !== this.state.inputValue;\n    const maxSlippageChanged = parseFloat(prevState.maxSlippage) !== parseFloat(this.state.maxSlippage);\n    const tokenConfigChanged = JSON.stringify(prevState.tokenConfig) !== JSON.stringify(this.state.tokenConfig);\n    if (inputChanged || tokenConfigChanged || maxSlippageChanged){\n      this.calculateSlippage();\n    }\n\n    const selectedTokenChanged = prevState.selectedToken !== this.state.selectedToken;\n    if (selectedTokenChanged){\n      this.loadSelectedTokenConfig();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    let buttonDisabled = false;\n\n    // if (this.state.redeemUnevenAmounts){\n      buttonDisabled = !amount || amount.gt(this.state.curveTokenBalance);\n    // } else {\n      // buttonDisabled = !amount || amount.gt(this.state.redeemableBalance);\n    // }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    let inputValue = null;\n\n    // if (this.state.redeemUnevenAmounts){\n    inputValue = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n    // } else {\n      // inputValue = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n    // }\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  selectDestinationToken(selectedToken){\n    this.setState({\n      selectedToken\n    });\n  }\n\n  async loadSelectedTokenConfig(){\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const tokenConfig = this.state.availableTokens[this.state.selectedToken];\n    const curveTokenConfig = curveConfig.availableTokens[tokenConfig.idle.token];\n    this.setState({\n      tokenConfig,\n      curveTokenConfig\n    });\n  }\n\n  async initToken(){\n    const [curvePoolContract,curveSwapContract] = await Promise.all([\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract()\n    ]);\n\n    const [\n      curveTokenPrice,\n      curveTokenBalance,\n      curveRedeemableIdleTokens,\n    ] = await Promise.all([\n      this.functionsUtil.getCurveTokenPrice(),\n      this.functionsUtil.getCurveTokenBalance(this.props.account),\n      this.functionsUtil.getCurveRedeemableIdleTokens(this.props.account)\n    ]);\n\n    const unevenAmounts = [];\n    const redeemableBalance = curveTokenBalance ? curveTokenBalance.times(curveTokenPrice) : this.functionsUtil.BNify(0);\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();;\n    const selectedToken = Object.keys(availableTokens)[0];\n\n    this.setState({\n      selectedToken,\n      unevenAmounts,\n      curveTokenPrice,\n      availableTokens,\n      curvePoolContract,\n      curveSwapContract,\n      curveTokenBalance,\n      redeemableBalance,\n      curveRedeemableIdleTokens\n    });\n  }\n\n  async redeem(){\n\n    if (!this.state.curveTokenBalance){\n      return false;\n    }\n\n    const callbackRedeem = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveRedeem`,\n        eventAction: this.props.selectedToken,\n        eventValue: this.state.curveTokenBalance.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackRedeem === 'function' && txSucceeded){\n        this.props.callbackRedeem(tx);\n      }\n    };\n\n    const callbackReceiptRedeem = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.curveSwapContract.name;\n    const withdrawSlippage = await this.calculateSlippage(this.state.maxSlippage);\n    const max_slippage = this.functionsUtil.BNify(this.state.maxSlippage).div(100);\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    // const curveTokenBalance = this.functionsUtil.normalizeTokenAmount(this.state.curveTokenBalance,this.state.curvePoolContract.decimals);\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    if (this.state.redeemUnevenAmounts){\n      const min_amounts = this.state.redeemUnderlying ? await this.functionsUtil.getCurveTokensAmounts(this.props.account,_amount,false,true) : await this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,_amount,max_slippage);\n      console.log('remove_liquidity',_amount.toString(),min_amounts);\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    } else {\n      const coin_index = this.state.curveTokenConfig.migrationParams.coinIndex;\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.div(100))),this.state.tokenConfig.decimals);\n      // const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.minus(inputValue.times(withdrawSlippage.div(100))),this.state.curveTokenConfig.decimals);\n      // let _token_amount = await this.functionsUtil.getCurveTokenAmount(amounts,false);\n      // _token_amount = this.functionsUtil.BNify(_token_amount).isGreaterThan(curveTokenBalance) ? curveTokenBalance : this.functionsUtil.BNify(_token_amount);\n\n      console.log('remove_liquidity_one_coin',_amount, coin_index, min_amount);\n\n      // debugger;\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_one_coin', [_amount, coin_index, min_amount, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    }\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  getFastBalanceSelector(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n\n  render() {\n\n    const showSlippage = !this.state.buttonDisabled && this.state.withdrawSlippage;\n    const curveTokenName = this.functionsUtil.getGlobalConfig(['curve','poolContract','token']);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          {\n            !this.state.curveTokenBalance ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3,\n                  minHeight:'195px',\n                  style:{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center'\n                  }\n                }}\n              >\n                <FlexLoader\n                  flexProps={{\n                    flexDirection:'row'\n                  }}\n                  loaderProps={{\n                    size:'30px'\n                  }}\n                  textProps={{\n                    ml:2\n                  }}\n                  text={'Checking Curve Pool...'}\n                />\n              </DashboardCard>\n            ) : this.state.processing.loading ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3\n                }}\n              >\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    endMessage={`Finalizing redeem request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                    waitText={ this.props.waitText ? this.props.waitText : 'Redeem estimated in'}\n                  />\n                </Flex>\n              </DashboardCard>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    mb:2\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'1.8em'}\n                      color={'cellText'}\n                      name={'FileUpload'}\n                    />\n                    <Text\n                      mt={1}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Withdraw from the Curve Pool in a specific token or in uneven amounts of tokens (with no slippage).\n                    </Text>\n                    <Flex\n                      mt={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Checkbox\n                        required={false}\n                        label={`Redeem with no slippage`}\n                        checked={this.state.redeemUnevenAmounts}\n                        onChange={ e => this.toggleUnevenAmounts(e.target.checked) }\n                      />\n                      <Tooltip\n                        placement={'top'}\n                        message={`You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.`}\n                      >\n                        <Icon\n                          size={'1em'}\n                          color={'cellTitle'}\n                          name={\"InfoOutline\"}\n                        />\n                      </Tooltip>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n                {\n                  !this.state.redeemUnevenAmounts/* && (!this.props.selectedToken || (this.state.showMaxSlippage && showSlippage))*/ && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      {\n                        this.state.tokenConfig && \n                          <Box\n                            width={1}\n                          >\n                            <Text\n                              mb={1}\n                            >\n                              Select destination token:\n                            </Text>\n                            <AssetSelector\n                              {...this.props}\n                              id={'token-from'}\n                              showBalance={false}\n                              tokenConfig={this.state.tokenConfig}\n                              selectedToken={this.state.selectedToken}\n                              availableTokens={this.state.availableTokens}\n                              onChange={this.selectDestinationToken.bind(this)}\n                            />\n                          </Box>\n                      }\n                    </Box>\n                  )\n                }\n                {\n                  this.state.curveTokensAmounts && !this.state.buttonDisabled && (\n                    <DashboardCard\n                      cardProps={{\n                        mt:1,\n                        mb:2,\n                        py:2,\n                        px:1\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Text\n                          mt={1}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          You will receive:\n                        </Text>\n                        <Flex\n                          mt={2}\n                          width={1}\n                          boxShadow={0}\n                          style={{\n                            flexWrap:'wrap'\n                          }}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                          >\n                            {\n                              Object.keys(this.state.curveTokensAmounts).map( token => {\n                                const balance = this.state.curveTokensAmounts[token];\n                                return (\n                                  <Flex\n                                    mb={1}\n                                    mx={1}\n                                    width={'auto'}\n                                    flexDirection={'row'}\n                                    key={`tokenBalance_${token}`}\n                                    justifyContent={'flex-start'}\n                                  >\n                                    <AssetField\n                                      token={token}\n                                      tokenConfig={{\n                                        token:token\n                                      }}\n                                      fieldInfo={{\n                                        name:'icon',\n                                        props:{\n                                          mr:1,\n                                          width:['1.4em','1.6em'],\n                                          height:['1.4em','1.6em']\n                                        }\n                                      }}\n                                    />\n                                    <SmartNumber\n                                      ml={1}\n                                      fontSize={[0,1]}\n                                      fontWeight={500}\n                                      maxPrecision={4}\n                                      color={'cellText'}\n                                      number={balance.toString()}\n                                    />\n                                  </Flex>\n                                );\n                            })\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n                {\n                  this.state.showMaxSlippage && showSlippage && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Text>\n                          Choose max slippage:\n                        </Text>\n                        <Tooltip\n                          placement={'top'}\n                          message={`Max additional slippage on top of the one shown below`}\n                        >\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'cellTitle'}\n                            name={\"InfoOutline\"}\n                          />\n                        </Tooltip>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        {\n                          [0.2,0.5,1,5].map( slippage => (\n                            <FastBalanceSelector\n                              cardProps={{\n                                p:1\n                              }}\n                              textProps={{\n                                fontSize:1\n                              }}\n                              percentage={slippage}\n                              key={`selector_${slippage}`}\n                              onMouseDown={()=>this.setMaxSlippage(slippage)}\n                              isActive={this.state.maxSlippage === parseFloat(slippage)}\n                            />\n                          ))\n                        }\n                      </Flex>\n                    </Box>\n                  )\n                }\n                <Flex\n                  mb={3}\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <Flex\n                    mb={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'flex-end'}\n                  >\n                    {\n                      showSlippage && (\n                        <Flex\n                          width={1}\n                          maxWidth={'40%'}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            textAlign={'right'}\n                            style={{\n                              whiteSpace:'nowrap'\n                            }}\n                            color={ parseFloat(this.state.withdrawSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                          >\n                            {\n                              parseFloat(this.state.withdrawSlippage.toFixed(3)) === 0 ?\n                                'No Slippage'\n                              : `${ this.state.withdrawSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.withdrawSlippage.abs().toFixed(3)}%`\n                            }\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={ this.state.redeemUnevenAmounts ? `You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.` : this.state.withdrawSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                          {\n                            !this.state.redeemUnevenAmounts &&\n                              <Link\n                                ml={1}\n                                color={'copyColor'}\n                                hoverColor={'primary'}\n                                onClick={this.showMaxSlippage.bind(this)}\n                              >\n                                change\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    <Flex\n                      width={1}\n                      maxWidth={'60%'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Link\n                        fontSize={1}\n                        fontWeight={3}\n                        color={'dark-gray'}\n                        textAlign={'right'}\n                        hoverColor={'copyColor'}\n                        onClick={ (e) => this.setFastBalanceSelector(100) }\n                        style={{\n                          maxWidth:'100%',\n                          overflow:'hidden',\n                          whiteSpace:'nowrap',\n                          textOverflow:'ellipsis'\n                        }}\n                      >\n                        {this.state.curveTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {curveTokenName}\n                      </Link>\n                    </Flex>\n                  </Flex>\n                  <Input\n                    min={0}\n                    type={\"number\"}\n                    required={true}\n                    height={'3.4em'}\n                    borderRadius={2}\n                    fontWeight={500}\n                    boxShadow={'none !important'}\n                    placeholder={`Insert amount`}\n                    onChange={this.changeInputValue.bind(this)}\n                    border={`1px solid ${this.props.theme.colors.divider}`}\n                    value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                  />\n                  <Flex\n                    mt={2}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      [25,50,75,100].map( percentage => (\n                        <FastBalanceSelector\n                          percentage={percentage}\n                          key={`selector_${percentage}`}\n                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                          isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                        />\n                      ))\n                    }\n                  </Flex>\n                </Flex>\n                <Flex\n                  justifyContent={'center'}\n                >\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2],\n                      disabled:this.state.buttonDisabled\n                    }}\n                    handleClick={this.redeem.bind(this)}\n                  >\n                    Redeem\n                  </RoundButton>\n                </Flex>\n              </Flex>\n            )\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveRedeem;","import React, { Component } from 'react';\nimport {\n  Button,\n  Flex,\n  Box,\n  Text\n} from \"rimble-ui\";\nimport styles from './TwitterShareButton.module.scss';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass TwitterShareButton extends Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  share = () => {\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'Share',\n      eventAction: 'twitter',\n      eventLabel: this.props.parent\n    });\n\n    const w = Math.min(window.innerWidth,600);\n    const h = 350;\n    const x = (window.innerWidth-w)/2;\n    const y = 150;\n    window.open(`https://twitter.com/intent/tweet?text=${this.props.tweet}`,\"_blank\",`toolbar=yes,scrollbars=no,resizable=no,top=${y},left=${x},width=${w},height=${h}`);\n  }\n\n  render() {\n    return (\n        <Button\n          borderRadius={1}\n          mainColor={'#2aa6f2'}\n          contrastColor={'white'}\n          onClick={ e => { this.share() } }\n        >\n          <Flex flexDirection={'row'} alignItems={'center'} justifyContent={'center'}>\n            <Box className={styles.twitterIcon} />\n            <Text color={'white'} fontWeight={3} ml={2}>{ this.props.text ? this.props.text : 'Tweet' }</Text>\n          </Flex>\n        </Button>\n    );\n  }\n}\n\nexport default TwitterShareButton;\n","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Link,\n  Flex\n} from \"rimble-ui\";\nimport ModalCard from './ModalCard';\nimport TwitterShareButton from '../../TwitterShareButton/TwitterShareButton.js';\nimport Confetti from 'react-confetti/dist/react-confetti';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass ShareModal extends React.Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  closeModal = async (action) => {\n    const globalConfigs = this.functionsUtil.getGlobalConfigs();\n    // Send Google Analytics event\n    if (globalConfigs.analytics.google.events.enabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'Share',\n        eventAction: action,\n        eventLabel: 'ShareModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n    const tweet = window.escape(this.props.tweet);\n    const customText = {__html: this.props.text};\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          {\n            this.props.confettiEnabled &&\n            <Confetti\n              style={{ position: 'fixed','zIndex':9999 }}\n              run={true}\n              recycle={true}\n              width={window.innerWidth}\n              height={window.innerHeight}\n            />\n          }\n          <ModalCard.Header title={this.props.title} icon={this.props.icon}></ModalCard.Header>\n          <ModalCard.Body>\n            <Flex my={3} width={1} flexDirection={'column'} mx={'auto'}>\n              <Text color={'dark-gray'} textAlign={'center'} fontSize={3} mb={2} dangerouslySetInnerHTML={customText}></Text>\n            </Flex>\n            <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n              <TwitterShareButton tweet={tweet} text={'Share now'} parent={'ShareModal'} />\n              <Link mt={2} onClick={ e => this.closeModal('continue_without_sharing') } hoverColor={'blue'}>continue without sharing</Link>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default ShareModal;","import Migrate from '../Migrate/Migrate';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport ExtLink from '../ExtLink/ExtLink';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport ConnectBox from '../ConnectBox/ConnectBox';\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport RoundButton from '../RoundButton/RoundButton';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport ShareModal from '../utilities/components/ShareModal';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionField from '../TransactionField/TransactionField';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Input, Box, Icon, Link, Checkbox, Tooltip, Image } from \"rimble-ui\";\n\nclass DepositRedeem extends Component {\n\n  state = {\n    txError:{},\n    tokenAPY:'-',\n    inputValue:{},\n    processing:{},\n    curveAPY:null,\n    totalAUM:null,\n    canRedeem:false,\n    maxSlippage:0.2,\n    canDeposit:false,\n    action:'deposit',\n    directMint:false,\n    activeModal:null,\n    tokenGovTokens:{},\n    showBuyFlow:false,\n    maxUnlentPerc:null,\n    unlentBalance:null,\n    tokenApproved:false,\n    skipMigration:false,\n    redeemSkipGov:false,\n    showRedeemFlow:false,\n    contractPaused:false,\n    buttonDisabled:false,\n    canRedeemCurve:false,\n    erc20ForwarderTx:null,\n    signedParameters:null,\n    minAmountForMint:null,\n    showMaxSlippage:false,\n    redeemGovTokens:false,\n    canDepositCurve:false,\n    redeemSkipGovTokens:[],\n    fastBalanceSelector:{},\n    actionProxyContract:{},\n    migrationEnabled:false,\n    componentMounted:false,\n    curveTokenBalance:null,\n    agreeSkipGovTokens:false,\n    redeemCurveEnabled:false,\n    depositCurveBalance:null,\n    depositCurveEnabled:true,\n    showAdvancedOptions:false,\n    skipGovTokensGasSave:null,\n    depositCurveSlippage:null,\n    erc20ForwarderContract:{},\n    erc20ForwarderEnabled:true,\n    showETHWrapperEnabled:false,\n    skipGovTokensGasSaveUSD:null,\n    metaTransactionsEnabled:true,\n    skippedGovTokensBalance:null,\n    minAmountForMintReached:false,\n    loadingErc20ForwarderTx:false,\n    showPolygonBridgeEnabled:false,\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadProxyContracts();\n  }\n\n  async componentDidMount(){\n\n  }\n\n  setShowRedeemFlow = (showRedeemFlow) => {\n    this.setState({\n      showRedeemFlow\n    });\n  }\n\n  setShowBuyFlow = (showBuyFlow) => {\n    this.setState({\n      showBuyFlow\n    });\n  }\n\n  toggleShowAdvancedOptions = showAdvancedOptions => {\n    this.setState((prevState) => ({\n      showAdvancedOptions:!prevState.showAdvancedOptions\n    }));\n  }\n\n  toggleSkipMigration = skipMigration => {\n    this.setState({\n      skipMigration\n    });\n  }\n\n  toggleRedeemCurve = redeemCurveEnabled => {\n    this.setState({\n      redeemCurveEnabled\n    });\n  }\n\n  toggleDepositCurve = depositCurveEnabled => {\n    this.setState({\n      depositCurveEnabled\n    });\n  }\n\n  toggleShowETHWrapper = showETHWrapperEnabled => {\n    this.setState({\n      showETHWrapperEnabled\n    });\n  }\n\n  toggleShowPolygonBridge = showPolygonBridgeEnabled => {\n    this.setState({\n      showPolygonBridgeEnabled\n    });\n  }\n\n  toggleAgreeSkipGovTokens = agreeSkipGovTokens => {\n    this.setState({\n      agreeSkipGovTokens\n    });\n  }\n\n  toggleSkipMint = (directMint) => {\n    this.setState({\n      directMint\n    });\n  }\n\n  toggleRedeemGovTokens = (redeemGovTokens) => {\n    this.setState({\n      redeemGovTokens,\n      redeemSkipGovTokens:[],\n      agreeSkipGovTokens:false,\n      skippedGovTokensBalance:this.functionsUtil.BNify(0),\n      redeemSkipGov:redeemGovTokens?false:this.state.redeemSkipGov\n    });\n  }\n\n  toggleRedeemSkipGov = (redeemSkipGov) => {\n    this.setState({\n      redeemSkipGov,\n      redeemSkipGovTokens:[],\n      agreeSkipGovTokens:false,\n      skippedGovTokensBalance:this.functionsUtil.BNify(0),\n      redeemGovTokens:redeemSkipGov?false:this.state.redeemGovTokens\n    });\n  }\n\n  getSkippedGovTokensFlags = async () => {\n    const govTokensIndexes = await this.functionsUtil.getGovTokensIndexes(this.props.account,this.props.tokenConfig);\n    const govTokensFlags = Object.keys(govTokensIndexes).map( token => {\n      return this.state.redeemSkipGovTokens.includes(token);\n    });\n    // console.log('getSkippedGovTokensFlags',govTokensIndexes,govTokensFlags);\n    return govTokensFlags;\n  }\n\n  calculateSkippedGovTokens = async () => {\n    let skippedGovTokensBalance = this.functionsUtil.BNify(0);\n    const DAITokenConfig = this.functionsUtil.getGlobalConfig(['stats','tokens','DAI']);\n\n    await this.functionsUtil.asyncForEach(this.state.redeemSkipGovTokens, async (govToken) => {\n      const govTokenConfig = this.functionsUtil.getGlobalConfig(['govTokens',govToken]);\n      const govTokenPrice = await this.functionsUtil.getUniswapConversionRate(DAITokenConfig,govTokenConfig);\n      const skippedAmount = this.props.govTokensUserBalances[govToken].times(govTokenPrice);\n      skippedGovTokensBalance = skippedGovTokensBalance.plus(skippedAmount);\n    });\n\n    const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n    const WETHTokenConfig = this.functionsUtil.getGlobalConfig(['stats','tokens','WETH']);\n\n    const [\n      wethPrice,\n      redeemGasUsage,\n      skipGovRedeemGasUsage\n    ] = await Promise.all([\n      this.functionsUtil.getUniswapConversionRate(DAITokenConfig,WETHTokenConfig),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleToken', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance,this.props.tokenConfig.decimals)], this.props.account),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleTokenSkipGov', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance,this.props.tokenConfig.decimals),_skipGovTokenRedeem], this.props.account)\n    ]);\n\n    const skipGovTokensGasSave = redeemGasUsage && skipGovRedeemGasUsage ? redeemGasUsage.minus(skipGovRedeemGasUsage) : this.functionsUtil.BNify(0);\n    const skipGovTokensGasSaveUSD = skipGovTokensGasSave ? skipGovTokensGasSave.times(wethPrice) : this.functionsUtil.BNify(0);\n\n    this.setState({\n      skipGovTokensGasSave,\n      skipGovTokensGasSaveUSD,\n      skippedGovTokensBalance\n    });\n    return skippedGovTokensBalance;\n  }\n\n  setRedeemSkipGovTokens = (token,checked) => {\n    this.setState((prevState) => {\n      const redeemSkipGovTokens = Object.assign([],prevState.redeemSkipGovTokens);\n      if (!checked && redeemSkipGovTokens.includes(token)){\n        redeemSkipGovTokens.splice(redeemSkipGovTokens.indexOf(token),1);\n      } else if (checked && !redeemSkipGovTokens.includes(token)) {\n        redeemSkipGovTokens.push(token);\n      }\n      return {\n        redeemSkipGovTokens\n      };\n    },() => {\n      this.calculateSkippedGovTokens();\n    });\n  }\n\n  toggleErc20ForwarderEnabled = (erc20ForwarderEnabled) => {\n    const newState = {\n      erc20ForwarderEnabled\n    };\n\n    this.setState(newState, () => {\n      this.cancelTransaction();\n    });\n  }\n\n  toggleMetaTransactionsEnabled = (metaTransactionsEnabled) => {\n    this.setState({\n      metaTransactionsEnabled\n    });\n  }\n\n  async loadProxyContracts(){\n    const actions = ['deposit','redeem'];\n    const newState = {\n      actionProxyContract:{},\n      erc20ForwarderContract:{}\n    };\n\n    await this.functionsUtil.asyncForEach(actions,async (action) => {\n      let mintProxyContractInfo = null;\n      const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderEnabled']);\n\n      if (depositErc20ForwarderEnabled){\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderProxyContract','forwarder']);\n\n        await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n\n        // Init contract for erc20 forwarder\n        const erc20ForwarderContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderProxyContract','tokens',this.props.selectedToken]);\n        if (erc20ForwarderContractInfo){\n          mintProxyContractInfo = erc20ForwarderContractInfo;\n          const erc20ForwarderContract = await this.props.initContract(erc20ForwarderContractInfo.name,erc20ForwarderContractInfo.address,erc20ForwarderContractInfo.abi);\n          newState.erc20ForwarderContract[action] = erc20ForwarderContractInfo;\n          newState.erc20ForwarderContract[action].contract = erc20ForwarderContract.contract;\n        }\n      }\n\n      if (!mintProxyContractInfo){\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'proxyContract']);\n      }\n\n      const hasProxyContract = mintProxyContractInfo && mintProxyContractInfo.enabled;\n      newState.actionProxyContract[action] = hasProxyContract ? mintProxyContractInfo : null;\n      if (hasProxyContract){\n        const proxyContract = await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n        newState.actionProxyContract[action].contract = proxyContract.contract;\n        newState.actionProxyContract[action].approved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,mintProxyContractInfo.address,this.props.account);\n      }\n    });\n\n    this.setState(newState);\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadAPY(){\n    const tokenAprs = await this.functionsUtil.getTokenAprs(this.props.tokenConfig);\n    if (tokenAprs && tokenAprs.avgApy !== null){\n      const tokenAPY = this.functionsUtil.BNify(tokenAprs.avgApy).toFixed(2);\n\n      let curveAPY = null;\n      if (this.state.canDepositCurve){\n        curveAPY = await this.functionsUtil.getCurveAPY();\n        // console.log('curveAPY',curveAPY);\n        if (curveAPY){\n          curveAPY = curveAPY.plus(tokenAPY);\n        }\n      }\n      this.setState({\n        tokenAPY,\n        curveAPY\n      });\n    }\n  }\n\n  getReferralAddress(){\n    let _referral = this.functionsUtil.getQueryStringParameterByName('_referral');\n    if (!this.functionsUtil.checkAddress(_referral)){\n      _referral = null;\n    }\n    return _referral;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    if (this.props.tokenBalance === null){\n      return false;\n    }\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const erc20ForwarderEnabledChanged = prevState.erc20ForwarderEnabled !==  this.state.erc20ForwarderEnabled;\n    const tokenBalanceChanged = prevProps.tokenBalance !== this.props.tokenBalance && this.props.tokenBalance !== null;\n\n    if (tokenChanged || tokenBalanceChanged || erc20ForwarderEnabledChanged){\n      await this.loadProxyContracts();\n      this.loadTokenInfo();\n      return false;\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n\n    if (actionChanged || fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputValueChanged){\n      // this.checkMinAmountForMint();\n    }\n\n    const redeemSkipGovChanged = prevState.redeemSkipGov !== this.state.redeemSkipGov;\n    const redeemGovTokensChanged = prevState.redeemGovTokens !== this.state.redeemGovTokens;\n    const agreeSkipGovTokensChanged = prevState.agreeSkipGovTokens !== this.state.agreeSkipGovTokens;\n    const redeemSkipGovTokensChanged = JSON.stringify(prevState.redeemSkipGovTokens) !== JSON.stringify(this.state.redeemSkipGovTokens);\n\n    if (redeemGovTokensChanged || actionChanged || redeemSkipGovTokensChanged || redeemSkipGovChanged || agreeSkipGovTokensChanged){\n      this.checkButtonDisabled();\n    }\n\n    const depositCurveChanged = prevState.depositCurveEnabled !== this.state.depositCurveEnabled;\n    const metaTransactionsChanged = prevState.metaTransactionsEnabled !== this.state.metaTransactionsEnabled;\n    if (metaTransactionsChanged || depositCurveChanged){\n      const tokenApproved = await this.checkTokenApproved();\n      this.setState({\n        tokenApproved\n      });\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateCurveSlippage();\n    }\n  }\n\n  async checkMinAmountForMint(){\n    let showPoolPerc = false;\n    let totalAUM = this.state.totalAUM;\n    let maxUnlentPerc = this.state.maxUnlentPerc;\n    const isRisk = this.props.selectedStrategy === 'risk';\n    const inputValue = this.functionsUtil.BNify(this.state.inputValue[this.state.action]);\n\n    if (inputValue.gt(this.props.tokenBalance)){\n      return false;\n    }\n\n    const convertedAmount = await this.functionsUtil.convertTokenBalance(inputValue,this.props.selectedToken,this.props.tokenConfig,isRisk);\n    let minAmountForMint = this.functionsUtil.BNify(this.functionsUtil.getGlobalConfig(['contract','methods','deposit','minAmountForMint']));\n    let minAmountForMintReached = convertedAmount.gte(minAmountForMint);\n\n    // Check token minAmountForMint\n    if (minAmountForMintReached){\n      if (this.props.tokenConfig.deposit && this.props.tokenConfig.deposit.minAmountForMint && convertedAmount.lt(this.props.tokenConfig.deposit.minAmountForMint)){\n        minAmountForMintReached = false;\n      } else {\n        [\n          maxUnlentPerc,\n          totalAUM\n        ] = await Promise.all([\n          maxUnlentPerc || this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'maxUnlentPerc'),\n          totalAUM ||this.functionsUtil.loadAssetField('pool',this.props.selectedToken,this.props.tokenConfig,this.props.account)\n        ]);\n\n        if (maxUnlentPerc && totalAUM){\n          const depositPerc = inputValue.div(totalAUM).times(100);\n          maxUnlentPerc = this.functionsUtil.BNify(maxUnlentPerc);\n          const maxUnlentPercFormatted = maxUnlentPerc.div(1e3).times(2);\n          if (depositPerc.lt(maxUnlentPercFormatted)){\n            minAmountForMintReached = false;\n          } else if (totalAUM.times(maxUnlentPercFormatted.div(100)).gt(minAmountForMint)) {\n            showPoolPerc = true;\n            minAmountForMint = totalAUM.times(maxUnlentPercFormatted.div(100));\n          }\n        }\n      }\n    }\n\n    this.setState({\n      totalAUM,\n      showPoolPerc,\n      maxUnlentPerc,\n      minAmountForMint,\n      minAmountForMintReached\n    });\n  }\n\n  async calculateCurveSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,curvePoolContractInfo.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositCurveBalance = amount;\n        newState.depositCurveSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;  \n      case 'redeem':\n        // newState.redeemBalance = amount;\n        // newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateCurveSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  checkUseProxyContract = () => {\n    const proxyContract = this.state.actionProxyContract[this.state.action];\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n    return ((depositErc20ForwarderEnabled || depositMetaTransactionsEnabled) && proxyContract && this.props.biconomy);\n  }\n\n  approveContract = async (callbackApprove,callbackReceiptApprove) => {\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      this.functionsUtil.enableERC20(this.props.selectedToken,curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract){\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        this.functionsUtil.enableERC20(this.props.selectedToken,proxyContract.address,callbackApprove,callbackReceiptApprove);\n      } else {\n        this.functionsUtil.enableERC20(this.props.selectedToken,this.props.tokenConfig.idle.address,callbackApprove,callbackReceiptApprove);\n      }\n    }\n  }\n\n  checkTokenApproved = async () => {\n    let tokenApproved = false;\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,curveDepositContract.address,this.props.account);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract){\n        // Check for Permit Deposit\n        const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n        if (depositErc20ForwarderEnabled){\n          const permitEnabled = this.functionsUtil.getGlobalConfig(['permit',this.props.selectedToken]);\n          if (permitEnabled){\n            return true;\n          }\n        }\n        // Check proxy contract approved\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,proxyContract.address,this.props.account);\n        // console.log('tokenApproved 1',tokenApproved);\n      } else {\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,this.props.tokenConfig.idle.address,this.props.account);\n        // console.log('tokenApproved 2',tokenApproved);\n      }\n    }\n\n    return tokenApproved;\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = await this.checkTokenApproved();\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.approveContract(callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  loadTokenInfo = async () => {\n\n    if (this.state.componentMounted){\n      this.setState({\n        componentMounted:false\n      });\n    }\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token]);\n    const curveTokenEnabled = curveConfig.enabled && curveTokenConfig && curveTokenConfig.enabled;\n\n    const [\n      tokenApproved,\n      contractPaused,\n      curveSwapContract,\n      curveDepositContract,\n      unlentBalance,\n      {migrationEnabled},\n      curveTokenBalance,\n    ] = await Promise.all([\n      this.checkTokenApproved(),\n      this.functionsUtil.checkContractPaused(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract(),\n      this.functionsUtil.getUnlentBalance(this.props.tokenConfig),\n      this.functionsUtil.checkMigration(this.props.tokenConfig,this.props.account),\n      curveTokenEnabled ? this.functionsUtil.getCurveTokenBalance(this.props.account) : null\n    ]);\n\n    const canRedeem = this.props.idleTokenBalance && this.functionsUtil.BNify(this.props.idleTokenBalance).gt(0);\n    const canDeposit = this.props.tokenBalance && this.functionsUtil.BNify(this.props.tokenBalance).gt(0) && this.functionsUtil.BNify(this.props.accountBalance).gt(0);\n\n    const canDepositCurve = curveTokenEnabled && canDeposit;\n    const depositCurveEnabled = canDepositCurve;\n\n    const showETHWrapperEnabled = this.props.selectedToken === 'WETH' && (this.state.showETHWrapperEnabled || !canDeposit);\n\n    const canRedeemCurve = curveTokenEnabled && curveTokenBalance && curveTokenBalance.gt(0);\n    const redeemCurveEnabled = canRedeemCurve;\n\n    const tokenGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n    const newState = {...this.state};\n\n    // Check curve deposit enabled\n    if (newState.depositCurveEnabled && !curveTokenEnabled){\n      newState.depositCurveEnabled = false;\n    }\n\n    newState.canRedeem = canRedeem;\n    newState.canDeposit = canDeposit;\n    newState.unlentBalance = unlentBalance;\n    newState.tokenApproved = tokenApproved;\n    newState.tokenGovTokens = tokenGovTokens;\n    newState.contractPaused = contractPaused;\n    newState.canRedeemCurve = canRedeemCurve;\n    newState.canDepositCurve = canDepositCurve;\n    newState.migrationEnabled = migrationEnabled;\n    newState.curveTokenBalance = curveTokenBalance;\n    newState.curveSwapContract = curveSwapContract;\n    newState.redeemCurveEnabled = redeemCurveEnabled;\n    newState.depositCurveEnabled = depositCurveEnabled;\n    newState.curveDepositContract = curveDepositContract;\n    newState.showETHWrapperEnabled = showETHWrapperEnabled;\n\n    newState.txError = {\n      redeem:false,\n      deposit:false\n    };\n    newState.processing = {\n      redeem:{\n        txHash:null,\n        loading:false\n      },\n      deposit:{\n        txHash:null,\n        loading:false\n      },\n      approve:{\n        txHash:null,\n        loading:false\n      },\n      boost:{\n        txHash:null,\n        loading:false\n      }\n    };\n    newState.inputValue = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n    newState.fastBalanceSelector = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n\n    newState.componentMounted = true;\n\n    this.setState(newState,() => {\n      this.checkAction();\n      this.loadAPY();\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      erc20ForwarderTx:null,\n      loadingErc20ForwarderTx:false,\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const redeemGovTokens = this.state.redeemGovTokens;\n    const selectedPercentage = this.getFastBalanceSelector();\n    const inputValue = this.state.inputValue[this.state.action];\n    const redeemSkipGov = this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length>0 && this.state.agreeSkipGovTokens;\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n\n    let loading = true;\n\n    switch (this.state.action){\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        if (!this.state.tokenApproved){\n          return this.approveToken();\n        }\n\n        if (localStorage){\n          this.functionsUtil.setLocalStorage('redirectToFundsAfterLogged',0);\n        }\n\n        this.setState({\n          lendingProcessing: this.props.account,\n          lendAmount: '',\n          genericError: '',\n        });\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.props.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if ((this.state.metaTransactionsEnabled || this.state.erc20ForwarderEnabled) && txError){\n            this.setState({\n              erc20ForwarderTx:null,\n              loadingErc20ForwarderTx:false,\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n        const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n        // Curve Deposit\n        if (curveTokenEnabled && this.state.depositCurveEnabled){\n\n          const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,curvePoolContractInfo.decimals);\n\n          const amounts = await this.functionsUtil.getCurveAmounts(this.props.tokenConfig.idle.token,tokensToDeposit);\n          let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n          if (this.state.maxSlippage){\n            minMintAmount = this.functionsUtil.BNify(minMintAmount);\n            minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n            minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n          }\n          \n          const depositParams = [amounts,minMintAmount];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, callbackDeposit, callbackReceiptDeposit);\n        // Normal Deposit\n        } else {\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n\n          // const gasLimitDeposit = this.functionsUtil.BNify(1000000);\n          let depositParams = [];\n\n          // Use Proxy Contract if enabled\n          const useProxyContract = this.checkUseProxyContract();\n          if (useProxyContract){\n            const mintProxyContractInfo = this.state.actionProxyContract[this.state.action];\n            const mintProxyContract = mintProxyContractInfo.contract;\n\n            // Use Meta-Transactions\n            if (depositMetaTransactionsEnabled){\n              depositParams = [tokensToDeposit, this.props.tokenConfig.idle.address];\n              const functionCall = mintProxyContract.methods[mintProxyContractInfo.function](...depositParams);\n              const functionSignature = functionCall.encodeABI();\n              // console.log('mintProxyContract',mintProxyContractInfo.function,depositParams);\n              // if (this.state.metaTransactionsEnabled){\n              contractSendResult = await this.functionsUtil.sendBiconomyTxWithPersonalSign(mintProxyContractInfo.name, functionSignature, callbackDeposit, callbackReceiptDeposit);\n              // } else {\n              //   contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n              // }\n            // Use Erc20 Forwarder\n            } else if (depositErc20ForwarderEnabled){\n              // Build ERC20 Forwarder Tx\n              if (!this.state.erc20ForwarderTx){\n                this.setState({\n                  txError:{\n                    [this.state.action]:false\n                  },\n                  loadingErc20ForwarderTx:true\n                }, async () => {\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderContract.name);\n                  console.log('signedParameters',signedParameters);\n                  if (signedParameters){\n                    const { expiry, nonce, r, s, v } = signedParameters;\n                    depositParams = [tokensToDeposit, parseInt(nonce), expiry, v, r, s];\n\n                    console.log('permitAndDeposit',mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams);\n\n                    // contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n\n                    const permitType = erc20ForwarderContract.permitType;\n                    const functionCall = erc20ForwarderContract.contract.methods[erc20ForwarderContract.function](...depositParams);\n                    const functionSignature = functionCall.encodeABI();\n\n                    // console.log('buildBiconomyErc20ForwarderTx 1',permitType, erc20ForwarderContract.function, depositParams, functionCall, functionSignature);\n\n                    const gasLimit = 1000000;//await functionCall.estimateGas({from: this.props.account}); // 5000000;\n\n                    console.log('buildBiconomyErc20ForwarderTx',mintProxyContractInfo.name, depositParams, functionSignature, gasLimit);\n\n                    // debugger;\n\n                    const erc20ForwarderTx = await this.functionsUtil.buildBiconomyErc20ForwarderTx(erc20ForwarderContract.name, this.props.tokenConfig.address, permitType, functionSignature, gasLimit);\n                    console.log('erc20ForwarderTx',erc20ForwarderTx);\n                    return this.setState({\n                      erc20ForwarderTx,\n                      loadingErc20ForwarderTx:false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]:{\n                          txHash:null,\n                          loading:false\n                        }\n                      },\n                      signedParameters:null,\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    }));\n                  }\n                });\n              // Send ERC20 Forwarder Tx\n              } else {\n                this.setState({\n                  txError:{\n                    [this.state.action]:false\n                  },\n                  loadingErc20ForwarderTx:true\n                }, async () => {\n                  const metaInfo = {};\n                  const permitOptions = {};\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const erc20ForwarderBaseContract = this.functionsUtil.getGlobalConfig(['contract','methods',this.state.action,'erc20ForwarderProxyContract','forwarder']);\n\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderBaseContract.name, 1);\n                  if (signedParameters){\n\n                    this.setState({\n                      signedParameters\n                    });\n\n                    const { expiry, nonce, r, s, v } = signedParameters;\n                    permitOptions.v = v;\n                    permitOptions.r = r;\n                    permitOptions.s = s;\n                    permitOptions.value = 0; //in case of DAI passing dummy value for the sake of struct (similar to token address in EIP2771)\n                    permitOptions.allowed = true;\n                    permitOptions.expiry = parseInt(expiry);\n                    permitOptions.holder = this.props.account;\n                    permitOptions.nonce = parseInt(nonce.toString());\n                    permitOptions.spender = erc20ForwarderBaseContract.address;\n\n                    metaInfo.permitData = permitOptions;\n                    metaInfo.permitType = erc20ForwarderContract.permitType;\n\n                    console.log('sendBiconomyTxWithErc20Forwarder',permitOptions,metaInfo);\n\n                    await this.functionsUtil.asyncTimeout(200);\n\n                    contractSendResult = await this.functionsUtil.sendBiconomyTxWithErc20Forwarder(this.state.erc20ForwarderTx.request, metaInfo, callbackDeposit, callbackReceiptDeposit);\n\n                    this.setState({\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]:{\n                          txHash:null,\n                          loading:false\n                        }\n                      },\n                      signedParameters:null,\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    }));\n                  }\n                });\n              }\n            }\n          // Use main contract if no proxy contract exists\n          } else {\n            /*\n            let _skipMint = !this.state.directMint && this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMint']);\n            _skipMint = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : _skipMint;\n\n            // Check if deposited amount is greated that general lower limit for direct mint\n            if (_skipMint && this.state.minAmountForMintReached){\n              _skipMint = false;\n            }\n            */\n            // Always skip mint\n            let _skipMint = true;\n\n            const _referral = this.getReferralAddress() || '0x0000000000000000000000000000000000000000';\n            depositParams = [tokensToDeposit, _skipMint, _referral];\n            // console.log('depositParams',depositParams);\n            contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'mintIdleToken', depositParams, callbackDeposit, callbackReceiptDeposit);\n          }\n        }\n      break;\n      case 'redeem':\n\n        if (redeemGovTokens){\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_gov`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: 0\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', [0], callbackRedeem, callbackReceiptRedeem);\n          \n        } else {\n\n          if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n            return false;\n          }\n\n          const txData = {\n            value:this.functionsUtil.BNify(inputValue)\n          };\n\n          let idleTokenToRedeem = null;\n          if (selectedPercentage){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage);\n          } else {\n            const idleTokenPriceWithFee = await this.functionsUtil.getIdleTokenPriceWithFee(this.props.tokenConfig,this.props.account)\n            idleTokenToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals)).div(idleTokenPriceWithFee);\n          }\n\n          // Check if idleTokens to redeem > idleToken balance\n          if (idleTokenToRedeem.gt(this.functionsUtil.BNify(this.props.idleTokenBalance))){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance);\n          }\n\n          // Normalize number\n          idleTokenToRedeem = this.functionsUtil.normalizeTokenAmount(idleTokenToRedeem,18);\n\n          if (!idleTokenToRedeem){\n            return false;\n          }\n\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_partial`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: parseInt(inputValue)\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          let redeemMethod = 'redeemIdleToken';\n          let redeemParams = [idleTokenToRedeem];\n\n          if (redeemSkipGov){\n            redeemMethod = 'redeemIdleTokenSkipGov';\n            const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n            redeemParams.push(_skipGovTokenRedeem);\n          }\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, redeemMethod, redeemParams, callbackRedeem, callbackReceiptRedeem, txData);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    if (contractSendResult !== false || loading !== this.state.processing[this.state.action].loading){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  showMaxSlippage = () => {\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  checkAction = () => {\n    let action = this.state.action;\n\n    switch(action){\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = 'deposit';\n        }\n      break;\n      default:\n      break;\n    }\n\n    if (action !== this.state.action){\n      this.setState({\n        action\n      },() => {\n        this.checkButtonDisabled();\n      });\n    } else {\n      this.checkButtonDisabled();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && (amount.lte(0) || amount.gt(this.props.tokenBalance)));\n      break;\n      case 'redeem':\n        buttonDisabled = !this.state.canRedeemCurve && !this.state.redeemGovTokens && (buttonDisabled || ( !amount || amount.lte(0) || amount.gt(this.props.redeemableBalance) ));\n\n        if (!buttonDisabled && this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length>0 && !this.state.agreeSkipGovTokens){\n          buttonDisabled = true;\n        }\n        // console.log('checkButtonDisabled',this.state.redeemSkipGov,this.state.redeemSkipGovTokens.length,this.state.agreeSkipGovTokens,buttonDisabled);\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.props.tokenBalance ? this.functionsUtil.BNify(this.props.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        amount = this.props.redeemableBalance ? this.functionsUtil.BNify(this.props.redeemableBalance).times(selectedPercentage) : null;\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  changeInputValue = async (e) => {\n    if (!this.state.action){\n      return false;\n    }\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem && !this.state.canRedeemCurve){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const currentNetwork = this.functionsUtil.getCurrentNetwork();\n\n    const viewOnly = this.props.connectorName === 'custom';\n\n    const govTokensDisabled = this.props.tokenConfig.govTokensDisabled;\n    const govTokensEnabled = !govTokensDisabled && this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'govTokensEnabled']) && Object.keys(this.state.tokenGovTokens).length>0;\n    const skipMintForDepositEnabled = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : true;\n    const skipMintCheckboxEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMintCheckboxEnabled']) && skipMintForDepositEnabled;\n\n    const showRedeemFlow = this.state.canRedeem && (!this.state.redeemCurveEnabled || this.state.showRedeemFlow) && this.state.action==='redeem';\n\n    const redeemGovTokenEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','redeemGovTokens','enabled']) && govTokensEnabled && showRedeemFlow && this.props.govTokensBalance.gt(0);\n    const redeemGovTokens = redeemGovTokenEnabled && this.state.redeemGovTokens;\n\n    const redeemSkipGovConfig = this.functionsUtil.getGlobalConfig(['contract','methods','redeemSkipGov']);\n    const redeemSkipGovEnabled = redeemSkipGovConfig && !redeemSkipGovConfig.disabledTokens.includes(this.props.tokenConfig.idle.token) && govTokensEnabled && showRedeemFlow;\n    const redeemSkipGov = redeemSkipGovEnabled && this.state.redeemSkipGov && Object.keys(this.props.govTokensUserBalances).length>0 && this.props.govTokensBalance.gt(0);\n    const redeemSkipGovNoTokens = redeemSkipGovEnabled && this.state.redeemSkipGov && (!Object.keys(this.props.govTokensUserBalances).length || this.props.govTokensBalance.lte(0));\n\n\n    const showAdvancedRedeemOptions = redeemGovTokenEnabled || redeemSkipGovEnabled;\n    // console.log('showAdvancedRedeemOptions',showAdvancedRedeemOptions,redeemGovTokenEnabled,redeemSkipGovEnabled,govTokensEnabled,showRedeemFlow);\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']);\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']);\n\n    // Biconomy Start\n    const metaTransactionsAvailable = depositMetaTransactionsEnabled && this.props.biconomy && this.state.actionProxyContract[this.state.action];\n    const useMetaTx = metaTransactionsAvailable && this.state.metaTransactionsEnabled;\n\n    const erc20ForwarderEnabled = depositErc20ForwarderEnabled && this.props.biconomy && this.props.erc20ForwarderClient && this.state.actionProxyContract[this.state.action];\n\n    // console.log(erc20ForwarderEnabled,depositErc20ForwarderEnabled,this.props.biconomy,this.props.erc20ForwarderClient,this.state.actionProxyContract[this.state.action]);\n    // Biconomy End\n\n    const totalBalance = this.state.action === 'deposit' ? this.props.tokenBalance : this.props.redeemableBalance;\n    const migrateText = this.state.migrationEnabled && this.props.tokenConfig.migration.message !== undefined ? this.props.tokenConfig.migration.message : null;\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n    const depositCurve = curveTokenEnabled && this.state.depositCurveEnabled && this.state.action === 'deposit';\n\n    const showDepositOptions = this.state.action === 'deposit' && !this.state.contractPaused && (curveTokenEnabled || this.state.tokenApproved);\n\n    const showDepositCurve = showDepositOptions && curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canDepositCurve && this.state.action === 'deposit';\n    const showRedeemCurve = curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canRedeemCurve && this.state.action === 'redeem';\n\n    const showCurveSlippage = depositCurve && this.state.depositCurveSlippage && this.state.depositCurveBalance && !this.state.buttonDisabled;\n\n    const showRebalanceOption = false && this.state.canDeposit && skipMintCheckboxEnabled && this.state.action === 'deposit';\n    const showAdvancedDepositOptions = showDepositCurve || showRebalanceOption;\n\n    const batchDepositInfo = this.functionsUtil.getGlobalConfig(['tools','batchDeposit']);\n    const batchDepositEnabled = batchDepositInfo.enabled && typeof batchDepositInfo.props.availableTokens[this.props.tokenConfig.idle.token] !== 'undefined' && batchDepositInfo.availableNetworks.includes(this.functionsUtil.getCurrentNetworkId());\n    const batchDepositDepositEnabled = batchDepositInfo.depositEnabled;\n\n    const showBatchDeposit = !useMetaTx && batchDepositEnabled && batchDepositDepositEnabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const ethWrapperInfo = this.functionsUtil.getGlobalConfig(['tools','ethWrapper']);\n    const ETHWrapperComponent = ethWrapperInfo.subComponent;\n    const showETHWrapper = this.props.selectedToken === 'WETH' && ethWrapperInfo.enabled && ethWrapperInfo.availableNetworks.includes(currentNetwork.id) && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const polygonBridgeInfo = this.functionsUtil.getGlobalConfig(['tools','polygonBridge']);\n    // const PolygonBridgeComponent = polygonBridgeInfo.subComponent;\n    const polygonNetworkId = this.functionsUtil.getGlobalConfig(['network','providers','polygon','networkPairs',currentNetwork.id]);\n    // const polygonNetwork = this.functionsUtil.getGlobalConfig(['network','availableNetworks',polygonNetworkId]);\n\n    const canPerformAction = /*!depositCurve && !this.state.redeemCurveEnabled && */((this.state.action === 'deposit' && this.state.canDeposit) || (this.state.action === 'redeem' && this.state.canRedeem) || redeemGovTokens) && (!this.state.showETHWrapperEnabled || this.state.action === 'redeem') && (!this.state.showPolygonBridgeEnabled || this.state.action === 'redeem');\n    const showActionFlow = !redeemGovTokens && canPerformAction;\n\n    const showBuyFlow = this.state.componentMounted && currentNetwork.provider === 'infura' && (!showDepositCurve || this.state.showBuyFlow) && !this.state.depositCurveEnabled && this.state.tokenApproved && !this.state.contractPaused && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.action === 'deposit' && !this.state.canDeposit && !this.state.showETHWrapperEnabled;\n    const showPolygonBridge = this.state.componentMounted && this.state.action === 'deposit' && !this.state.canDeposit && currentNetwork.provider === 'polygon';\n    const showPolygonBridgeBanner = !showPolygonBridge && currentNetwork.provider === 'polygon' && polygonNetworkId && polygonBridgeInfo.enabled && this.state.action === 'deposit';\n\n    const buyToken = this.functionsUtil.BNify(this.props.accountBalance).gt(0) ? this.props.selectedToken : this.functionsUtil.getBaseToken();\n\n    const _referral = this.getReferralAddress();\n    const showReferral = _referral && this.state.action === 'deposit' && showActionFlow && !showBuyFlow;\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Box\n            width={1}\n          >\n            <Text mb={1}>\n              Select your asset:\n            </Text>\n            <AssetSelector\n              {...this.props}\n            />\n          </Box>\n          {\n            viewOnly ? (\n              <IconBox\n                cardProps={{\n                  mt:3\n                }}\n                icon={'Visibility'}\n                text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n              />\n            ) : (\n              <Migrate\n                {...this.props}\n                migrateTextBefore={migrateText}\n                migrateText={migrateText !== null ? '' : null}\n                toggleSkipMigration={this.toggleSkipMigration.bind(this)}\n              >\n                {\n                  !this.props.account ? (\n                    <ConnectBox\n                      {...this.props}\n                    />\n                  ) : this.state.componentMounted ? (\n                    this.state.action && (\n                      <Box\n                        width={1}\n                      >\n                        <Flex\n                          mt={2}\n                          flexDirection={'column'}\n                        >\n                          <Text mb={2}>\n                            Choose the action:\n                          </Text>\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                width:0.48,\n                                onMouseDown:() => {\n                                  this.setAction('deposit');\n                                }\n                              }}\n                              isInteractive={true}\n                              isActive={ this.state.action === 'deposit' }\n                            >\n                              <Flex\n                                my={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <TransactionField\n                                  transaction={{\n                                    action:'deposit'\n                                  }}\n                                  fieldInfo={{\n                                    name:'icon',\n                                    props:{\n                                      mr:3\n                                    }\n                                  }}\n                                />\n                                <Text\n                                  fontSize={3}\n                                  fontWeight={3}\n                                >\n                                  Deposit\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                width:0.48,\n                                onMouseDown:() => {\n                                  this.setAction('redeem');\n                                }\n                              }}\n                              isInteractive={true}\n                              isActive={ this.state.action === 'redeem' }\n                              isDisabled={ !this.state.canRedeem && !this.state.canRedeemCurve }\n                            >\n                              <Flex\n                                my={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <TransactionField\n                                  transaction={{\n                                    action:'redeem'\n                                  }}\n                                  fieldInfo={{\n                                    name:'icon',\n                                    props:{\n                                      mr:3\n                                    }\n                                  }}\n                                />\n                                <Text\n                                  fontSize={3}\n                                  fontWeight={3}\n                                >\n                                  Redeem\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          </Flex>\n                        </Flex>\n                        {\n                          (showRedeemFlow && this.state.unlentBalance) &&\n                            <DashboardCard\n                              cardProps={{\n                                py:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'LocalGasStation'}\n                                />\n                                <Text\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Available balance for Cheap Redeem\n                                </Text>\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                    hoverColor={'copyColor'}\n                                  >\n                                    {this.state.unlentBalance.toFixed(4)} {this.props.selectedToken}\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.functionsUtil.getGlobalConfig(['messages','cheapRedeem'])}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                        }\n                        {\n                          showAdvancedRedeemOptions ? (\n                            <DashboardCard\n                              cardProps={{\n                                pt:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                                pb:this.state.showAdvancedOptions ? 3 : 2,\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Link\n                                  ml={1}\n                                  mainColor={'primary'}\n                                  hoverColor={'primary'}\n                                  onClick={this.toggleShowAdvancedOptions}\n                                >\n                                  { this.state.showAdvancedOptions ? 'Hide' : 'Show' } advanced options\n                                </Link>\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                />\n                              </Flex>\n                              {\n                                this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      redeemGovTokenEnabled && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            checked={this.state.redeemGovTokens}\n                                            label={`Redeem governance tokens only`}\n                                            onChange={ e => this.toggleRedeemGovTokens(e.target.checked) }\n                                          />\n                                          <Link\n                                            color={'link'}\n                                            hoverColor={'link'}\n                                            onClick={ e => this.props.openTooltipModal('Redeem governance tokens',`This feature allows you to redeem just the amount of governance tokens accrued${ this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~${this.props.govTokensBalance.toFixed(2)}$)` : null } without redeeming the underlying token.`) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                    {\n                                      redeemSkipGovEnabled && \n                                        <Flex\n                                          alignItems={'center'}\n                                          flexDirection={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            checked={this.state.redeemSkipGov}\n                                            label={`Redeem without governance tokens`}\n                                            onChange={ e => this.toggleRedeemSkipGov(e.target.checked) }\n                                          />\n                                          <Icon\n                                            mr={1}\n                                            size={'1.2em'}\n                                            name={'Warning'}\n                                            color={'#ffe000'}\n                                          />\n                                          <Link\n                                            color={'link'}\n                                            hoverColor={'link'}\n                                            onClick={ e => this.props.openTooltipModal('Redeem without governance tokens',this.functionsUtil.getGlobalConfig(['messages','redeemSkipGov'])) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                  </Flex>\n                              }\n                            </DashboardCard>\n                          ) :  showAdvancedDepositOptions ? (\n                            <DashboardCard\n                              cardProps={{\n                                pt:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                                pb:this.state.showAdvancedOptions ? 3 : 2,\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Link\n                                  ml={1}\n                                  mainColor={'primary'}\n                                  hoverColor={'primary'}\n                                  onClick={this.toggleShowAdvancedOptions}\n                                >\n                                  { this.state.showAdvancedOptions ? 'Hide' : 'Show' } advanced options\n                                </Link>\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                />\n                              </Flex>\n                              {\n                                this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      showDepositCurve && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            disabled={this.state.directMint}\n                                            label={`Deposit in the Curve Pool`}\n                                            checked={this.state.depositCurveEnabled}\n                                            onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                          />\n                                          <Link\n                                            mainColor={'primary'}\n                                            hoverColor={'primary'}\n                                            onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                    {\n                                      showRebalanceOption && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            label={`Rebalance the pool`}\n                                            checked={this.state.directMint}\n                                            disabled={this.state.depositCurveEnabled}\n                                            onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                          />\n                                          <Tooltip\n                                            placement={'bottom'}\n                                            message={this.functionsUtil.getGlobalConfig(['messages','directMint'])}\n                                          >\n                                            <Icon\n                                              size={'1em'}\n                                              color={'cellTitle'}\n                                              name={\"InfoOutline\"}\n                                            />\n                                          </Tooltip>\n                                        </Flex>\n                                    }\n                                  </Flex>\n                              }\n                            </DashboardCard>\n                          ) : (\n                            <Flex\n                              width={1}\n                              flexDirection={'column'}\n                            >\n                              {\n                                showDepositCurve && (\n                                  <Flex\n                                    width={1}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <DashboardCard\n                                      isRainbow={true}\n                                      cardProps={{\n                                        py:3,\n                                        px:2,\n                                        mt:3,\n                                        display:'flex',\n                                        alignItems:'center',\n                                        flexDirection:'column',\n                                        justifyContent:'center',\n                                      }}\n                                    >\n                                      <Flex\n                                        width={1}\n                                        alignItems={'center'}\n                                        flexDirection={'column'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Image\n                                          height={'1.8em'}\n                                          src={curveConfig.params.image}\n                                        />\n                                        <Text\n                                          mt={2}\n                                          px={2}\n                                          fontSize={1}\n                                          color={'dark-gray'}\n                                          textAlign={'center'}\n                                        >\n                                          Deposit your tokens in the Curve Pool and boost your APY up to {this.state.curveAPY ? this.state.curveAPY.toFixed(2) : '-'}%.\n                                          <Link\n                                            ml={1}\n                                            mainColor={'primary'}\n                                            hoverColor={'primary'}\n                                            onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                          >\n                                            Read More\n                                          </Link>\n                                        </Text>\n                                        <Checkbox\n                                          mt={2}\n                                          required={false}\n                                          label={`Deposit in Curve`}\n                                          checked={this.state.depositCurveEnabled}\n                                          onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                        />\n                                      </Flex>\n                                    </DashboardCard>\n                                    {\n                                      (!this.state.showBuyFlow && !this.state.depositCurveEnabled && !this.state.canDeposit) &&\n                                        <Link\n                                          textAlign={'center'}\n                                          hoverColor={'primary'}\n                                          onClick={ e => this.setShowBuyFlow(true) }\n                                        >\n                                          I just want to deposit more {this.props.selectedToken}\n                                        </Link>\n                                    }\n                                  </Flex>\n                                )\n                              }\n                              {\n                                showRebalanceOption && (\n                                  <DashboardCard\n                                    cardProps={{\n                                      py:3,\n                                      px:2,\n                                      mt:3,\n                                      display:'flex',\n                                      alignItems:'center',\n                                      flexDirection:'column',\n                                      justifyContent:'center',\n                                    }}\n                                  >\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        color={'cellText'}\n                                        name={'InfoOutline'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        px={2}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        By checking this flag you can rebalance the pool and help all users gain an additional APR\n                                      </Text>\n                                    </Flex>\n                                    <Checkbox\n                                      mt={2}\n                                      required={false}\n                                      label={`Rebalance the pool`}\n                                      checked={this.state.directMint}\n                                      onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                    />\n                                  </DashboardCard>\n                                )\n                              }\n                              {\n                                redeemGovTokenEnabled && (\n                                  <DashboardCard\n                                    cardProps={{\n                                      py:3,\n                                      px:2,\n                                      mt:3,\n                                      display:'flex',\n                                      alignItems:'center',\n                                      flexDirection:'column',\n                                      justifyContent:'center',\n                                    }}\n                                  >\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        color={'cellText'}\n                                        name={'InfoOutline'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        px={2}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        By redeeming your {this.props.selectedToken} you will automatically get also the proportional amount of governance tokens accrued{ this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~ $${this.props.govTokensBalance.toFixed(2)})` : null }.\n                                      </Text>\n                                    </Flex>\n                                    <Checkbox\n                                      mt={2}\n                                      required={false}\n                                      checked={this.state.redeemGovTokens}\n                                      label={`Redeem governance tokens only`}\n                                      onChange={ e => this.toggleRedeemGovTokens(e.target.checked) }\n                                    />\n                                  </DashboardCard>\n                                )\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          redeemSkipGov ? (\n                            <DashboardCard\n                              cardProps={{\n                                mt:2,\n                                mb:2,\n                                py:2,\n                                px:1\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Select the gov tokens you want to give away:\n                                </Text>\n                                <Flex\n                                  mt={2}\n                                  width={1}\n                                  boxShadow={0}\n                                  style={{\n                                    flexWrap:'wrap'\n                                  }}\n                                  alignItems={'center'}\n                                  justifyContent={'center'}\n                                  >\n                                    {\n                                      Object.keys(this.props.govTokensUserBalances).map( token => {\n                                        const balance = this.props.govTokensUserBalances[token];\n                                        const isActive = this.state.redeemSkipGovTokens.includes(token);\n                                        const tokenConfig = this.functionsUtil.getGlobalConfig(['govTokens',token]);\n                                        return (\n                                          <Flex\n                                            p={2}\n                                            mb={1}\n                                            mx={1}\n                                            width={'auto'}\n                                            style={{\n                                              cursor:'pointer'\n                                            }}\n                                            borderRadius={2}\n                                            flexDirection={'row'}\n                                            key={`skipGovToken_${token}`}\n                                            justifyContent={'flex-start'}\n                                            backgroundColor={isActive ? '#2a4b78' : 'cardBgHover'}\n                                            onClick={ e => this.setRedeemSkipGovTokens(token,!this.state.redeemSkipGovTokens.includes(token)) }\n                                          >\n                                            <Checkbox\n                                              m={0}\n                                              required={false}\n                                              checked={isActive}\n                                              onChange={ e => this.setRedeemSkipGovTokens(token,e.target.checked) }\n                                            />\n                                            <AssetField\n                                              token={token}\n                                              tokenConfig={tokenConfig}\n                                              fieldInfo={{\n                                                name:'icon',\n                                                props:{\n                                                  mr:1,\n                                                  width:['1.4em','1.6em'],\n                                                  height:['1.4em','1.6em']\n                                                }\n                                              }}\n                                            />\n                                            <SmartNumber\n                                              ml={1}\n                                              fontSize={[0,2]}\n                                              fontWeight={500}\n                                              maxPrecision={4}\n                                              color={'cellText'}\n                                              number={balance.toString()}\n                                            />\n                                          </Flex>\n                                        );\n                                    })\n                                  }\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                          ) : redeemSkipGovNoTokens && (\n                            <DashboardCard\n                              cardProps={{\n                                p:2,\n                                my:2\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'MoneyOff'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  You don't have any gov tokens to give away.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          redeemSkipGov && this.functionsUtil.BNify(this.state.skippedGovTokensBalance).gt(0) ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:2,\n                                my:2\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Warning'}\n                                  color={'#ffe000'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'red'}\n                                  textAlign={'center'}\n                                >\n                                  You are giving away {this.functionsUtil.formatMoney(this.state.skippedGovTokensBalance)}$ worth of governance tokens!\n                                </Text>\n                                {\n                                  this.state.skipGovTokensGasSave && this.state.skipGovTokensGasSave.gte(0.0001) && (\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'#00b84a'}\n                                      textAlign={'center'}\n                                    >\n                                      This will save you {this.state.skipGovTokensGasSave.toFixed(4)} ETH of gas (~{this.state.skipGovTokensGasSaveUSD.toFixed(2)}$)\n                                    </Text>\n                                  )\n                                }\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  To proceed with the redeem please give your authorization by checking the following flag:\n                                </Text>\n                                <Checkbox\n                                  my={1}\n                                  required={false}\n                                  checked={this.state.agreeSkipGovTokens}\n                                  label={`I agree to give away my governance tokens`}\n                                  onChange={ e => this.toggleAgreeSkipGovTokens(e.target.checked) }\n                                />\n                              </Flex>\n                            </DashboardCard>\n                          ) : redeemSkipGov && this.state.redeemSkipGovTokens.length>0 && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                my:2\n                              }}\n                            >\n                              <FlexLoader\n                                flexProps={{\n                                  flexDirection:'row'\n                                }}\n                                loaderProps={{\n                                  size:'25px',\n                                }}\n                                textProps={{\n                                  ml:2\n                                }}\n                                text={'Loading estimated gas usage...'}\n                              />\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          showReferral && (\n                            <DashboardCard\n                              cardProps={{\n                                py:3,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Share'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  You are depositing with the following referral address:\n                                </Text>\n                                <Text\n                                  mt={1}\n                                  px={2}\n                                  fontSize={1}\n                                  fontWeight={500}\n                                  textAlign={'center'}\n                                  color={this.props.theme.colors.transactions.status.completed}\n                                >\n                                  {_referral}\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          (metaTransactionsAvailable && !showBuyFlow && !this.state.contractPaused) ? (\n                            <DashboardCard\n                              cardProps={{\n                                py:3,\n                                px:2,\n                                my:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              {\n                                this.state.metaTransactionsEnabled && this.state.txError[this.state.action] && this.state.actionProxyContract[this.state.action].approved ? (\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'Warning'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      Seems like you are having some trouble with Meta-Transactions... Disable them by unchecking the box below and try again!\n                                    </Text>\n                                  </Flex>\n                                ) : this.functionsUtil.getWalletProvider() === 'WalletConnect' && this.state.metaTransactionsEnabled ? (\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'Warning'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      Please disable Meta-Transactions if you are using Argent Wallet to avoid failed transactions!\n                                    </Text>\n                                  </Flex>\n                                ) : (\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Meta-Transactions are {this.state.metaTransactionsEnabled ? 'enabled' : 'disabled'} for {this.state.action}s!<br />\n                                    {\n                                      this.state.metaTransactionsEnabled && !this.state.actionProxyContract[this.state.action].approved && `Please either enable the Smart-Contract to enjoy gas-less ${this.state.action} or just disable meta-tx.`\n                                    }\n                                  </Text>\n                                )\n                              }\n                              <Checkbox\n                                mt={2}\n                                required={false}\n                                checked={this.state.metaTransactionsEnabled}\n                                onChange={ e => this.toggleMetaTransactionsEnabled(e.target.checked) }\n                                label={`${this.functionsUtil.capitalize(this.state.action)} with Meta-Transaction`}\n                              />\n                            </DashboardCard>\n                          ) : (erc20ForwarderEnabled && !showBuyFlow && !this.state.contractPaused) && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                my:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Text\n                                mb={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                How do you prefer to pay gas fees for this {this.state.action}?\n                              </Text>\n                              <Flex\n                                width={[1,0.7]}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'space-between'}\n                              >\n                                <CardIconButton\n                                  {...this.props}\n                                  cardProps={{\n                                    py:2,\n                                    px:[2,3],\n                                    width:0.48\n                                  }}\n                                  textProps={{\n                                    ml:[1,2],\n                                  }}\n                                  text={this.props.selectedToken}\n                                  isActive={this.state.erc20ForwarderEnabled}\n                                  imageProps={{\n                                    height:this.props.isMobile ? '1.4em' : '1.8em',\n                                    width:this.props.isMobile ? '1.4em' : '1.8em'\n                                  }}\n                                  image={`/images/tokens/${this.props.selectedToken}.svg`}\n                                  handleClick={e => this.toggleErc20ForwarderEnabled(true)}\n                                />\n                                <CardIconButton\n                                  {...this.props}\n                                  cardProps={{\n                                    py:2,\n                                    px:[2,3],\n                                    width:0.48\n                                  }}\n                                  textProps={{\n                                    ml:[1,2],\n                                  }}\n                                  text={'ETH'}\n                                  isActive={!this.state.erc20ForwarderEnabled}\n                                  imageProps={{\n                                    height:this.props.isMobile ? '1.4em' : '1.8em',\n                                    width:this.props.isMobile ? '1.4em' : '1.8em'\n                                  }}\n                                  image={`/images/tokens/ETH.svg`}\n                                  handleClick={e => this.toggleErc20ForwarderEnabled(false)}\n                                />\n                              </Flex>\n                              {\n                                this.state.txError[this.state.action] && (\n                                  <Text\n                                    mt={2}\n                                    fontSize={1}\n                                    color={'red'}\n                                    textAlign={'center'}\n                                  >\n                                    The meta-transaction cannot be executed, select ETH and try again.\n                                  </Text>\n                                )\n                              }\n                              <Text\n                                mt={2}\n                                fontSize={'11px'}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                Powered by <ExtLink fontSize={'11px'} href={'https://biconomy.io'}>Biconomy</ExtLink>\n                              </Text>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          (this.state.minAmountForMintReached && this.state.action === 'deposit') && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'InfoOutline'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  By depositing more than {this.functionsUtil.formatMoney(this.state.minAmountForMint)}$ { this.state.showPoolPerc ? `(${this.state.minAmountForMint.div(this.state.totalAUM).times(100).toFixed(0)}% of the pool)` : null } the pool will be automatically rebalanced, gas cost may be higher.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          showBatchDeposit ? (\n                            <Flex\n                              p={2}\n                              mt={3}\n                              width={1}\n                              borderRadius={2}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              justifyContent={'center'}\n                              backgroundColor={'DashboardCard'}\n                              border={`1px solid ${this.props.theme.colors.primary}`}\n                            >\n                              <Link\n                                textAlign={'center'}\n                                hoverColor={'primary'}\n                                href={`/#/dashboard/tools/${batchDepositInfo.route}/${this.props.tokenConfig.idle.token}`}\n                              >\n                                Gas fees too high? Save gas with our Batch Deposit!\n                              </Link>\n                              <Icon\n                                ml={1}\n                                size={'1em'}\n                                color={'primary'}\n                                name={'LocalGasStation'}\n                              />\n                            </Flex>\n                          ) : showETHWrapper ? (\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <DashboardCard\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                  pb:this.state.showAdvancedOptions ? 3 : 2,\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  justifyContent={'row'}\n                                >\n                                  <Checkbox\n                                    required={false}\n                                    checked={this.state.showETHWrapperEnabled}\n                                    label={`Convert your ETH to WETH`}\n                                    onChange={ e => this.toggleShowETHWrapper(e.target.checked) }\n                                  />\n                                </Flex>\n                              </DashboardCard>\n                              {\n                                this.state.showETHWrapperEnabled && \n                                  <ETHWrapperComponent\n                                    {...this.props}\n                                    action={'wrap'}\n                                    fullWidth={true}\n                                    toolProps={ethWrapperInfo.props}\n                                  />\n                              }\n                            </Flex>\n                          ) : showPolygonBridgeBanner && (\n                            <Flex\n                              p={2}\n                              mt={3}\n                              width={1}\n                              borderRadius={2}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                              backgroundColor={'DashboardCard'}\n                              border={`1px solid ${this.props.theme.colors.primary}`}\n                            >\n                              <Image\n                                height={'1.2em'}\n                                src={polygonBridgeInfo.image}\n                              />\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Link\n                                  textAlign={'center'}\n                                  hoverColor={'primary'}\n                                  href={`/#/dashboard/tools/${polygonBridgeInfo.route}/${this.props.selectedToken}`}\n                                >\n                                  Use the {polygonBridgeInfo.label} to transfer your {this.props.selectedToken}\n                                </Link>\n                                <Icon\n                                  ml={1}\n                                  size={'1em'}\n                                  color={'primary'}\n                                  name={'ArrowForward'}\n                                />\n                              </Flex>\n                            </Flex>\n                          )\n                        }\n                        {\n                          showRedeemCurve && this.state.canRedeem && (\n                            <Flex\n                              width={1}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <DashboardCard\n                                isRainbow={true}\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Image\n                                    height={'1.8em'}\n                                    src={curveConfig.params.image}\n                                  />\n                                  <Text\n                                    mt={2}\n                                    px={2}\n                                    fontSize={1}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                  >\n                                    Redeem your tokens from the Curve Pool.\n                                    <Link\n                                      ml={1}\n                                      mainColor={'primary'}\n                                      hoverColor={'primary'}\n                                      onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                    >\n                                      Read More\n                                    </Link>\n                                  </Text>\n                                  {\n                                    this.state.canRedeem &&\n                                      <Checkbox\n                                        mt={2}\n                                        required={false}\n                                        label={`Redeem from Curve`}\n                                        checked={this.state.redeemCurveEnabled}\n                                        onChange={ e => this.toggleRedeemCurve(e.target.checked) }\n                                      />\n                                  }\n                                </Flex>\n                              </DashboardCard>\n                              {\n                                this.canRedeem &&\n                                  <Link\n                                    textAlign={'center'}\n                                    hoverColor={'primary'}\n                                    onClick={ e => this.setShowRedeemFlow(true) }\n                                  >\n                                    I just want to redeem my {this.props.selectedToken}\n                                  </Link>\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          (this.state.contractPaused && this.state.action === 'deposit') ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Warning'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Deposits for {this.props.selectedToken} are temporarily unavailable due to Smart-Contract maintenance. Redeems are always available.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          ) : (!this.state.tokenApproved && this.state.action === 'deposit' && !this.state.showETHWrapperEnabled) ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              {\n                                this.state.processing['approve'] && this.state.processing['approve'].loading ? (\n                                  <Flex\n                                    flexDirection={'column'}\n                                  >\n                                    <TxProgressBar\n                                      {...this.props}\n                                      waitText={`Approve estimated in`}\n                                      endMessage={`Finalizing approve request...`}\n                                      hash={this.state.processing['approve'].txHash}\n                                      cancelTransaction={this.cancelTransaction.bind(this)}\n                                    />\n                                  </Flex>\n                                ) : (\n                                  <Flex\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'LockOpen'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={3}\n                                      fontSize={2}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      {\n                                        this.state.depositCurveEnabled ? \n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.`\n                                        : useMetaTx ?\n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle using Meta-Transaction you need to approve our Smart-Contract first.`\n                                        :\n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle you need to approve our Smart-Contract first.`\n                                      }\n                                    </Text>\n                                    <RoundButton\n                                      buttonProps={{\n                                        mt:3,\n                                        width:[1,1/2]\n                                      }}\n                                      handleClick={this.approveToken.bind(this)}\n                                    >\n                                      Approve\n                                    </RoundButton>\n                                  </Flex>\n                                )\n                              }\n                            </DashboardCard>\n                          ) : (!showBuyFlow && canPerformAction) && (\n                            !this.state.processing[this.state.action].loading ? (\n                              <Flex\n                                mt={2}\n                                flexDirection={'column'}\n                              >\n                                {\n                                  showActionFlow && (\n                                    <Flex\n                                      mb={3}\n                                      width={1}\n                                      flexDirection={'column'}\n                                    >\n                                      {\n                                        (totalBalance || this.props.tokenFeesPercentage) && (\n                                          <Box\n                                            mb={1}\n                                            width={1}\n                                          >\n                                            {\n                                              this.state.showMaxSlippage && showCurveSlippage && (\n                                                <Box\n                                                  mb={2}\n                                                  width={1}\n                                                >\n                                                  <Flex\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text>\n                                                      Choose max slippage:\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={`Max additional slippage on top of the one shown below`}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                  </Flex>\n                                                  <Flex\n                                                    mt={2}\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                    justifyContent={'space-between'}\n                                                  >\n                                                    {\n                                                      [0.2,0.5,1,5].map( slippage => (\n                                                        <FastBalanceSelector\n                                                          cardProps={{\n                                                            p:1\n                                                          }}\n                                                          textProps={{\n                                                            fontSize:1\n                                                          }}\n                                                          percentage={slippage}\n                                                          key={`selector_${slippage}`}\n                                                          onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                                          isActive={this.state.maxSlippage === parseFloat(slippage)}\n                                                        />\n                                                      ))\n                                                    }\n                                                  </Flex>\n                                                </Box>\n                                              )\n                                            }\n                                            <Flex\n                                              width={1}\n                                              alignItems={'center'}\n                                              flexDirection={'row'}\n                                              justifyContent={'space-between'}\n                                            >\n                                              {\n                                                showCurveSlippage ? (\n                                                  <Flex\n                                                    width={1}\n                                                    maxWidth={'50%'}\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text\n                                                      fontSize={1}\n                                                      fontWeight={3}\n                                                      textAlign={'right'}\n                                                      style={{\n                                                        whiteSpace:'nowrap'\n                                                      }}\n                                                      color={ this.state.depositCurveSlippage.gt(0) ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                                    >\n                                                      {\n                                                        parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)) === 0 ?\n                                                          'No Slippage'\n                                                        : `${ this.state.depositCurveSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositCurveSlippage.times(100).abs().toFixed(2)}%`\n                                                      }\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={this.functionsUtil.getGlobalConfig(['messages','curveBonusSlippage'])}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                    <Link\n                                                      ml={1}\n                                                      color={'copyColor'}\n                                                      hoverColor={'primary'}\n                                                      onClick={this.showMaxSlippage}\n                                                    >\n                                                      change\n                                                    </Link>\n                                                  </Flex>\n                                                ) : this.props.tokenFeesPercentage && (\n                                                  <Flex\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text\n                                                      fontSize={1}\n                                                      fontWeight={3}\n                                                      color={'dark-gray'}\n                                                      textAlign={'right'}\n                                                      hoverColor={'copyColor'}\n                                                    >\n                                                      Performance fee: {this.props.tokenFeesPercentage.times(100).toFixed(2)}%\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={this.functionsUtil.getGlobalConfig(['messages','performanceFee'])}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                  </Flex>\n                                                )\n                                              }\n                                              {\n                                                totalBalance && (\n                                                  <Link\n                                                    fontSize={1}\n                                                    fontWeight={3}\n                                                    color={'dark-gray'}\n                                                    textAlign={'right'}\n                                                    hoverColor={'copyColor'}\n                                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                                  >\n                                                    {totalBalance.toFixed(6)} {this.props.selectedToken}\n                                                  </Link>\n                                                )\n                                              }\n                                            </Flex>\n                                          </Box>\n                                        )\n                                      }\n                                      <Input\n                                        min={0}\n                                        type={\"number\"}\n                                        required={true}\n                                        height={'3.4em'}\n                                        borderRadius={2}\n                                        fontWeight={500}\n                                        borderColor={'cardBorder'}\n                                        backgroundColor={'cardBg'}\n                                        boxShadow={'none !important'}\n                                        placeholder={`Insert amount`}\n                                        onChange={this.changeInputValue.bind(this)}\n                                        border={`1px solid ${this.props.theme.colors.divider}`}\n                                        value={this.state.inputValue[this.state.action] !== null ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]).toFixed() : ''}\n                                      />\n                                      <Flex\n                                        mt={2}\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                        justifyContent={'space-between'}\n                                      >\n                                        {\n                                          [25,50,75,100].map( percentage => (\n                                            <FastBalanceSelector\n                                              percentage={percentage}\n                                              key={`selector_${percentage}`}\n                                              onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                              isActive={this.state.fastBalanceSelector[this.state.action] === parseInt(percentage)}\n                                            />\n                                          ))\n                                        }\n                                      </Flex>\n                                    </Flex>\n                                  )\n                                }\n                                {\n                                  canPerformAction && (\n                                    <Flex\n                                      justifyContent={'center'}\n                                      mt={ redeemGovTokens ? 2 : 0 }\n                                    >\n                                      <RoundButton\n                                        buttonProps={{\n                                          width:'auto',\n                                          minWidth:[1,1/2],\n                                          style:{\n                                            textTransform:'capitalize'\n                                          },\n                                          disabled:this.state.buttonDisabled\n                                        }}\n                                        handleClick={this.state.buttonDisabled ? null : this.executeAction.bind(this) }\n                                      >\n                                        {this.state.action}{ redeemGovTokens ? ' Gov Tokens' : '' /*(depositCurve ? ' in Curve' : '')*/ }\n                                      </RoundButton>\n                                    </Flex>\n                                  )\n                                }\n                              </Flex>\n                            ) : this.state.loadingErc20ForwarderTx ? (\n                              <Flex\n                                mt={3}\n                                flexDirection={'column'}\n                              >\n                                <FlexLoader\n                                  flexProps={{\n                                    flexDirection:'row'\n                                  }}\n                                  loaderProps={{\n                                    size:'25px',\n                                  }}\n                                  textProps={{\n                                    ml:2\n                                  }}\n                                  text={ this.state.erc20ForwarderTx ? ( this.state.signedParameters ? 'Please Sign the Transaction...' : 'Please Sign the Permit...' ) : 'Calculating transaction fees...'}\n                                />\n                              </Flex>\n                            ) : this.state.erc20ForwarderTx ? (\n                              <DashboardCard\n                                cardProps={{\n                                  p:3,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Text\n                                  mb={2}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  The required fee to perform the {this.state.action} is <strong>{this.state.erc20ForwarderTx.cost} {this.props.selectedToken}</strong>\n                                </Text>\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <DashboardCard\n                                    cardProps={{\n                                      mx:2,\n                                      py:2,\n                                      px:[2,3],\n                                      width:0.40,\n                                      onMouseDown:() => {\n                                        this.executeAction()\n                                      }\n                                    }}\n                                    isInteractive={true}\n                                  >\n                                    <Flex\n                                      my={1}\n                                      alignItems={'center'}\n                                      flexDirection={'row'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Flex\n                                        mr={2}\n                                        alignItems={'center'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Icon\n                                          align={'center'}\n                                          color={'#00b84a'}\n                                          name={'CheckCircle'}\n                                          size={this.props.isMobile ? '1em' : '1.8em'}\n                                        />\n                                      </Flex>\n                                      <Text\n                                        fontWeight={3}\n                                        fontSize={[2,3]}\n                                      >\n                                        Confirm\n                                      </Text>\n                                    </Flex>\n                                  </DashboardCard>\n                                  <DashboardCard\n                                    cardProps={{\n                                      mx:2,\n                                      py:2,\n                                      px:[2,3],\n                                      width:0.40,\n                                      onMouseDown:() => {\n                                        this.cancelTransaction();\n                                      }\n                                    }}\n                                    isInteractive={true}\n                                  >\n                                    <Flex\n                                      my={1}\n                                      alignItems={'center'}\n                                      flexDirection={'row'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Flex\n                                        mr={2}\n                                        alignItems={'center'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Icon\n                                          name={'Cancel'}\n                                          align={'center'}\n                                          color={'#e13636'}\n                                          size={this.props.isMobile ? '1em' : '1.8em'}\n                                        />\n                                      </Flex>\n                                      <Text\n                                        fontWeight={3}\n                                        fontSize={[2,3]}\n                                      >\n                                        Decline\n                                      </Text>\n                                    </Flex>\n                                  </DashboardCard>\n                                </Flex>\n                              </DashboardCard>\n                            ) : (\n                              <Flex\n                                mt={3}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <TxProgressBar\n                                  {...this.props}\n                                  cancelTransaction={this.cancelTransaction.bind(this)}\n                                  hash={this.state.processing[this.state.action].txHash}\n                                  endMessage={`Finalizing ${this.state.action} request...`}\n                                  waitText={`${this.functionsUtil.capitalize(this.state.action)} estimated in`}\n                                />\n                              </Flex>\n                            )\n                          )\n                        }\n                      </Box>\n                    )\n                  ) : (\n                    <Flex\n                      mt={3}\n                      flexDirection={'column'}\n                    >\n                      <FlexLoader\n                        flexProps={{\n                          flexDirection:'row'\n                        }}\n                        loaderProps={{\n                          size:'30px'\n                        }}\n                        textProps={{\n                          ml:2\n                        }}\n                        text={'Loading asset info...'}\n                      />\n                    </Flex>\n                  )\n                }\n              </Migrate>\n            )\n          }\n        </Flex>\n        {\n          /*\n          showDepositCurve && this.state.depositCurveEnabled ? (\n            <CurveDeposit\n              {...this.props}\n            />\n          ) :\n          */\n          showRedeemCurve && this.state.redeemCurveEnabled && (\n            <Box\n              mt={3}\n              width={1}\n            >\n              <CurveRedeem\n                {...this.props}\n              />\n            </Box>\n          )\n        }\n        {\n          showBuyFlow ? (\n            <Flex\n              mt={3}\n              width={[1,0.5]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <BuyModal\n                {...this.props}\n                showInline={true}\n                buyToken={buyToken}\n                availableMethods={[]}\n              />\n            </Flex>\n          ) : showPolygonBridge && (\n            <Flex\n              mt={3}\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <DashboardCard\n                cardProps={{\n                  p:3\n                }}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                >\n                  <Image\n                    height={'2em'}\n                    src={polygonBridgeInfo.image}\n                  />\n                  <Text\n                    mt={1}\n                    fontSize={2}\n                    color={'cellText'}\n                    textAlign={'center'}\n                  >\n                    <strong>You don't have enough {buyToken} in your wallet!</strong><br />Use the {polygonBridgeInfo.label} to transfer your {buyToken} in Polygon.\n                  </Text>\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2]\n                    }}\n                    handleClick={ e => this.props.goToSection(`tools/${polygonBridgeInfo.route}/${buyToken}`)}\n                  >\n                    Deposit {buyToken}\n                  </RoundButton>\n                </Flex>\n              </DashboardCard>\n            </Flex>\n          )\n        }\n\n        <ShareModal\n          confettiEnabled={true}\n          icon={`images/medal.svg`}\n          title={`Congratulations!`}\n          account={this.props.account}\n          closeModal={this.resetModal}\n          tokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'share'}\n          text={`You have successfully deposited in Idle!<br />Enjoy <strong>${this.state.tokenAPY}% APY</strong> on your <strong>${this.props.selectedToken}</strong>!`}\n          tweet={`I'm earning ${this.state.tokenAPY}% APY on my ${this.props.selectedToken} with @idlefinance! Go to ${this.functionsUtil.getGlobalConfig(['baseURL'])} and start earning now from your idle tokens!`}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default DepositRedeem;\n","import theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Input, Icon, Tooltip } from \"rimble-ui\";\n\nclass EstimatedEarnings extends Component {\n\n  state = {\n    chartData:null,\n    chartProps:null,\n    inputValue:1000,\n    maxInputValue:999999999999999\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    this.loadChart();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged){\n      this.loadChart();\n    }\n  }\n\n  async loadChart(){\n\n    const tokenApy = await this.functionsUtil.getTokenApy(this.props.tokenConfig);\n\n    if (!tokenApy){\n      return false;\n    }\n\n    const amount = this.functionsUtil.BNify(this.state.inputValue);\n    const earningsYear = amount.times(this.props.tokenApy.div(100));\n\n    const amountMonth = parseFloat(earningsYear.div(12));\n    const amount3Months = parseFloat(earningsYear.div(4));\n    const amount6Months = parseFloat(earningsYear.div(2));\n    const amountYear = parseFloat(earningsYear.div(1));\n\n    const chartData = [\n      {\n        perc:1/12,\n        label:'MONTH',\n        value:amountMonth,\n        month:amountMonth,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        monthColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:3/12,\n        label:'3 MONTHS',\n        value:amount3Months,\n        month3:amount3Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month3Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:6/12,\n        label:'6 MONTHS',\n        value:amount6Months,\n        month6:amount6Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month6Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:1,\n        label:'YEAR',\n        year:amountYear,\n        value:amountYear,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        yearColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      }\n    ];\n\n    let labelTextColorModifiers = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'chart','labelTextColorModifiers']);\n\n    const maxGridLines = 4;\n    const gridYStep = amountYear/maxGridLines;\n    const gridYValues = [0];\n    for (let i=1;i<=maxGridLines;i++){\n      const gridYValue = i*gridYStep;\n      gridYValues.push(gridYValue);\n    }\n\n    const chartProps = {\n      padding: 0.2,\n      animate: false,\n      indexBy: 'label',\n      // enableLabel: false,\n      labelSkipWidth: 16,\n      labelSkipHeight: 16,\n      keys: ['month','month3','month6','year'],\n      colors: ({ id, data }) => data[`${id}Color`],\n      label: d => this.functionsUtil.abbreviateNumber(d.value,2,4)+' '+this.props.selectedToken,\n      labelTextColor: labelTextColorModifiers ? { from: 'color', modifiers: [ labelTextColorModifiers ] } : null,\n      isInteractive:false,\n      minValue:0,\n      gridYValues,\n      // maxValue:amountYear,\n      axisLeft:{\n        format: v => this.functionsUtil.abbreviateNumber(v,1,3),\n        tickValues:gridYValues,\n        orient: 'left',\n        tickSize: 0,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendPosition: 'middle'\n      },\n      axisBottom:{\n        legend: '',\n        tickSize:0,\n        tickPadding: 15,\n        orient: 'bottom',\n      },\n      theme:{\n        labels:{\n          text:{\n            fontSize:15,\n            fontWeight:600,\n            fill:theme.colors.counter,\n            fontFamily: theme.fonts.sansSerif\n          }\n        },\n        axis: {\n          ticks: {\n            text: {\n              fontSize:14,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '9 5'\n          }\n        },\n      },\n      margin: this.props.isMobile ? { top: 0, right: 0, bottom: 30, left: 0 } : { top: 10, right: 0, bottom: 50, left: 65 }\n    }\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  changeInputValue(e){\n    let inputValue = e.target.value.length && !isNaN(e.target.value) ? Math.min(this.state.maxInputValue,parseFloat(e.target.value)) : 0;\n    inputValue = this.functionsUtil.BNify(inputValue);\n    this.setState({\n      inputValue\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const showAPYDisclaimer = idleTokenEnabled && this.functionsUtil.getGlobalConfig(['govTokens','IDLE','showAPR']);\n\n    return (\n      <DashboardCard\n        cardProps={{\n          p:[3,4]\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={['column','row']}\n        >\n          <Flex\n            width={[1,0.3]}\n            flexDirection={'column'}\n            justifyContent={'flex-start'}\n          >\n            <Flex\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <AssetField\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n                fieldInfo={{\n                  name:'icon',\n                  props:{\n                    mb:2,\n                    height:'2.5em'\n                  }\n                }}\n              />\n              <Text\n                fontSize={2}\n                color={'cellText'}\n                textAlign={'center'}\n              >\n                Set the amount and see your estimated earnings on time based on the current APY: { this.props.tokenApy ? `${this.props.tokenApy.toFixed(2)}%` : null}\n                {\n                  showAPYDisclaimer && \n                    <Flex\n                      style={{\n                        display:'inline-flex',\n                        verticalAlign:'middle'\n                      }}\n                    >\n                      <Tooltip\n                        placement={'top'}\n                        message={this.functionsUtil.getGlobalConfig(['messages','apyLong'])}\n                      >\n                        <Icon\n                          ml={1}\n                          name={\"Info\"}\n                          size={'1em'}\n                          color={'cellTitle'}\n                        />\n                      </Tooltip>\n                    </Flex>\n                }\n              </Text>\n            </Flex>\n            <Flex\n              mt={3}\n              flexDirection={'column'}\n            >\n              <Input\n                min={0}\n                type={\"number\"}\n                required={true}\n                borderRadius={2}\n                fontWeight={500}\n                textAlign={'center'}\n                height={['3em','3.4em']}\n                borderColor={'cardBorder'}\n                boxShadow={'none !important'}\n                max={this.state.maxInputValue}\n                backgroundColor={'cardBgHover'}\n                onChange={this.changeInputValue.bind(this)}\n                border={`1px solid ${theme.colors.divider}`}\n                placeholder={`Insert ${this.props.selectedToken.toUpperCase()} amount`}\n                value={this.state.inputValue && !isNaN(this.state.inputValue) ? this.state.inputValue : ''}\n              />\n            </Flex>\n            <Flex\n              mt={3}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                buttonProps={{\n                  width:[1,1/2],\n                }}\n                handleClick={this.loadChart.bind(this)}\n              >\n                CALCULATE\n              </RoundButton>\n            </Flex>\n          </Flex>\n          <Flex\n            mt={[3,0]}\n            width={[1,0.7]}\n            id={'estimated-earnings-chart'}\n          >\n            {\n              this.props.isMobile ? (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    this.state.chartData !== null && this.state.chartData.map((v,index) => (\n                      <Flex\n                        py={2}\n                        my={2}\n                        width={1}\n                        flexDirection={'row'}\n                        key={`earnings_${index}`}\n                      >\n                        <Flex\n                          width={0.35}\n                          alignItems={'center'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            color={'legend'}\n                          >\n                            {v.label}\n                          </Text>\n                        </Flex>\n                        <Flex\n                          width={0.65}\n                          position={'relative'}\n                          alignItems={'center'}\n                          minHeight={['20px','35px']}\n                          justifyContent={'center'}\n                        >\n                          <Flex\n                            zIndex={1}\n                            position={'relative'}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Text\n                              fontSize={1}\n                              fontWeight={3}\n                              color={'counter'}\n                            >\n                              {this.functionsUtil.abbreviateNumber(v.value,2,4)} {this.props.selectedToken}\n                            </Text>\n                          </Flex>\n                          <Flex\n                            right={0}\n                            width={v.perc}\n                            position={'absolute'}\n                            height={['20px','35px']}\n                            borderRadius={['20px 0 0 20px','35px 0 0 35px']}\n                            style={{background:`linear-gradient(-90deg, rgba(${v.color},0) 0%, rgba(${v.color},1) 100%)`}}\n                          ></Flex>\n                        </Flex>\n                      </Flex>\n                    ))\n                  }\n                </Flex>\n              ) : (\n                <GenericChart\n                  type={Bar}\n                  height={250}\n                  showLoader={true}\n                  {...this.state.chartProps}\n                  data={this.state.chartData}\n                  parentId={'estimated-earnings-chart'}\n                />\n              )\n            }\n          </Flex>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default EstimatedEarnings;","import Title from '../Title/Title';\nimport { Box, Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport FundsOverview from '../FundsOverview/FundsOverview';\nimport DepositRedeem from '../DepositRedeem/DepositRedeem';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport EstimatedEarnings from '../EstimatedEarnings/EstimatedEarnings';\n\nclass AssetPage extends Component {\n\n  state = {\n    tokenApy:{},\n    tokenFees:{},\n    tokenBalance:{},\n    tokenApproved:{},\n    activeModal:null,\n    idleTokenPrice:{},\n    govTokensBalance:{},\n    idleTokenBalance:{},\n    redeemableBalance:{},\n    govTokensDisabled:{},\n    availableGovTokens:{},\n    tokenFeesPercentage:{},\n    componentMounted:false,\n    govTokensUserBalances:{}\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadTokensInfo(){\n    if (this.props.account){\n      const newState = {...this.state};\n      await this.functionsUtil.asyncForEach(Object.keys(this.props.availableTokens),async (token) => {\n        const tokenConfig = this.props.availableTokens[token];\n        const govTokenAvailableTokens = {};\n        govTokenAvailableTokens[token] = tokenConfig;\n\n        const [\n          tokenFeesPercentage,\n          idleTokenPrice,\n          tokenApy,\n          tokenBalance,\n          tokenFees,\n          idleTokenBalance,\n          tokenApproved,\n          govTokensUserBalances,\n          govTokensBalance\n        ] = await Promise.all([\n          this.functionsUtil.getTokenFees(tokenConfig),\n          this.functionsUtil.getIdleTokenPrice(tokenConfig),\n          this.functionsUtil.getTokenApy(this.props.tokenConfig),\n          this.functionsUtil.getTokenBalance(token,this.props.account),\n          this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n          this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n          this.functionsUtil.checkTokenApproved(token,tokenConfig.idle.address,this.props.account),\n          this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null,null),\n          this.functionsUtil.getGovTokensUserTotalBalance(this.props.account,govTokenAvailableTokens,'DAI',false)\n        ]);\n\n        newState.tokenFees[token] = tokenFees;\n        newState.tokenBalance[token] = tokenBalance;\n        newState.tokenApproved[token] = tokenApproved;\n        newState.idleTokenPrice[token] = idleTokenPrice;\n        newState.idleTokenBalance[token] = idleTokenBalance;\n        newState.govTokensBalance[token] = govTokensBalance;\n        newState.tokenFeesPercentage[token] = tokenFeesPercentage;\n        newState.govTokensUserBalances[token] = govTokensUserBalances;\n        newState.govTokensDisabled[token] = tokenConfig.govTokensDisabled;\n        newState.tokenApy[token] = tokenApy && !tokenApy.isNaN() ? tokenApy : null;\n        newState.redeemableBalance[token] = idleTokenBalance && idleTokenPrice ? idleTokenBalance.times(idleTokenPrice) : this.functionsUtil.BNify(0);\n      });\n\n      newState.availableGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n      // console.log('govTokensBalance',newState.govTokensBalance);\n      // console.log('availableGovTokens',newState.availableGovTokens);\n      // console.log('govTokensUserBalances',newState.govTokensUserBalances);\n\n      newState.componentMounted = true;\n\n      this.setState(newState);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n    if (accountChanged || transactionsChanged || availableTokensChanged){\n      // console.log('AssetPage - availableTokensChanged',availableTokensChanged);\n      this.loadTokensInfo();\n    }\n  }\n\n  render() {\n\n    const userHasFunds = this.props.account && this.state.idleTokenBalance[this.props.selectedToken] && this.functionsUtil.BNify(this.state.idleTokenBalance[this.props.selectedToken]).gt(0);\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            <Breadcrumb\n              {...this.props}\n              isMobile={this.props.isMobile}\n              path={[this.props.selectedToken]}\n              handleClick={ e => this.props.goToSection(this.props.selectedStrategy) }\n              text={this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])}\n            />\n          </Flex>\n          <Flex\n            width={0.5}\n            justifyContent={'flex-end'}\n          >\n            <CardIconButton\n              icon={'Add'}\n              {...this.props}\n              text={'Add funds'}\n              handleClick={ e => this.setActiveModal('buy') }\n            />\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Deposit / Redeem\n        </Title>\n        <Flex\n          width={1}\n        >\n          <DepositRedeem\n            {...this.props}\n            tokenFees={this.state.tokenFees[this.props.selectedToken]}\n            tokenBalance={this.state.tokenBalance[this.props.selectedToken]}\n            tokenApproved={this.state.tokenApproved[this.props.selectedToken]}\n            govTokensBalance={this.state.govTokensBalance[this.props.selectedToken]}\n            idleTokenBalance={this.state.idleTokenBalance[this.props.selectedToken]}\n            redeemableBalance={this.state.redeemableBalance[this.props.selectedToken]}\n            tokenFeesPercentage={this.state.tokenFeesPercentage[this.props.selectedToken]}\n            govTokensUserBalances={this.state.govTokensUserBalances[this.props.selectedToken]}\n          />\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverview\n                {...this.props}\n                tokenFees={this.state.tokenFees[this.props.selectedToken]}\n              />\n            </Flex>\n        }\n        {\n          userHasFunds && this.props.account && !this.state.govTokensDisabled[this.props.selectedToken] && Object.keys(this.state.availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id={\"yield-farming\"}\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(this.state.availableGovTokens)}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.30,0.15]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    mobile:false,\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.25],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenRedeemableBalance']),\n                    props:{\n                      width:[0.35,0.30],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                    ]\n                  },\n                  {\n                    title:'DISTRIBUTION',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','userDistributionSpeed']),\n                    props:{\n                      width:[0.35,0.30],\n                    },\n                    fields:[\n                      {\n                        name:'userDistributionSpeed',\n                        props:{\n                          decimals:6\n                        }\n                      }\n                    ]\n                  },\n                  /*\n                  {\n                    title:'APR',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenApr']),\n                    props:{\n                      width:[0.2,0.17],\n                    },\n                    fields:[\n                      {\n                        name:'apr',\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','tokenPrice']),\n                    mobile:false,\n                    props:{\n                      width: 0.17,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                  */\n                ]}\n                {...this.props}\n                availableTokens={this.state.availableGovTokens}\n              />\n            </Flex>\n        }\n        {\n        this.props.account && this.state.tokenApy[this.props.selectedToken] && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'estimated-earnings-container'}\n          >\n            <Title my={[3,4]}>Estimated earnings</Title>\n            <EstimatedEarnings\n              {...this.props}\n              tokenApy={this.state.tokenApy[this.props.selectedToken]}\n            />\n          </Flex>\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              enabledTokens={[this.props.selectedToken]}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport { Text, Modal, Flex, Link } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass BetaModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.functionsUtil.setLocalStorage('betaApproved',true);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'40px'}\n            title={'Beta Version'}\n            icon={'images/warning.svg'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                You're about to enter Idle Finance Beta Dashboard – this is the place where several un-audited and risky features are being tested!<br />Please use at your own risk, or visit the official website at <Link fontSize={2} mainColor={'primary'} hoverColor={'primary'} href={this.functionsUtil.getGlobalConfig(['baseURL'])}>{this.functionsUtil.getGlobalConfig(['baseURL'])}</Link>.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Continue Anyway\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default BetaModal;","import React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Box, Text, Icon, Tooltip, Link, Input } from \"rimble-ui\";\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\n\nclass CurveDeposit extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    depositSlippage:null,\n    redeemableBalance:null,\n    migrationContract:null,\n    curveTokensBalance:null,\n    migrationSucceeded:false,\n    fastBalanceSelector:null,\n    migrationContractApproved:false,\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    await this.initToken();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const idleTokenBalanceChanged = prevProps.idleTokenBalance !== this.props.idleTokenBalance;\n    if (accountChanged || idleTokenBalanceChanged){\n      await this.initToken();\n    }\n    \n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = this.state.inputValue !== prevState.inputValue;\n    if (inputValueChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  setInputValue = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    const inputValue = this.props.idleTokenBalance ? this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage) : null;\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    const buttonDisabled = !amount || amount.gt(this.state.idleTokenBalance);\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  approve = async () => {\n    const migrationContract = this.state.migrationContract;\n    if (migrationContract){\n\n      // Check if the migration contract is approved\n      const migrationContractApproved = await this.checkMigrationContractApproved();\n\n      if (!migrationContractApproved){\n\n        const callbackApprove = (tx,error) => {\n          // Send Google Analytics event\n          const eventData = {\n            eventAction: 'approve',\n            eventCategory: 'CurveDeposit',\n            eventLabel: tx ? tx.status : null\n          };\n\n          const txSucceeded = tx && tx.status === 'success';\n\n          // console.log('callbackApprove',tx,error);\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            migrationContractApproved: txSucceeded, // True\n            processing: {\n              ...prevState.processing,\n              txHash:null,\n              loading:false\n            }\n          }));\n\n          if (typeof this.props.callbackApprove === 'function' && txSucceeded){\n            this.props.callbackApprove(tx);\n          }\n\n          this.checkMigration();\n        };\n\n        const callbackReceiptApprove = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              txHash\n            }\n          }));\n        };\n\n        this.functionsUtil.enableERC20(this.props.selectedToken,migrationContract.address,callbackApprove,callbackReceiptApprove);\n\n        this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            txHash:null,\n            loading:true\n          },\n          migrationContractApproved:false\n        }));\n      } else {\n        this.setState({\n          migrationContractApproved:true\n        });\n      }\n    }\n  }\n\n  deposit = async () => {\n\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    if (!inputValue){\n      return false;\n    }\n\n    const callbackDeposit = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveDeposit`,\n        eventAction: this.props.selectedToken,\n        eventValue: inputValue.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackDeposit === 'function' && txSucceeded){\n        this.props.callbackDeposit(tx);\n      }\n    };\n\n    const callbackReceiptDeposit = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.migrationContract.name;\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n    const depositParams = await this.getMigrationParams(_amount);\n\n    this.props.contractMethodSendWrapper(contractName, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  cancelTransaction = async () => {\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  async getMigrationParams(toMigrate){\n    const migrationParams = [];\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.selectedToken]);\n\n    if (!curveTokenConfig){\n      return false;\n    }\n    \n    const migrationContractParams = curveTokenConfig.migrationParams;\n    if (migrationContractParams.n_coins){\n      const amounts = await this.functionsUtil.getCurveAmounts(this.props.selectedToken,toMigrate,true);\n      let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n\n      if (this.state.maxSlippage){\n        minMintAmount = this.functionsUtil.BNify(minMintAmount);\n        minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n        minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n      }\n\n      migrationParams.push(amounts);\n      migrationParams.push(minMintAmount);\n    }\n\n    return migrationParams;\n  }\n\n  async calculateSlippage(){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (inputValue){\n      let underlyingBalanceToDeposit = inputValue;\n      if (underlyingBalanceToDeposit){\n        const idleTokenPrice = await this.functionsUtil.getIdleTokenPrice(this.props.tokenConfig);\n        if (idleTokenPrice){\n          underlyingBalanceToDeposit = underlyingBalanceToDeposit.times(idleTokenPrice);\n        }\n      } else {\n        underlyingBalanceToDeposit = this.functionsUtil.BNify(0);\n      }\n\n      const normalizeIdleTokenBalance = this.functionsUtil.normalizeTokenAmount(underlyingBalanceToDeposit,this.props.tokenConfig.decimals);\n      let depositSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizeIdleTokenBalance);\n      if (depositSlippage){\n        depositSlippage = depositSlippage.times(100);\n      }\n\n      this.setState({\n        depositSlippage\n      });\n    }\n  }\n\n  async checkMigrationContractApproved(){\n    const migrationContract = this.state.migrationContract || await this.functionsUtil.getCurveSwapContract();\n    if (migrationContract){\n      return await this.functionsUtil.checkTokenApproved(this.props.tokenConfig.idle.token,migrationContract.address,this.props.account);\n    }\n    return false;\n  }\n\n  async initToken(){\n\n    // Init and check migration contract\n    const migrationContract = await this.functionsUtil.getCurveSwapContract();\n    const migrationContractApproved = await this.checkMigrationContractApproved();\n\n    this.setState({\n      migrationContract,\n      migrationContractApproved\n    });\n  }\n\n  approveCallback = () => {\n    this.initToken();\n  }\n\n  migrationCallback = () => {\n    this.setState({\n      migrationSucceeded:true\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken){\n      return null;\n    }\n\n    // const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const hasCurveTokens = this.state.curveTokensBalance && this.state.curveTokensBalance.gt(0);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n            {\n              this.props.idleTokenBalance && this.props.idleTokenBalance.gt(0) && (\n                <Box\n                  width={1}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:3,\n                      px:[2,4]\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    > \n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ this.state.migrationContractApproved ? 'CheckBox' : 'LooksOne'}\n                          color={ this.state.migrationContractApproved ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Approve the Curve contract\n                        </Text>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ hasCurveTokens ? 'CheckBox' : 'LooksTwo'}\n                          color={ hasCurveTokens ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Deposit your {this.props.tokenConfig.idle.token}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  {\n                    !this.state.migrationContractApproved ?\n                      this.state.processing.loading ? (\n                        <Flex\n                          mt={3}\n                          flexDirection={'column'}\n                        >\n                          <TxProgressBar\n                            web3={this.props.web3}\n                            waitText={`Approve estimated in`}\n                            hash={this.state.processing.txHash}\n                            endMessage={`Finalizing approve request...`}\n                            cancelTransaction={this.cancelTransaction.bind(this)}\n                          />\n                        </Flex>\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'LockOpen'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              To deposit your {this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={this.approve.bind(this)}\n                            >\n                              Approve\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    : this.state.processing.loading ? (\n                      <Flex\n                        mt={3}\n                        flexDirection={'column'}\n                      >\n                        <TxProgressBar\n                          web3={this.props.web3}\n                          waitText={`Deposit estimated in`}\n                          hash={this.state.processing.txHash}\n                          endMessage={`Finalizing deposit request...`}\n                          cancelTransaction={this.cancelTransaction.bind(this)}\n                        />\n                      </Flex>\n                    ) : (\n                      <Box\n                        mt={2}\n                        width={1}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text>\n                            Choose max slippage:\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={`Max additional slippage on top of the one shown below`}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                        >\n                          {\n                            [0.2,0.5,1,5].map( slippage => (\n                              <FastBalanceSelector\n                                cardProps={{\n                                  p:1\n                                }}\n                                textProps={{\n                                  fontSize:1\n                                }}\n                                percentage={slippage}\n                                key={`selector_${slippage}`}\n                                onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                isActive={this.state.maxSlippage === parseFloat(slippage)}\n                              />\n                            ))\n                          }\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          <Flex\n                            mb={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={this.state.depositSlippage ? 'space-between' : 'flex-end'}\n                          >\n                            {\n                              this.state.depositSlippage && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    textAlign={'right'}\n                                    style={{\n                                      whiteSpace:'nowrap'\n                                    }}\n                                    color={ parseFloat(this.state.depositSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                  >\n                                    {\n                                      parseFloat(this.state.depositSlippage.toFixed(3)) === 0 ?\n                                        'No Slippage'\n                                      : `${ this.state.depositSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositSlippage.abs().toFixed(3)}%`\n                                    }\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.state.depositSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              )\n                            }\n                            {\n                              this.props.idleTokenBalance && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'flex-end'}\n                                >\n                                  <Link\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'right'}\n                                    hoverColor={'copyColor'}\n                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                    style={{\n                                      maxWidth:'100%',\n                                      overflow:'hidden',\n                                      whiteSpace:'nowrap',\n                                      textOverflow:'ellipsis'\n                                    }}\n                                  >\n                                    {this.props.idleTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {this.props.selectedToken}\n                                  </Link>\n                                </Flex>\n                              )\n                            }\n                          </Flex>\n                          <Input\n                            min={0}\n                            type={\"number\"}\n                            required={true}\n                            height={'3.4em'}\n                            borderRadius={2}\n                            fontWeight={500}\n                            boxShadow={'none !important'}\n                            placeholder={`Insert amount`}\n                            onChange={this.changeInputValue.bind(this)}\n                            border={`1px solid ${this.props.theme.colors.divider}`}\n                            value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                          />\n                          <Flex\n                            mt={2}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            {\n                              [25,50,75,100].map( percentage => (\n                                <FastBalanceSelector\n                                  percentage={percentage}\n                                  key={`selector_${percentage}`}\n                                  onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                  isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                                />\n                              ))\n                            }\n                          </Flex>\n                          <Flex\n                            mt={2}\n                            justifyContent={'center'}\n                          >\n                            <RoundButton\n                              buttonProps={{\n                                mt:2,\n                                width:[1,1/2],\n                                disabled:this.state.buttonDisabled\n                              }}\n                              handleClick={this.deposit.bind(this)}\n                            >\n                              Deposit\n                            </RoundButton>\n                          </Flex>\n                        </Flex>\n                      </Box>\n                    )\n                  }\n                </Box>\n              )\n            }\n          {\n            /*\n            this.state.tokenConfig && this.state.redeemableBalance ? (\n              <Box width={1}>\n                <Migrate\n                  {...this.props}\n                  showActions={false}\n                  getTokenPrice={false}\n                  migrationTextProps={{\n                    fontWeight:500\n                  }}\n                  isMigrationTool={true}\n                  migrationImage={{\n                    mb:1,\n                    height:'1.8em',\n                    src:curveConfig.params.image\n                  }}\n                  showBalanceSelector={true}\n                  waitText={'Deposit estimated in'}\n                  tokenConfig={this.state.tokenConfig}\n                  callbackApprove={this.approveCallback.bind(this)}\n                  migrationParams={this.getMigrationParams.bind(this)}\n                  migrationCallback={this.migrationCallback.bind(this)}\n                  approveText={`To deposit your ${this.props.tokenConfig.idle.token} you need to approve Curve smart-contract first.`}\n                  migrationText={`You can deposit ${this.state.redeemableBalance.toFixed(4)} ${this.props.tokenConfig.idle.token} in the Curve Pool${ this.state.depositSlippage ? (this.state.depositSlippage.gte(0) ? ` with <span style=\"color:${this.props.theme.colors.transactions.status.failed}\">${this.state.depositSlippage.times(100).toFixed(2)}% of slippage</span>` : ` with <span style=\"color:${this.props.theme.colors.transactions.status.completed}\">${Math.abs(parseFloat(this.state.depositSlippage.times(100).toFixed(2)))}% of bonus</span>`) : '' }.`}\n                >\n                  {\n                    !this.props.account ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Input'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Please connect with your wallet interact with Idle.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:2,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.props.connectAndValidateAccount}\n                          >\n                            Connect\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3\n                        }}\n                      >\n                        {\n                          this.state.migrationSucceeded ? (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'DoneAll'}\n                                color={this.props.theme.colors.transactions.status.completed}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You have successfully deposited your {this.props.tokenConfig.idle.token} in the Curve Pool!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'MoneyOff'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You don't have any {this.props.tokenConfig.idle.token} in your wallet.\n                              </Text>\n                            </Flex>\n                          )\n                        }\n                      </DashboardCard>\n                    )\n                  }\n                </Migrate>\n              </Box>\n            ) : null\n            */\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveDeposit;","import theme from '../theme';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\n// import { linearGradientDef } from '@nivo/core'\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport ChartCustomTooltip from '../ChartCustomTooltip/ChartCustomTooltip';\nimport ChartCustomTooltipRow from '../ChartCustomTooltipRow/ChartCustomTooltipRow';\n\nclass PortfolioEquityCurve extends Component {\n  state = {\n    startDate:null,\n    chartData:null,\n    chartProps:null,\n    chartwidth:null,\n    chartHeight:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const quickDateSelectionChanged = prevProps.quickDateSelection !== this.props.quickDateSelection;\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n    if (tokenChanged || quickDateSelectionChanged){\n      this.setState({\n        chartData:null\n      },() => {\n        this.componentDidMount();\n      });\n    }\n\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (mobileChanged){\n      this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const curveTxs = await this.functionsUtil.getCurveTxs(this.props.account,0,'latest',enabledTokens);\n\n    const chartData = [];\n    let tokensBalance = [];\n    const processedTxs = {};\n    let firstTxTimestamp = null;\n    let totalBalance = this.functionsUtil.BNify(0);\n    const curvePoolContract = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    if (curveTxs && curveTxs.length){\n\n      curveTxs.forEach((tx,index) => {\n\n        if (!processedTxs[tx.hash]){\n          processedTxs[tx.hash] = [];\n        }\n\n        if (processedTxs[tx.hash].includes(tx.action)){\n          return;\n        }\n        \n        firstTxTimestamp = firstTxTimestamp ? Math.min(firstTxTimestamp,parseInt(tx.timeStamp)) : parseInt(tx.timeStamp);\n\n        const curveTokens = this.functionsUtil.BNify(tx.curveTokens);\n\n        switch (tx.action){\n          case 'CurveIn':\n          case 'CurveZapIn':\n          case 'CurveDepositIn':\n          case 'CurveTransferIn':\n            totalBalance = totalBalance.plus(curveTokens);\n          break;\n          case 'CurveOut':\n          case 'CurveZapOut':\n          case 'CurveDepositOut':\n          case 'CurveTransferOut':\n            totalBalance = totalBalance.minus(curveTokens);\n          break;\n          default:\n          break;\n        }\n\n        // Reset totalBalance if below zero\n        if (totalBalance.lt(0)){\n          totalBalance = this.functionsUtil.BNify(0);\n        }\n\n        const action = tx.action;\n        const balance = totalBalance;\n        const timeStamp = parseInt(tx.timeStamp);\n        const curveTokenPrice = this.functionsUtil.fixTokenDecimals(tx.curveTokenPrice,curvePoolContract.decimals);\n\n        // console.log(this.functionsUtil.strToMoment(timeStamp*1000).format('YYYY/MM/DD HH:mm'),tx.hash,tx.action,curveTokens.toString(),totalBalance.toString());\n\n        if (!curveTokenPrice.isNaN() && !curveTokenPrice.isNaN()){\n          tokensBalance.push({\n            action,\n            balance,\n            timeStamp,\n            curveTokens,\n            curveTokenPrice\n          });\n\n          processedTxs[tx.hash].push(action);\n        }\n      });\n    }\n\n    // Calculate Start Date\n    let startDate = null;\n    const currentDate = this.functionsUtil.strToMoment(new Date());\n\n    switch (this.props.quickDateSelection){\n      case 'week':\n        startDate = currentDate.clone().subtract(1,'week');\n      break;\n      case 'month':\n        startDate = currentDate.clone().subtract(1,'month');\n      break;\n      case 'month3':\n        startDate = currentDate.clone().subtract(3,'month');\n      break;\n      case 'month6':\n        startDate = currentDate.clone().subtract(6,'month');\n      break;\n      default:\n        startDate = null;\n      break;\n    }\n\n    const days = {};\n    let prevBalances = {};\n    let prevTimestamp = null;\n    let minChartValue = null;\n    let maxChartValue = null;\n    const aggregatedBalancesKeys = {};\n    const tokensBalancesPerDate = {};\n    let aggregatedBalance = this.functionsUtil.BNify(0);\n    // let curveTokenBalance = this.functionsUtil.BNify(0);\n    const currTimestamp = parseInt(new Date().getTime()/1000)+86400;\n\n    const tokensData = await this.functionsUtil.getTokenApiData(Object.values(this.props.availableTokens)[0].address,false,firstTxTimestamp,null,false,3600);\n\n    for (let timeStamp=firstTxTimestamp;timeStamp<=currTimestamp;timeStamp+=this.props.frequencySeconds){\n\n      let foundBalances = {};\n      let tokensBalances = {};\n      timeStamp = Math.min(currTimestamp,timeStamp);\n      let momentDate = this.functionsUtil.strToMoment(timeStamp*1000);\n\n      // eslint-disable-next-line\n      const filteredTokenData = tokensData.filter(tx => (tx.timestamp>=prevTimestamp && tx.timestamp<=timeStamp));\n\n      // eslint-disable-next-line\n      let filteredBalances = tokensBalance.filter(tx => (tx.timeStamp<=timeStamp && (!prevTimestamp || tx.timeStamp>prevTimestamp)));\n      \n      if (!filteredBalances.length){\n        if (prevBalances){\n          filteredBalances = prevBalances;\n          const lastFilteredTx = Object.values(filteredBalances).pop();\n          const currentBalance = parseFloat(lastFilteredTx.balance);\n\n          const lastTokenData = Object.values(filteredTokenData).pop();\n          let curveTokenPrice = null;\n          if (lastTokenData){\n            curveTokenPrice = await this.functionsUtil.getCurveTokenPrice(lastTokenData.blocknumber);\n          }\n\n          // Take idleToken price from API and calculate new balance\n          if (currentBalance>0 && timeStamp>firstTxTimestamp && curveTokenPrice){\n            // Set new curveTokenPrice\n            lastFilteredTx.curveTokenPrice = curveTokenPrice;\n            filteredBalances = [lastFilteredTx];\n          }\n        } else {\n          filteredBalances = [{\n            balance:this.functionsUtil.BNify(0),\n            curveTokenPrice:this.functionsUtil.BNify(0)\n          }];\n        }\n      }\n\n      const lastTx = Object.assign([],filteredBalances).pop();\n      let lastTxBalance = this.functionsUtil.BNify(lastTx.balance).times(lastTx.curveTokenPrice);\n\n      tokensBalances[curvePoolContract.token] = this.functionsUtil.BNify(lastTx.balance);\n      aggregatedBalance = lastTxBalance;\n\n      foundBalances = filteredBalances;\n\n      // console.log(momentDate.format('YYYY/MM/DD 00:00'),lastTx.balance.toString(),lastTx.curveTokenPrice.toString(),lastTxBalance.toString());\n\n      if (startDate === null || momentDate.isSameOrAfter(startDate)){\n        \n        if (momentDate.isAfter(new Date(),'day')){\n          momentDate = this.functionsUtil.strToMoment(new Date());\n        }\n\n        // Force date to midnight\n        const formattedDate = momentDate.format('YYYY/MM/DD 00:00');\n\n        // Save days for axisBottom format\n        days[momentDate.format('YYYY/MM/DD')] = 1;\n\n        const aggregatedBalanceParsed = parseFloat(parseFloat(aggregatedBalance.toFixed(6)));\n\n        aggregatedBalancesKeys[formattedDate] = aggregatedBalanceParsed;\n        tokensBalancesPerDate[formattedDate] = tokensBalances;\n\n        // console.log(formattedDate,tokensBalances);\n\n        minChartValue = minChartValue === null ? aggregatedBalanceParsed : Math.min(minChartValue,aggregatedBalanceParsed);\n        maxChartValue = maxChartValue === null ? aggregatedBalanceParsed : Math.max(maxChartValue,aggregatedBalanceParsed);\n      }\n\n      prevTimestamp = timeStamp;\n      prevBalances = foundBalances;\n    }\n\n    const aggregatedBalances = Object.keys(aggregatedBalancesKeys).map(date => ({\n      x:date,\n      y:aggregatedBalancesKeys[date],\n      balances:tokensBalancesPerDate[date]\n    }));\n\n    let itemIndex = 0;\n    aggregatedBalances.forEach( (item,index) => {\n      const itemPos = Math.floor(itemIndex/aggregatedBalances.length*100);\n      aggregatedBalances[index].itemPos = itemPos;\n      itemIndex++;\n    });\n\n    /*\n    aggregatedBalances.push({\n      x:momentDate.format('YYYY/MM/DD HH:mm'),\n      y:aggregatedBalance\n    });\n    */\n\n    // Add day before to start with zero balance\n    /*\n    const firstTxMomentDate = this.functionsUtil.strToMoment(firstTxTimestamp*1000);\n    if ((startDate === null || startDate.isSameOrBefore(firstTxMomentDate)) && aggregatedBalances.length){\n      const firstItem = aggregatedBalances[0];\n      const firstDate = this.functionsUtil.strToMoment(firstItem.x,'YYYY/MM/DD HH:mm');\n      firstDate.subtract(1,'day');\n      aggregatedBalances.unshift({\n        x:firstDate.format('YYYY/MM/DD HH:mm'),\n        y:0\n      });\n    }\n    */\n\n    // Add token Data\n    chartData.push({\n      id:'USD',\n      color: 'hsl('+ this.functionsUtil.getGlobalConfig(['stats','tokens','USD','color','hsl']).join(',')+')',\n      data:aggregatedBalances\n    });\n\n    let yFormatDecimals = 2;\n    if (maxChartValue-minChartValue<1){\n      yFormatDecimals = 4;\n    }\n\n    if (maxChartValue === minChartValue){\n      minChartValue = Math.max(0,maxChartValue-1);\n    }\n\n    const maxGridLines = 5;\n    const gridYStep = (maxChartValue-minChartValue)/maxGridLines;\n    const gridYValues = [];\n    for (let i=0;i<=maxGridLines;i++){\n      const gridYValue = parseFloat(parseFloat(minChartValue+(i*gridYStep)).toFixed(6));\n      gridYValues.push(gridYValue);\n    }\n    \n    const axisBottomMaxValues = 10;\n    const daysCount = Object.values(days).length;    \n    const daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n    const chartProps = {\n      xScale:{\n        type: 'time',\n        format: '%Y/%m/%d %H:%M',\n      },\n      yScale:{\n        type: 'linear',\n        stacked: false,\n        min: minChartValue,\n        max: maxChartValue\n      },\n      xFormat:'time:%b %d %Y',\n      yFormat:value => this.functionsUtil.formatMoney(value,yFormatDecimals),\n      axisBottom: this.props.isMobile ? null : {\n        legend: '',\n        tickSize:0,\n        format: '%b %d',\n        tickPadding: 15,\n        orient: 'bottom',\n        legendOffset: 36,\n        legendPosition: 'middle',\n        tickValues:'every '+daysFrequency+' days'\n      },\n      gridYValues,\n      pointSize:0,\n      useMesh:true,\n      axisLeft: this.props.isMobile ? null : {\n        legend: '',\n        tickSize: 0,\n        orient: 'left',\n        tickPadding: 10,\n        tickRotation: 0,\n        legendOffset: -70,\n        tickValues:gridYValues,\n        legendPosition: 'middle',\n        format: v => this.functionsUtil.abbreviateNumber(v,2),\n      },\n      animate:true,\n      pointLabel:'y',\n      areaOpacity:0.1,\n      enableArea:true,\n      enableSlices:'x',\n      enableGridY:true,\n      curve:'monotoneX',\n      enableGridX:false,\n      pointBorderWidth:1,\n      colors:d => d.color,\n      pointLabelYOffset:-12,\n      areaBaselineValue:minChartValue,\n      pointColor:{ from: 'color', modifiers: []},\n      theme:{\n        axis: {\n          ticks: {\n            text: {\n              fontSize:12,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '8 4'\n          }\n        },\n      },\n      /*\n      defs:[\n        linearGradientDef('gradientA', [\n          { offset: 0, color: 'inherit' },\n          { offset: 100, color: 'inherit', opacity: 0 },\n        ]),\n      ],\n      fill:[{ match: '*', id: 'gradientA' }],\n      */\n      margin: this.props.isMobile ? { top: 20, right: 25, bottom: 25, left: 20 } : { top: 30, right: 50, bottom: 45, left: 50 },\n      sliceTooltip:(slideData) => {\n        const { slice } = slideData;\n        const point = slice.points[0];\n        return (\n          <ChartCustomTooltip\n            point={point}\n          >\n            <ChartCustomTooltipRow\n              color={point.color}\n              label={point.serieId}\n              value={`$ ${point.data.yFormatted}`}\n            />\n            {\n            typeof point.data.balances === 'object' && Object.keys(point.data.balances).length>0 &&\n              Object.keys(point.data.balances).map(token => {\n                if (token === point.serieId){\n                  return null;\n                }\n                const tokenInfo = this.functionsUtil.getGlobalConfig(['stats','tokens',token]);\n                if (tokenInfo){\n                  const tokenName = tokenInfo.name ? tokenInfo.name : token;\n                  const color = tokenInfo.color.hex;\n                  const balance = point.data.balances[token];\n                  let formattedBalance = this.functionsUtil.formatMoney(balance,2);\n                  if (parseFloat(balance)>=0.01){\n                    return (\n                      <ChartCustomTooltipRow\n                        label={tokenName}\n                        color={color}\n                        key={`row_${token}`}\n                        value={`${formattedBalance}`}\n                      />\n                    );\n                  }\n                }\n                return null;\n              })\n            }\n          </ChartCustomTooltip>\n        );\n      }\n    };\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  render() {\n    return (\n      <GenericChart\n        type={Line}\n        showLoader={true}\n        {...this.state.chartProps}\n        data={this.state.chartData}\n        parentId={this.props.parentId}\n        height={this.props.chartHeight}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default PortfolioEquityCurve;","import theme from '../theme';\nimport Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquityCurve from '../PortfolioEquityCurve/PortfolioEquityCurve';\n\nclass FundsOverviewCurve extends Component {\n\n  state = {\n    compAPR:null,\n    aggregatedValues:[],\n    govTokensUserBalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    await this.functionsUtil.getCurveAvgBuyPrice();\n\n    // debugger;\n\n    await this.functionsUtil.getCurveAvgSlippage();\n\n    // debugger;\n    /*\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [govTokensUserBalance,avgAPY,days] = await Promise.all([\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,'DAI'),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    let [tokenAllocation,compAPR] = await Promise.all([\n      this.functionsUtil.getTokenAllocation(this.props.tokenConfig,false,false),\n      this.functionsUtil.getCompAPR(this.props.selectedToken,this.props.tokenConfig)\n    ]);\n\n    if (tokenAllocation){\n      const compoundInfo = this.props.tokenConfig.protocols.find( p => (p.name === 'compound') );\n      if (compoundInfo){\n        if (tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()]){\n          const compoundAllocationPerc = tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()];\n          compAPR = compAPR.times(compoundAllocationPerc);\n        }\n      }\n    }\n\n    this.setState({\n      compAPR,\n      aggregatedValues,\n      govTokensUserBalance\n    });\n    */\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquityCurve\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLentCurve',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPercCurve',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Fees\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'feesCounter',\n                    props:{\n                      decimals:7,\n                      maxPrecision:8,\n                      style:{\n                        fontWeight:300,\n                        fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                        color:theme.colors.counter\n                      },\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveApy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Avg Slippage\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveAvgSlippage',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverviewCurve;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport { Box, Flex, Text, Icon } from \"rimble-ui\";\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport CurveDeposit from '../CurveDeposit/CurveDeposit';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport FundsOverviewCurve from '../FundsOverviewCurve/FundsOverviewCurve';\n\nclass AssetPage extends Component {\n\n  state = {\n    inputValue:{},\n    processing:{},\n    tokenFees:null,\n    canRedeem:null,\n    canDeposit:null,\n    action:'deposit',\n    activeModal:null,\n    tokenConfig:null,\n    tokenBalance:null,\n    tokenApproved:null,\n    selectedToken:null,\n    availableTokens:{},\n    redeemBalance:null,\n    depositBalance:null,\n    buttonDisabled:false,\n    curveTokenPrice:null,\n    depositSlippage:null,\n    idleTokenBalance:null,\n    withdrawSlippage:null,\n    govTokensBalance:null,\n    curveZapContract:null,\n    curveTokenConfig:null,\n    curveTokensAmounts:{},\n    govTokensDisabled:null,\n    componentMounted:false,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    redeemableBalance:null,\n    fastBalanceSelector:{},\n    curveAvailableTokens:{},\n    tokenFeesPercentage:null,\n    redeemUnevenAmounts:false,\n    curveDepositContract:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  changeFromToken = (selectedToken) => {\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    this.props.goToSection(`${curveConfig.params.route}/${selectedToken}`);\n  }\n\n  getSelectedToken(){\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    return this.props.urlParams.param1 && curveAvailableTokens[this.props.urlParams.param1] ? this.props.urlParams.param1 : Object.keys(curveAvailableTokens)[0];\n  }\n\n  setSelectedToken = async (selectedToken) => {\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n    this.setState({\n      tokenConfig,\n      selectedToken,\n      availableTokens,\n      curveTokenConfig\n    });\n  }\n\n  loadTokensInfo = async () => {\n\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    this.setState({\n      curveAvailableTokens\n    });\n\n    const selectedToken = this.getSelectedToken();\n    // Check if token is set the query params\n    if (selectedToken && selectedToken !== this.props.urlParams.param1){\n      this.changeFromToken(selectedToken);\n      return await this.setSelectedToken(selectedToken);\n    } else if (selectedToken !== this.state.selectedToken){\n      await this.setSelectedToken(selectedToken);\n    }\n\n    const newState = {...this.state};\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n\n    if (newState.selectedToken !== selectedToken){\n      newState.selectedToken = selectedToken;\n    }\n\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n\n    const [\n      curveZapContract,\n      curvePoolContract,\n      curveSwapContract,\n      curveDepositContract\n    ] = await Promise.all([\n      this.functionsUtil.getCurveZapContract(),\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract()\n    ]);\n\n    newState.curveZapContract = curveZapContract;\n    newState.curvePoolContract = curvePoolContract;\n    newState.curveSwapContract = curveSwapContract;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.availableTokens = availableTokens;\n\n\n    // console.log('curveTokenPrice',newState.curveTokenPrice.toFixed(6),'curveTokenBalance',newState.curveTokenBalance.toFixed(6),'redeemableBalance',newState.redeemableBalance.toFixed(20),'tokenBalance',newState.tokenBalance.toFixed(20));\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[selectedToken] = tokenConfig;\n\n    newState.tokenConfig = tokenConfig;\n    newState.curveTokenConfig = curveTokenConfig;\n\n    if (this.props.account){\n      [\n        newState.curveTokenPrice,\n        newState.curveTokenBalance,\n        newState.tokenFeesPercentage,\n        newState.tokenFees,\n        newState.tokenBalance,\n        newState.idleTokenBalance,\n        newState.tokenApproved,\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokenPrice(),\n        this.functionsUtil.getCurveTokenBalance(),\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(selectedToken,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(selectedToken,curveDepositContract.address,this.props.account),\n      ]);\n\n\n      newState.processing = {\n        redeem:{\n          txHash:null,\n          loading:false\n        },\n        deposit:{\n          txHash:null,\n          loading:false\n        },\n        approve:{\n          txHash:null,\n          loading:false\n        },\n      };\n      newState.inputValue = {\n        redeem:null,\n        deposit:null\n      };\n      newState.fastBalanceSelector = {\n        redeem:null,\n        deposit:null\n      };\n\n      newState.componentMounted = true;\n      newState.depositBalance = newState.tokenBalance;\n      newState.redeemBalance = newState.redeemableBalance;\n      newState.govTokensDisabled = tokenConfig.govTokensDisabled;\n      newState.canRedeem = newState.curveTokenBalance && newState.curveTokenBalance.gt(0);\n      newState.canDeposit = newState.idleTokenBalance && newState.idleTokenBalance.gt(0);\n      newState.redeemableBalance = newState.curveTokenBalance ? newState.curveTokenBalance.times(newState.curveTokenPrice) : this.functionsUtil.BNify(0);\n    }\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async calculateSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,this.state.curvePoolContract.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositBalance = amount;\n        newState.depositSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        newState.redeemBalance = amount;\n        newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.urlParams.param1 !== this.props.urlParams.param1;\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n\n    if (accountChanged || transactionsChanged || tokenChanged){\n      await this.loadTokensInfo();\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const redeemUnevenAmountsChanged = this.state.redeemUnevenAmounts !== prevState.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n    if (actionChanged || fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    if (actionChanged){\n      this.updateAssetSelector();\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  updateAssetSelector = async () => {\n    const newState = {};\n    switch (this.state.action){\n      case 'deposit':\n        this.loadTokensInfo();\n      break;\n      case 'redeem':\n        // this.loadTokensInfo();\n        const tokenConfig = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n        newState.curveAvailableTokens = {};\n        newState.curveTokenConfig = tokenConfig;\n        newState.selectedToken = tokenConfig.token;\n        newState.curveAvailableTokens[tokenConfig.token] = tokenConfig;\n      break;\n      default:\n      break;\n    }\n\n    this.setState(newState);\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.state.tokenBalance ? this.functionsUtil.BNify(this.state.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          amount = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n        } else {\n          amount = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.state.tokenBalance));\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.curveTokenBalance)) );\n        } else {\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.redeemableBalance)) );\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = this.state.tokenApproved;\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.state.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.functionsUtil.enableERC20(this.state.selectedToken,this.state.curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      // Handle deposit in curve\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.state.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,tokensToDeposit);\n        const minMintAmount = await this.functionsUtil.genericContractCall(this.state.curveSwapContract.name,'calc_token_amount',[amounts,true]);\n        const depositParams = [amounts,minMintAmount];\n\n        // No need for callback atm\n        contractSendResult = await this.props.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n      break;\n      case 'redeem':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        let curveTokensToRedeem = null;\n        if (selectedPercentage){\n          curveTokensToRedeem = this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage);\n        } else {\n          curveTokensToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals));\n          if (!this.state.redeemUnevenAmounts){\n            const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n            curveTokensToRedeem = curveTokensToRedeem.div(curveTokenPrice);\n          }\n        }\n\n        if (!curveTokensToRedeem){\n          return false;\n        }\n\n        const callbackRedeem = (tx,error) => {\n          const txSucceeded = tx.status === 'success';\n\n          // Send Google Analytics event\n          const eventData = {\n            eventLabel: tx.status,\n            eventCategory: `CurveRedeem`,\n            eventAction: this.state.selectedToken,\n            eventValue: curveTokensToRedeem.toFixed()\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          }\n        };\n\n        const callbackReceiptRedeem = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const _amount = this.functionsUtil.normalizeTokenAmount(curveTokensToRedeem,this.state.curvePoolContract.decimals).toString();\n        let min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,0);\n\n        const contractName = this.state.curveDepositContract.name;\n        if (this.state.redeemUnevenAmounts){\n          console.log('remove_liquidity_imbalance',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_imbalance', [min_amounts, _amount], null, callbackRedeem, callbackReceiptRedeem);\n        } else {\n          min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,_amount);\n          console.log('remove_liquidity',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts], null, callbackRedeem, callbackReceiptRedeem);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    // console.log('contractSendResult',contractSendResult);\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    const userHasFunds = this.props.account && this.state.curveTokenBalance && this.functionsUtil.BNify(this.state.curveTokenBalance).gt(0);\n    const canPerformAction = true;\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            {\n              <Breadcrumb\n                {...this.props}\n                isMobile={this.props.isMobile}\n                path={['Boost',this.state.selectedToken]}\n                handleClick={ e => this.props.goToSection('best') }\n                text={this.functionsUtil.getGlobalConfig(['strategies','best','title'])}\n              />\n            }\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Curve Pool\n        </Title>\n        <Flex\n          width={1}\n        >\n          <Flex\n            width={1}\n            alignItems={'center'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <Flex\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Box\n                width={1}\n              >\n                <Text\n                  mb={1}\n                >\n                  Select your asset:\n                </Text>\n                <AssetSelector\n                  {...this.props}\n                  id={'token-from'}\n                  onChange={this.changeFromToken}\n                  selectedToken={this.state.selectedToken}\n                  tokenConfig={this.state.curveTokenConfig}\n                  showBalance={this.state.action === 'deposit'}\n                  availableTokens={this.state.curveAvailableTokens}\n                />\n              </Box>\n              <Box\n                width={1}\n              >\n                {\n                  canPerformAction ? (\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text\n                        mb={2}\n                      >\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isDisabled={ !this.state.canRedeem }\n                          isActive={ this.state.action === 'redeem' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                  ) : (\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    >\n                      <Icon\n                        size={'2.3em'}\n                        name={'MoneyOff'}\n                        color={'cellText'}\n                      />\n                      <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                      >\n                        You don't have any {this.state.tokenConfig.idle.token} in your wallet.\n                      </Text>\n                    </Flex>\n                  )\n                }\n              </Box>\n            </Flex>\n            <Flex\n              width={1}\n              mt={ this.props.account ? 3 : 0 }\n            >\n            {\n              this.state.action === 'deposit' ? (\n                <CurveDeposit\n                  {...this.props}\n                  {...this.state}\n                />\n              ) : this.state.action === 'redeem' && (\n                <CurveRedeem\n                  {...this.props}\n                  {...this.state}\n                />\n              )\n            }\n            </Flex>\n          </Flex>\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverviewCurve\n                {...this.props}\n                tokenFees={this.state.tokenFees}\n                tokenConfig={this.state.tokenConfig}\n                selectedToken={this.state.selectedToken}\n                availableTokens={this.state.availableTokens}\n                enabledTokens={Object.keys(this.state.availableTokens)}\n              />\n            </Flex>\n        }\n        {\n          /*\n          this.props.account && !this.state.govTokensDisabled[this.state.selectedToken] && Object.keys(availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id=\"earnings-estimation\"\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(availableGovTokens)}\n                handleClick={(props) => {}}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.33,0.22]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.26],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    props:{\n                      width:[0.33,0.26],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                      {\n                        name:'tooltip',\n                        props:{\n                          placement:'bottom',\n                          message:'The shown balance may be lower than the real one.',\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    mobile:false,\n                    props:{\n                      width: 0.26,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                ]}\n                {...this.props}\n                availableTokens={availableGovTokens}\n              />\n            </Flex>\n          */\n        }\n        {\n          /*\n          this.props.account && \n            <Flex\n              mb={[3,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'estimated-earnings-container'}\n            >\n              <Title my={[3,4]}>Estimated earnings</Title>\n              <EstimatedEarnings\n                {...this.props}\n              />\n            </Flex>\n          */\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              availableTokens={this.state.availableTokens}\n              enabledTokens={Object.keys(this.state.availableTokens)}\n              enabledActions={['CurveIn','CurveOut','CurveZapIn','CurveZapOut','CurveTransferIn','CurveTransferOut','CurveDepositIn','CurveDepositOut']}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.state.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport ExtLink from '../../ExtLink/ExtLink.js';\nimport { Text, Modal, Flex, Link } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass PolygonModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.functionsUtil.setLocalStorage('polygonApproved',true);\n    this.props.closeModal();\n  }\n\n  render() {\n    const polygonBridgeInfo = this.functionsUtil.getGlobalConfig(['tools','polygonBridge']);\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'2em'}\n            title={'Welcome to Idle <> Polygon'}\n            icon={'images/protocols/polygon.svg'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                You're about to enter Idle Finance in the Polygon Network, make sure to have some <ExtLink color={'link'} fontSize={2} href={this.functionsUtil.getEtherscanAddressUrl(this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.currentNetwork.baseToken,'address']))}>{this.props.currentNetwork.baseToken}</ExtLink> tokens in your wallet to send your transactions! Also you can use our <Link color={'link'} fontSize={2} mainColor={'link'} onClick={ e => this.props.goToSection(`tools/${polygonBridgeInfo.route}/MATIC`)}>{polygonBridgeInfo.label}</Link> to transfer your tokens from Mainnet to Polygon.<br />If you are not confident with this just switch to Mainnet using your wallet provider.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Let Me In\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default PolygonModal;","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Button,\n  Form,\n  Icon,\n  Flex,\n  Link\n} from \"rimble-ui\";\nimport axios from 'axios';\nimport colors from '../../colors';\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\nimport globalConfigs from '../../configs/globalConfigs';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass WelcomeModal extends React.Component {\n\n  state = {\n    email:null,\n    error:false,\n    subscribed:false,\n    sendingForm:false\n  };\n\n  functionsUtil = null;\n\n  constructor(props) {\n    super(props);\n    this.functionsUtil = new FunctionsUtil(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleValidation = this.handleValidation.bind(this);\n  }\n\n  componentDidUpdate = async () => {\n    this.functionsUtil.setProps(this.props);\n  }\n\n  sendUserInfo = (sendEmail=true) => {\n    const walletProvider = this.functionsUtil.getWalletProvider();\n    const userInfo = {\n      address: this.props.account,\n      provider: walletProvider\n    };\n\n    if (sendEmail && this.state.email !== null){\n      userInfo.email = this.state.email;\n    }\n\n    this.functionsUtil.simpleIDPassUserInfo(userInfo);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (!this.state.email){\n      return false;\n    }\n\n    const callback = () => {\n      this.setState({\n        sendingForm:false,\n        subscribed:true\n      });\n      window.setTimeout(this.props.closeModal,2500);\n    };\n\n    this.sendUserInfo();\n\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'send_email',\n      eventLabel: 'WelcomeModal'\n    });\n\n    axios.post(globalConfigs.newsletterSubscription.endpoint, {\n      'email': this.state.email\n    }).then(r => {\n      callback();\n    })\n    .catch(err => {\n      callback();\n    });\n\n    // Set signedUp in the localStorage\n    if (localStorage){\n      const walletAddress = this.props.account.toLowerCase();\n      let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : null;\n      if (lastLogin && lastLogin[walletAddress] && !lastLogin[walletAddress].signedUp){\n        lastLogin[walletAddress].signedUp = true;\n        this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n      }\n    }\n\n    this.setState({\n      sendingForm:true\n    })\n  };\n\n  closeModal = async () => {\n\n    const closeModal = () => {\n      this.props.closeModal();\n    };\n\n    try{\n      // Prevent sending email\n      this.sendUserInfo(false);\n\n      // Send Google Analytics event\n      if (globalConfigs.analytics.google.events.enabled){\n        this.functionsUtil.sendGoogleAnalyticsEvent({\n          eventCategory: 'UI',\n          eventAction: 'continue_without_email',\n          eventLabel: 'WelcomeModal'\n        },closeModal);\n\n        // Call callback after 1 second if stuck\n        setTimeout(closeModal,1000);\n      } else {\n        closeModal();\n      }\n    } catch (err) {\n      closeModal();\n    }\n  }\n\n  handleValidation(e) {\n    if (e && e.target) {\n      this.setState({ email: e.target.value });\n      e.target.parentNode.classList.add(\"was-validated\");\n    }\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        {\n          this.state.subscribed ? (\n            <ModalCard\n              closeFunc={this.closeModal}\n            >\n              <ModalCard.Header title={'All done'} icon={`images/done.svg`}></ModalCard.Header>\n              <ModalCard.Body>\n                <Flex width={1} flexDirection={'column'} mb={3}>\n                  <Text color={'dark-gray'} textAlign={'center'} fontSize={3} my={0}>\n                    Thanks for subscribing!\n                  </Text>\n                  <Button\n                    my={3}\n                    width={'100%'}\n                    borderRadius={4}\n                    onClick={this.closeModal}\n                  >\n                    CLOSE\n                  </Button>\n                </Flex>\n              </ModalCard.Body>\n            </ModalCard>\n          ) : (\n            <ModalCard closeFunc={this.closeModal}>\n              <ModalCard.Header title={'Stay up-to-date!'} icon={`images/notification.svg`}>\n              </ModalCard.Header>\n              <ModalCard.Body>\n                <Form onSubmit={this.handleSubmit}>\n                  <Flex width={1} flexDirection={'column'} mb={3}>\n                    <Text color={'mid-gray'} textAlign={'left'} fontSize={3} my={0}>\n                      Add your e-mail to receive updates about:\n                    </Text>\n                  </Flex>\n                  <Flex width={1} flexDirection={'column'} mt={2}>\n                    <Flex my={2} flexDirection={'row'} alignItems={'center'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Performance reports\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        New Protocols & Tokens\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Latest updates\n                      </Text>\n                    </Flex>\n                    <Form.Field width={1} label={''}>\n                      <Form.Input\n                        px={3}\n                        py={4}\n                        required\n                        width={1}\n                        border={0}\n                        fontSize={3}\n                        type={\"email\"}\n                        name={\"EMAIL\"}\n                        outline={'none'}\n                        borderColor={'cardBorder'}\n                        backgroundColor={'cardBg'}\n                        textAlign={['center','left']}\n                        className={header_styles.input}\n                        placeholder={'Enter your e-mail'}\n                        onChange={this.handleValidation}\n                      />\n                    </Form.Field>\n                    <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n                      <ButtonLoader\n                        buttonText={'SUBMIT'}\n                        isLoading={this.state.sendingForm}\n                        buttonProps={{className:header_styles.gradientButton,width:'100%',type:'submit'}}\n                      >\n                      </ButtonLoader>\n                      <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without e-mail</Link>\n                    </Flex>\n                  </Flex>\n                </Form>\n              </ModalCard.Body>\n            </ModalCard>\n          )\n        }\n      </Modal>\n    );\n  }\n}\n\nexport default WelcomeModal;\n","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\n\nclass MigrateModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'continue_without_migrate',\n        eventLabel: 'MigrateModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowMigrateModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowMigrateModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = () => {\n    const tokenMigrationRoute = this.functionsUtil.getGlobalConfig(['tools','tokenMigration','route']);\n    this.props.goToSection('tools/'+tokenMigrationRoute);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            iconHeight={'40px'}\n            title={'Migrate to Idle'}\n            icon={`images/migrate.svg`}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={3}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                You can migrate your funds from Compound, Aave, Fulcrum, Yearn and Idle V2 with just one transaction.\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                my={2}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.protocolsTokensBalances && Object.keys(this.props.protocolsTokensBalances).map( token => (\n                    <Flex\n                      mb={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      key={`token_${token}`}\n                      justifyContent={'space-between'}\n                    >\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'icon',\n                          props:{\n                            mr:2,\n                            height:'2.3em'\n                          }\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                      <SmartNumber\n                        mr={2}\n                        {...fieldProps}\n                        minPrecision={5}\n                        number={this.props.protocolsTokensBalances[token].balance} \n                      />\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'tokenName',\n                          props:fieldProps\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                    </Flex>\n                  ) )\n                }\n                <Text\n                  mb={0}\n                  fontSize={1}\n                  color={'red'}\n                  fontWeight={500}\n                  textAlign={'center'}\n                >\n                  Please be aware that by migrating your tokens from other protocols, your open positions might be liquidated if collateralized with migrated tokens.\n                </Text>\n              </Flex>\n              <Flex\n                mb={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <ButtonLoader\n                  buttonText={'MIGRATE'}\n                  handleClick={this.migrate}\n                  isLoading={this.state.sendingForm}\n                  buttonProps={{\n                    width:['100%','50%'],\n                    className:header_styles.gradientButton\n                  }}\n                >\n                </ButtonLoader>\n                {\n                /*\n                <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without migrate</Link>\n                */\n                }\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default MigrateModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass UpgradeModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'close_upgrade_modal',\n        eventLabel: 'UpgradeModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowUpgradeModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowUpgradeModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = async (token,strategy=null) => {\n\n    if (!strategy){\n      strategy = this.props.selectedStrategy;\n    }\n\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  convert = async (token) => {\n    const convertTool = this.functionsUtil.getGlobalConfig(['tools','tokenMigration']);\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n\n    if (!this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            icon={`images/migrate.svg`}\n            title={'Upgrade Available'}\n            iconHeight={['35px','40px']}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={[2,3]}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                Idle now supports yield farming and governance tokens distribution, migrate now your portfolio with just one click!\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n              >\n                <Flex\n                  fontSize={[2,3]}\n                  width={[0.5,0.28]}\n                  fontWeight={[4,5]}\n                  color={'copyColor'}\n                >\n                  {\n                    this.props.isMobile ? 'ASSET' : 'ASSET TO MIGRATE'\n                  }\n                </Flex>\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      BALANCE\n                    </Flex>\n                  )\n                }\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      OLD APY\n                    </Flex>\n                  )\n                }\n                <Flex\n                  fontSize={[2,3]}\n                  fontWeight={[4,5]}\n                  width={[0.25,0.19]}\n                  color={'copyColor'}\n                  justifyContent={'center'}\n                >\n                  {\n                    this.props.isMobile ? 'APY' : 'NEW APY'\n                  }\n                </Flex>\n                <Flex\n                  width={[0.25,0.15]}\n                >\n                  \n                </Flex>\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.tokensToMigrate && Object.keys(this.props.tokensToMigrate).map( tokenKey => {\n                    const token = this.props.tokensToMigrate[tokenKey].token;\n                    const strategy = this.props.tokensToMigrate[tokenKey].strategy;\n                    const tokenConfig = this.props.tokensToMigrate[tokenKey].tokenConfig;\n                    const balance = this.props.tokensToMigrate[tokenKey].oldContractBalanceFormatted;\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${tokenKey}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={[0.5,0.28]}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.8em','2.3em']\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                        </Flex>\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <SmartNumber\n                                {...fieldProps}\n                                minPrecision={5}\n                                number={balance}\n                                flexProps={{\n                                  justifyContent:'center'\n                                }}\n                              />\n                            </Flex>\n                          )\n                        }\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <AssetField\n                                {...this.props}\n                                fieldInfo={{\n                                  name:'oldApy',\n                                  props:fieldProps\n                                }}\n                                token={token}\n                                tokenConfig={tokenConfig}\n                              />\n                            </Flex>\n                          )\n                        }\n                        <Flex\n                          width={[0.25,0.19]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={token}\n                            tokenConfig={tokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={[0.25,0.15]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.migrate(token,strategy) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.oldIdleTokensToMigrate && Object.keys(this.props.oldIdleTokensToMigrate).map( token => {\n                    const tokenConfig = this.props.oldIdleTokensToMigrate[token].tokenConfig;\n\n                    if (!tokenConfig){\n                      return null;\n                    }\n\n                    const balance = this.props.oldIdleTokensToMigrate[token].balance;\n                    let newTokenConfig = null;\n\n                    if (tokenConfig.availableStrategies && !this.props.availableTokens[tokenConfig.baseToken]){\n                      newTokenConfig = this.props.availableStrategies[tokenConfig.availableStrategies[0]][tokenConfig.baseToken];\n                    } else {\n                      newTokenConfig = this.props.availableTokens[tokenConfig.baseToken];\n                    }\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${token}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={0.28}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:'2.3em'\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <SmartNumber\n                            {...fieldProps}\n                            minPrecision={5}\n                            number={balance}\n                            flexProps={{\n                              justifyContent:'center'\n                            }}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'oldApy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.15}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.convert(token) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                my={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <RoundButton\n                  handleClick={this.closeModal}\n                  buttonProps={{\n                    fontSize:[2,3],\n                    width:['100%','40%'],\n                  }}\n                >\n                  MIGRATE LATER\n                </RoundButton>\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default UpgradeModal;","import React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport { Flex, Card, Icon, Text } from 'rimble-ui';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardMenu from '../DashboardMenu/DashboardMenu';\n\n// Import page components\nimport Stats from '../Stats/Stats';\nimport Utils from '../Utils/Utils';\nimport AssetPage from '../AssetPage/AssetPage';\nimport RoundButton from '../RoundButton/RoundButton';\nimport BetaModal from \"../utilities/components/BetaModal\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CurveStrategy from '../CurveStrategy/CurveStrategy';\nimport PolygonModal from \"../utilities/components/PolygonModal\";\nimport WelcomeModal from \"../utilities/components/WelcomeModal\";\nimport TooltipModal from \"../utilities/components/TooltipModal\";\nimport MigrateModal from \"../utilities/components/MigrateModal\";\nimport UpgradeModal from \"../utilities/components/UpgradeModal\";\nimport DashboardHeader from '../DashboardHeader/DashboardHeader';\n\nclass Dashboard extends Component {\n  state = {\n    menu:[],\n    baseRoute:null,\n    clickEvent:null,\n    activeModal:null,\n    currentRoute:null,\n    pageComponent:null,\n    currentSection:null,\n    currentNetwork:null,\n    selectedSection:null,\n    tokensToMigrate:null,\n    showResetButton:false,\n    selectedSubsection:null,\n    pageComponentProps:null,\n    oldIdleTokensToMigrate:null,\n    protocolsTokensBalances:null,\n  };\n\n  timeoutId = null;\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    window.functionsUtil = this.functionsUtil;\n  }\n\n  async loadMenu() {\n    const currentNetwork = this.functionsUtil.getCurrentNetwork();\n\n    const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    const menu = Object.keys(strategies).filter( s => ( !strategies[s].comingSoon && (!strategies[s].availableNetworks || strategies[s].availableNetworks.includes(currentNetwork.id)) ) ).map( strategy => ({\n        submenu:[],\n        color:'#fff',\n        selected:false,\n        route:baseRoute+'/'+strategy,\n        label:strategies[strategy].title,\n        image:strategies[strategy].icon,\n        bgColor:strategies[strategy].color,\n        component:strategies[strategy].component,\n        imageInactive:strategies[strategy].iconInactive,\n        imageInactiveDark:strategies[strategy].iconInactiveDark\n      })\n    );\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n\n    // Add Curve\n    if (curveConfig.enabled){\n      const curveParams = Object.assign({\n        submenu:[],\n        selected:false,\n        component:CurveStrategy,\n      },curveConfig.params);\n\n      menu.push(curveParams);\n    }\n\n    // Add Stake\n    const stakeConfig = this.functionsUtil.getGlobalConfig(['tools','stake']);\n    if (stakeConfig.enabled && (!stakeConfig.availableNetworks || stakeConfig.availableNetworks.includes(currentNetwork.id))){\n      menu.push(\n        {\n          submenu:[],\n          label:'Stake',\n          selected:false,\n          color:'dark-gray',\n          icon:stakeConfig.icon,\n          route:'/dashboard/stake',\n          component:Utils,\n          componentProps:{\n            showBreadCrumb:false,\n            toolProps:stakeConfig.props,\n            selectedSubsection:stakeConfig\n          },\n          bgColor:this.props.theme.colors.primary,\n        }\n      );\n    }\n\n    // Add tools\n    menu.push(\n      {\n        icon:'Build',\n        label:'Tools',\n        color:'dark-gray',\n        component:Utils,\n        selected:false,\n        route:'/dashboard/tools',\n        bgColor:this.props.theme.colors.primary,\n        submenu:Object.values(this.functionsUtil.getGlobalConfig(['tools'])).filter( tool => (tool.enabled && (!tool.availableNetworks || tool.availableNetworks.includes(currentNetwork.id))) )\n      }\n    );\n\n    // console.log(currentNetwork.id,menu);\n\n    // Add Stats\n    const statsInfo = this.functionsUtil.getGlobalConfig(['stats']);\n    if (!statsInfo.availableNetworks || statsInfo.availableNetworks.includes(currentNetwork.id)){\n      menu.push(\n        {\n          icon:'Equalizer',\n          label:'Stats',\n          bgColor:'#21f36b',\n          color:'dark-gray',\n          component:Stats,\n          selected:false,\n          route:'/dashboard/stats',\n          submenu:[]\n        }\n      );\n    }\n\n    // Add Forum\n    menu.push(\n      {\n        submenu:[],\n        icon:'Forum',\n        mobile:false,\n        label:'Forum',\n        selected:false,\n        component:null,\n        color:'dark-gray',\n        bgColor:'#ff0000',\n        isExternalLink:true,\n        route:this.functionsUtil.getGlobalConfig(['forumURL'])\n      }\n    );\n\n    await this.setState({\n      menu,\n      currentNetwork\n    });\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  openTooltipModal = (modalTitle,modalContent) => {\n\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: modalTitle,\n      eventLabel: 'TooltipModal'\n    });\n\n    this.setState({\n      modalTitle,\n      modalContent\n    },() => {\n      this.setActiveModal('tooltip');\n    })\n  }\n\n  setActiveModal = (activeModal) => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadParams() {\n    const { match: { params } } = this.props;\n\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    let currentRoute = baseRoute;\n\n    let pageComponent = null;\n    let selectedToken = null;\n    let currentSection = null;\n    let selectedStrategy = null;\n    let pageComponentProps = null;\n\n    // Set strategy\n    if (params.section){\n      currentSection = params.section;\n      const param1 = params.param1;\n      const param2 = params.param2;\n\n      const section_is_strategy = Object.keys(this.props.availableStrategies).includes(currentSection.toLowerCase());\n      const param1_is_strategy = param1 && Object.keys(this.props.availableStrategies).includes(param1.toLowerCase());\n\n      if (section_is_strategy || param1_is_strategy){\n\n        if (!section_is_strategy){\n          currentRoute += '/'+currentSection;\n        }\n\n        selectedStrategy = section_is_strategy ? currentSection : param1;\n        currentRoute += '/'+selectedStrategy;\n\n        // Set token\n        const param1_is_token = param1 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param1.toUpperCase());\n        const param2_is_token = param2 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param2.toUpperCase());\n        if (param1_is_token || param2_is_token){\n          selectedToken = param1_is_token ? param1.toUpperCase() : param2.toUpperCase();\n          currentRoute += '/'+selectedToken;\n\n          if (section_is_strategy){\n            pageComponent = AssetPage;\n          }\n        }\n      } else {\n        currentRoute += '/'+params.section;\n\n        if (params.param1 && params.param1.length){\n          currentRoute += '/'+params.param1;\n        }\n\n        // if (params.param2 && params.param2.length){\n        //   currentRoute += '/'+params.param2;\n        // }\n      }\n    }\n\n    const menu = this.state.menu;\n\n    let selectedSection = null;\n    let selectedSubsection = null;\n\n    menu.forEach(m => {\n      m.selected = false;\n      const sectionRoute = baseRoute+'/'+params.section;\n      if (currentRoute.toLowerCase() === m.route.toLowerCase() || ( !m.submenu.length && m.route.toLowerCase() === sectionRoute.toLowerCase() )){\n        m.selected = true;\n        if (pageComponent === null){\n          pageComponent = m.component;\n          pageComponentProps = m.componentProps;\n        }\n      } else if (m.submenu.length) {\n        m.submenu.forEach(subm => {\n          subm.selected = false;\n          const submRoute = m.route+'/'+subm.route;\n          if (submRoute.toLowerCase() === currentRoute.toLowerCase()){\n            m.selected = true;\n            subm.selected = true;\n\n            // Set component, if null use parent\n            if (pageComponent === null){\n              if (subm.component){\n                pageComponent = subm.component;\n                pageComponentProps = m.componentProps;\n              } else {\n                pageComponent = m.component;\n                pageComponentProps = m.componentProps;\n              }\n            }\n          }\n\n          // Set selected subsection\n          if (subm.selected){\n            selectedSubsection = subm;\n          }\n\n        });\n      }\n\n      // Set selected section\n      if (m.selected){\n        selectedSection = m;\n      }\n    });\n\n    // console.log('pageComponent',params,pageComponent);\n\n    // Exit if no strategy and token selected\n    if (!pageComponent){\n      return this.goToSection('/',false);\n    }\n\n    // console.log('loadParams',selectedStrategy,selectedToken);\n    await this.props.setStrategyToken(selectedStrategy,selectedToken);\n    \n    // Send GA pageview\n    this.functionsUtil.sendGoogleAnalyticsPageview(currentRoute);\n\n    await this.setState({\n      menu,\n      params,\n      baseRoute,\n      currentRoute,\n      pageComponent,\n      currentSection,\n      selectedSection,\n      pageComponentProps,\n      selectedSubsection\n    });\n  }\n\n  componentWillUnmount(){\n    if (this.timeoutId){\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n\n  async componentWillMount() {\n\n    this.props.setCurrentSection('dashboard');\n\n    this.loadUtils();\n    // await this.loadMenu();\n    // this.loadParams();\n  }\n\n  async componentDidMount() {\n\n    this.timeoutId = window.setTimeout(() => {\n      if (!this.props.accountInizialized || !this.props.contractsInitialized){\n        this.setState({\n          showResetButton:true\n        });\n      }\n    },20000);\n\n    if (!this.props.web3){\n      return this.props.initWeb3();\n    } else if (!this.props.networkInitialized){\n      return this.props.checkNetwork();\n    } else if (!this.props.accountInizialized){\n      return this.props.initAccount();\n    } else if (!this.props.contractsInitialized){\n      return this.props.initializeContracts();\n    }\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n\n    const viewOnly = this.props.connectorName === 'custom';\n    if (!viewOnly){\n      this.checkModals();\n    }\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n\n    this.loadUtils();\n\n    const prevParams = prevProps.match.params;\n    const params = this.props.match.params;\n\n    if (JSON.stringify(prevParams) !== JSON.stringify(params)){\n      await this.setState({\n        pageComponent:null\n      }, () => {\n        this.loadParams();\n      });\n    }\n    \n    const networkChanged = !prevProps.networkInitialized && this.props.networkInitialized;\n    if (networkChanged){\n      await this.loadMenu();\n      this.loadParams();\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n    const accountChanged = prevProps.account !== this.props.account;\n    const strategyChanged = this.props.selectedStrategy && prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const accountInizialized = this.props.accountInizialized && prevProps.accountInizialized !== this.props.accountInizialized;\n    const contractsInitialized = this.props.contractsInitialized && prevProps.contractsInitialized !== this.props.contractsInitialized;\n\n    if (!viewOnly && (networkChanged || accountChanged || accountInizialized || contractsInitialized || strategyChanged || availableTokensChanged)){\n      this.checkModals();\n    }\n  }\n\n  async checkModals(){\n\n    if (this.props.selectedToken || !this.props.accountInizialized || !this.props.contractsInitialized || !this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    await this.checkPolygonModal();\n    await this.checkBetaApproval();\n    await this.checkTokensToMigrate();\n    await this.checkWelcomeModal();\n    await this.checkProtocolsTokensBalances();\n  }\n\n  async checkPolygonModal(){\n    const isPolygon = this.state.currentNetwork.provider === 'polygon';\n    const isPolygonApproved = this.functionsUtil.getStoredItem('polygonApproved',false,false);\n\n    // console.log('checkPolygonModal',this.state.currentNetwork,isPolygon);\n\n    // Show Beta Warning modal\n    if (isPolygon && !isPolygonApproved){\n      const activeModal = 'polygon';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal\n        });\n        return activeModal;\n      }\n    }\n  }\n\n  async checkBetaApproval(){\n    const isOriginUrl = this.functionsUtil.checkUrlOrigin();\n    const isPolygon = this.state.currentNetwork.provider === 'polygon';\n    const isBetaApproved = this.functionsUtil.getStoredItem('betaApproved',false,false);\n\n    // Show Beta Warning modal\n    if (!isOriginUrl && !isBetaApproved && !isPolygon && this.state.activeModal === null){\n      const activeModal = 'beta';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal\n        });\n\n        return activeModal;\n      }\n    }\n  }\n\n  async checkTokensToMigrate(){\n\n    const showUpgradeModal = this.functionsUtil.getStoredItem('dontShowUpgradeModal',false,null) !== null ? false : true;\n    if (this.props.selectedToken || !showUpgradeModal || !this.props.availableTokens || this.state.activeModal !== null){\n      return null;\n    }\n\n    const tokensToMigrate = await this.functionsUtil.getTokensToMigrate();\n    const oldIdleTokensToMigrate = await this.functionsUtil.getProtocolsTokensBalances('idle');\n\n    // console.log('tokensToMigrate',tokensToMigrate);\n    \n    if ((tokensToMigrate && Object.keys(tokensToMigrate).length>0) || (oldIdleTokensToMigrate && Object.keys(oldIdleTokensToMigrate).length>0)){\n      const activeModal = 'upgrade';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n          tokensToMigrate,\n          oldIdleTokensToMigrate\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkWelcomeModal(){\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show welcome modal\n    if (this.props.account && this.state.activeModal === null){\n      let welcomeIsOpen = false;\n\n      const welcomeModalProps = this.functionsUtil.getGlobalConfig(['modals','welcome']);\n\n      if (welcomeModalProps.enabled && localStorage){\n\n        // Check the last login of the wallet\n        const currTime = new Date().getTime();\n        const walletAddress = this.props.account.toLowerCase();\n        let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : {};\n\n        // First login\n        if (!lastLogin[walletAddress]){\n          lastLogin[walletAddress] = {\n            'signedUp':false,\n            'lastTime':currTime\n          };\n          welcomeIsOpen = true;\n        // User didn't sign up\n        } else if (!lastLogin[walletAddress].signedUp) {\n          const lastTime = parseInt(lastLogin[walletAddress].lastTime);\n          const timeFromLastLogin = (currTime-lastTime)/1000;\n          welcomeIsOpen = timeFromLastLogin>=welcomeModalProps.frequency; // 1 day since last login\n        }\n\n        if (welcomeIsOpen){\n          lastLogin[walletAddress].lastTime = currTime;\n          this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n        }\n      }\n\n      const activeModal = welcomeIsOpen ? 'welcome' : this.state.activeModal;\n      if (this.state.activeModal !== activeModal){\n        await this.setState({\n          activeModal\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkProtocolsTokensBalances() {\n\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show migration modal if no other modals are opened\n    const migrateModalEnabled = this.functionsUtil.getGlobalConfig(['modals','migrate','enabled']);\n    const showMigrateModal = this.functionsUtil.getStoredItem('dontShowMigrateModal',false,null) !== null ? false : true;\n\n    if (this.state.activeModal === null && migrateModalEnabled && showMigrateModal && !this.state.protocolsTokensBalances){\n      const protocolsTokensBalances = await this.functionsUtil.getProtocolsTokensBalances();\n      const activeModal = protocolsTokensBalances && Object.keys(protocolsTokensBalances).length>0 ? 'migrate' : null;\n      const newState = {\n        activeModal,\n        protocolsTokensBalances\n      };\n      await this.setState(newState);\n      return activeModal;\n    }\n\n    return null;\n  }\n\n  goToSection(section,isDashboard=true){\n\n    // Remove dashboard route\n    if (isDashboard){\n      section = section.replace(this.state.baseRoute +'/','');\n    }\n\n    const newRoute = isDashboard ? this.state.baseRoute+'/'+section : section;\n    window.location.hash = newRoute;\n\n    // Send GA event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'goToSection',\n      eventLabel: newRoute\n    });\n\n    window.scrollTo(0, 0);\n  }\n\n  logout = async () => {\n    this.props.setConnector('Infura','Infura');\n    await this.props.initWeb3('Infura');\n  }\n\n  changeToken(selectedToken){\n    selectedToken = selectedToken.toUpperCase();\n    if (Object.keys(this.props.availableTokens).includes(selectedToken)){\n      const routeParts = [];\n\n      // Add section\n      if (this.state.currentSection.toLowerCase() !== this.props.selectedStrategy.toLowerCase()){\n        routeParts.push(this.state.currentSection);\n      }\n\n      // Add strategy\n      routeParts.push(this.props.selectedStrategy); \n\n      // Add token\n      routeParts.push(selectedToken);\n\n      this.goToSection(routeParts.join('/'));\n    }\n  }\n\n  propagateClickEvent(clickEvent){\n    this.setState({\n      clickEvent:clickEvent.target\n    });\n  }\n\n  render() {\n    const PageComponent = this.state.pageComponent ? this.state.pageComponent : null;\n    return (\n      <Flex\n        width={'100%'}\n        position={'fixed'}\n        flexDirection={'row'}\n        className={this.props.themeMode}\n        backgroundColor={['dashboardBg','white']}\n        /*onClick={ e => this.propagateClickEvent(e) }*/\n        height={[(window.innerHeight-61)+'px','100vh']}\n      >\n        <Flex\n          bottom={0}\n          zIndex={99999}\n          width={[1,1/6]}\n          flexDirection={'column'}\n          position={['fixed','relative']}\n        >\n          <Card\n            p={[0,3]}\n            border={0}\n            width={['100vw','auto']}\n            height={['auto','100vh']}\n            backgroundColor={'menuBg'}\n            borderColor={this.props.theme.colors.menuRightBorder}\n            borderRight={`1px solid ${this.props.theme.colors.menuRightBorder}`}\n            >\n            <DashboardMenu\n              {...this.props}\n              menu={this.state.menu}\n            />\n          </Card>\n        </Flex>\n        <Flex\n          py={3}\n          mb={0}\n          px={[3,5]}\n          width={[1,5/6]}\n          style={{\n            overflowY:'scroll',\n            overflowX:'hidden'\n          }}\n          height={['92vh','auto']}\n          flexDirection={'columns'}\n          backgroundColor={'dashboardBg'}\n        >\n          {\n            !this.props.networkInitialized || !this.props.accountInizialized || !this.props.contractsInitialized || !PageComponent ? (\n              <Flex\n                width={1}\n                minHeight={'50vg'}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                {\n                  !this.props.network.isCorrectNetwork ? (\n                    <DashboardCard\n                      cardProps={{\n                        p:3,\n                        mt:3,\n                        width:[1,0.35]\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Icon\n                          size={'2.3em'}\n                          name={'Warning'}\n                          color={'cellText'}\n                        />\n                        <Text\n                          mt={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          The <strong>{this.functionsUtil.capitalize(this.props.network.current.name)} Network</strong> is not supported, please switch to the correct network.\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  ) : !this.state.showResetButton ? (\n                    <FlexLoader\n                      textProps={{\n                        textSize:4,\n                        fontWeight:2\n                      }}\n                      loaderProps={{\n                        mb:3,\n                        size:'40px'\n                      }}\n                      flexProps={{\n                        my:3,\n                        flexDirection:'column'\n                      }}\n                      text={ !this.props.networkInitialized ? 'Loading network...' : (!this.props.accountInizialized ? 'Loading account...' : ( !this.props.contractsInitialized ? 'Loading contracts...' : 'Loading assets...' ))}\n                    />\n                  ) : (\n                    <DashboardCard\n                      cardProps={{\n                        p:3,\n                        mt:3,\n                        width:[1,0.35]\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Icon\n                          size={'2.3em'}\n                          name={'Warning'}\n                          color={'cellText'}\n                        />\n                        <Text\n                          mt={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          Idle can't connect to your wallet!<br />Make sure that your wallet is unlocked and try again.\n                        </Text>\n                        <RoundButton\n                          buttonProps={{\n                            mt:3,\n                            width:[1,1/2]\n                          }}\n                          handleClick={this.logout.bind(this)}\n                        >\n                          Logout\n                        </RoundButton>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n              </Flex>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardHeader\n                  clickEvent={this.state.clickEvent}\n                  goToSection={this.goToSection.bind(this)}\n                  {...this.props}\n                />\n                {\n                  PageComponent &&\n                    <PageComponent\n                      {...this.props}\n                      match={{ params:{} }}\n                      urlParams={this.state.params}\n                      changeToken={this.changeToken.bind(this)}\n                      goToSection={this.goToSection.bind(this)}\n                      selectedSection={this.state.selectedSection}\n                      selectedSubsection={this.state.selectedSubsection}\n                      openTooltipModal={this.openTooltipModal.bind(this)}\n                      {...this.state.pageComponentProps}\n                      />\n                }\n              </Flex>\n            )\n          }\n        </Flex>\n        {\n          this.state.currentNetwork && \n            <PolygonModal\n              closeModal={this.resetModal}\n              goToSection={this.goToSection.bind(this)}\n              currentNetwork={this.state.currentNetwork}\n              isOpen={this.state.activeModal === 'polygon'}\n            />\n        }\n        <BetaModal\n          closeModal={this.resetModal}\n          isOpen={this.state.activeModal === 'beta'}\n        />\n        <UpgradeModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          tokensToMigrate={this.state.tokensToMigrate}\n          isOpen={this.state.activeModal === 'upgrade'}\n          oldIdleTokensToMigrate={this.state.oldIdleTokensToMigrate}\n        />\n        <MigrateModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          isOpen={this.state.activeModal === 'migrate'}\n          protocolsTokensBalances={this.state.protocolsTokensBalances}\n        />\n        <TooltipModal\n          closeModal={this.resetModal}\n          title={this.state.modalTitle}\n          content={this.state.modalContent}\n          isOpen={this.state.activeModal === 'tooltip'}\n        />\n        <WelcomeModal\n          closeModal={this.resetModal}\n          account={this.props.account}\n          simpleID={this.props.simpleID}\n          network={this.props.network.current}\n          tokenName={this.props.selectedToken}\n          initSimpleID={this.props.initSimpleID}\n          baseTokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'welcome'}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default Dashboard;"],"sourceRoot":""}